/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/login": {
    post: operations["postLogin"];
  };
  "/no-credential-login": {
    post: operations["postNoCredentialLogin"];
  };
  "/clever/oauth/token": {
    post: operations["postCleverAuthenticate"];
  };
  "/clever/roster-sync": {
    /** This API provides get all the clever 's data' and add in codex database. */
    get: operations["getCleverRosterSync"];
  };
  "/google/oauth/token": {
    post: operations["postGoogleAuthenticate"];
  };
  "/class-link/oauth/token": {
    post: operations["postClassLinkAuthenticate"];
  };
  "/class-link/roster-sync": {
    /** This API provides get all the classlink 's data' and add in codex database. */
    get: operations["getClasslinkRosterSync"];
  };
  "/reset-password-request": {
    /** POST API call when administartor, lit, or teacher user want to reset their password. */
    post: operations["postUserResetPasswordRequest"];
  };
  "/reset-password": {
    /** POST API call when administartor, lit, or teacher user reset their password. */
    post: operations["postResetPassword"];
  };
  "/reset-password-request-resend": {
    /** POST API call when administartor, lit, or teacher user want to resend reset password request. */
    post: operations["postUserResetPasswordRequestResend"];
  };
  "/users/{userId}/codeIllusionPackage": {
    /**
     * This API returns the CodeIllusionPacakges available to the specified user.
     * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
     */
    get: operations["getUsersUserIdCodeIllusionPackages"];
  };
  "/lessons": {
    /** This API provides a list of Lesson definitions. */
    get: operations["getLessons"];
  };
  "/users/{userId}/lessonStatuses": {
    /**
     * This API provides Lesson Statuses for the specified User.
     * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
     */
    get: operations["getUsersUserIdLessonStatuses"];
  };
  "/users/{userId}/settings": {
    /**
     * This API provides Settings for the specified User.
     * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
     */
    get: operations["getUserSettings"];
  };
  "/users/{userId}/soundSettings": {
    /**
     * This API updates SoundSettings for the specified User.
     * SoundSettings is the part of User's Settings.
     * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
     */
    put: operations["updateUserSoundSettings"];
  };
  "/user-package-assignments": {
    /** This API returns the UserPackageAssignment which are assigned to the specified user. */
    get: operations["getUserPackageAssignments"];
    /** This API create the UserPackageAssignment. */
    post: operations["postUserPackageAssignment"];
    /** This API deletes the UserPackageAssignment which are assigned to the specified user. */
    delete: operations["deleteUserPackageAssignment"];
  };
  "/districts": {
    /**
     * This API provides all the Districts.
     * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
     */
    get: operations["getDistricts"];
  };
  "/district": {
    /** District POST API call when user want to add district in system. */
    post: operations["postDistrict"];
  };
  "/district/{districtId}": {
    /** This API gives the district by districtId. */
    get: operations["getDistrictByDistrictId"];
    /** District PUT API call when user want to edit district in system. */
    put: operations["putDistrict"];
    /** Delete district */
    delete: operations["deleteDistrict"];
  };
  "/district/{districtId}/administrators": {
    /** This API provides a list of all the administrators. */
    get: operations["getAdministrators"];
    post: operations["postAdministrators"];
  };
  "/administrator/{administratorId}": {
    /** Administrator PUT API call when user want to edit administrator in system. */
    put: operations["putAdministrator"];
    /** delete an administrator */
    delete: operations["deleteAdministrator"];
  };
  "/district/{districtId}/organizations": {
    /**
     * This API provides all the organizations.
     * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
     */
    get: operations["getOrganizations"];
  };
  "/organization": {
    /** Organization POST API call when user want to add organization in system. */
    post: operations["postOrganization"];
  };
  "/organization/{organizationId}": {
    /** Organization PUT API call when user want to edit organization information in system. */
    put: operations["putOrganization"];
    /** Organization DELETE API call when user want to delete organization in system. */
    delete: operations["deleteOrganization"];
  };
  "/organization/{organizationId}/student-groups": {
    /**
     * This API provides the student groups based on organizationId
     * If the user pointed to by the token does not have permission to view the information for the specified student groups, an error will occur.
     */
    get: operations["getStudentGroups"];
  };
  "/organization/{organizationId}/student-group": {
    /** Student Group POST API call when user want to add student group in system. */
    post: operations["postStudentGroup"];
  };
  "/organization/{organizationId}/district-lms-information": {
    /** This API provides the district lms information based on organizationId. */
    get: operations["getDistrictLMSInformationByOrganization"];
  };
  "/student-group/{studentGroupId}": {
    /** Student Group PUT API call when user want to edit student group in system. */
    put: operations["putStudentGroup"];
    /** Delete Student Group */
    delete: operations["deleteStudentGroup"];
  };
  "/student-group/{studentGroupId}/codeillusion-packages": {
    get: operations["getPackageDetailsByStudentGroupId"];
  };
  "/student-group/{studentGroupId}/students": {
    /** This API provides the students based on studentGroupId. */
    get: operations["getStudents"];
    post: operations["postStudents"];
  };
  "/student-group/{studentGroupId}/students/{studentId}": {
    /** This API add existing student to student group */
    post: operations["postStudentInStudentGroup"];
    /** DELETE API call when user Internal Operator or Administrator want to remove the student from studentGroup. */
    delete: operations["deleteStudentFromStudentGroup"];
  };
  "/student/{studentId}": {
    /** Student PUT API call when user want to edit student information in system. */
    put: operations["putStudent"];
    /** Student DELETE API call when user want to delete student in system. */
    delete: operations["deleteStudent"];
  };
  "/organization/{organizationId}/teachers": {
    /** This API provides the teachers based on organizationId */
    get: operations["getTeachers"];
    post: operations["postTeachers"];
  };
  "/teacher/{teacherId}": {
    /** This API gives  the teacher's basic details and it's organization's details. */
    get: operations["getTeacherOrganizations"];
    /** Teacher PUT API call when user want to edit teacher in system. */
    put: operations["putTeacher"];
    /** delete an teacher */
    delete: operations["deleteTeacher"];
  };
  "/organization/{organizationId}/teacher/{teacherId}": {
    /** POST API call when user want to add teacher into organization. */
    post: operations["postTeacherInOrganization"];
    /** DELETE API call when user(Internal Operator/Administrator) want to remove the teacher from organization. */
    delete: operations["deleteTeacherFromOrganization"];
  };
  "/student-group/{studentGroupId}/unaccessible-lesson": {
    /** POST API call when teacher want to restrict lesson access to their student group. */
    post: operations["postStudentGroupUnaccessibleLesson"];
    /** Delete API call when teacher / internal operator / district administrator want to remove restrict lesson access to their student group. */
    delete: operations["deleteStudentGroupUnaccessibleLesson"];
  };
  "/student-group/{studentGroupId}/unaccessible-lessons": {
    /** Get API call when teacher / internal operator / district administrator want to view restrict lesson access to their student group. */
    get: operations["getUnaccessibleLessons"];
  };
  "/student-group/{studentGroupId}/lesson-statuses": {
    /** GET API call when teacher / internal operator / district administrator want to view lesson statuses for student group. */
    get: operations["getStudentGroupLessonStatuses"];
  };
  "/me": {
    get: operations["getLoggedInUser"];
  };
  "/user-lesson-status": {
    /** This POST API call when user start the any lesson. */
    post: operations["postUserLessonStatus"];
  };
  "/codex-packages": {
    get: operations["getAllPackages"];
  };
  "/district/{districtId}/district-purchased-packages": {
    get: operations["getDistrictPurchasedPackagesByDistrictId"];
  };
  "/standard-mappings": {
    /** This API provides standard-mapping information of state. */
    get: operations["getStandardMapping"];
  };
  "/{studentId}/unaccessible-lesson": {
    /** Get API call when user want to view restricted lesson. */
    get: operations["getStudentUnaccessibleLessons"];
  };
  "/student-group-package-assignments": {
    /** This API provides the StudentGroupPackageAssignments based on queries */
    get: operations["getStudentGroupPackageAssignments"];
  };
  "/codeIllusionPackage": {
    get: operations["getCodeIllusionPackage"];
  };
  "/cse-packages/{packageId}": {
    get: operations["getCsePackage"];
  };
  "/change-password": {
    /** PUT API call when teacher,administrator or internal operator want to change their password. */
    put: operations["putChangePassword"];
  };
  "/district-roster-sync-statuses": {
    /** This API provides roster sync status of district. */
    get: operations["getDistrictRosterSyncStatus"];
  };
  "/player_api/check_token": {
    /** Lesson Player calls this API once at startup, verifying that the Bearer token is valid. If not, returning a redirect url. */
    get: operations["getCheckToken"];
  };
  "/player_api/player_setting": {
    /** The Lesson Player calls this API once at startup, and the return value contains a variety of information that can be used to change the behavior of the Lesson Player. */
    get: operations["getPlayersSetting"];
  };
  "/player_api/server_status": {
    /** The Lesson Player expects the "isMaintenance" flag to always be false. */
    get: operations["getPlayersServerStatus"];
  };
  "/player_api/action_log": {
    /** The Lesson Player calls this API once for action log */
    post: operations["postActionLog"];
  };
  "/player_api/step_passed": {
    /** The Lesson Player calls this API once for each step completed; it stores the information on the BACKEND side and returns nothing. It always succeeds. */
    post: operations["postStepPassed"];
  };
  "/player_api/quiz_answered": {
    /** The Lesson Player calls this API once for each step completed; it stores the information on the BACKEND side and returns nothing. It always succeeds. */
    post: operations["postQuizAnswered"];
  };
  "/player_api/lesson_setting": {
    /** The Lesson Player calls this API once at the start of each lesson. The display of the editor screen changes according to the returned value. */
    get: operations["getLessonsSetting"];
  };
  "/player_api/lesson_finished": {
    /** Lesson Player calls this API at the end of each lesson. It moves to the specified destination according to the return value. */
    post: operations["postLessonFinished"];
  };
  "/player_api/lesson_cleared": {
    /** Lesson Player calls this API at the end of each lesson. It moves to the specified destination according to the return value. */
    post: operations["postLessonCleared"];
  };
  "/player_api/after_lesson_cleared": {
    /** Lesson Player calls this API at the end of each lesson. It moves to the specified destination according to the return value. */
    get: operations["getAfterLessonCleared"];
  };
  "/player_api/lesson_sheet_changed": {
    post: operations["postLessonSheetChanged"];
  };
  "/churnzero/token": {
    get: operations["getChurnZeroAuthentication"];
  };
  "/health-check": {
    get: operations["maintenanceHealthCheck"];
  };
  "/maintenance/users": {
    get: operations["maintenanceGetUsers"];
    put: operations["maintenancePutUsers"];
    post: operations["maintenancePostUsers"];
  };
  "/maintenance/accountNotification": {
    post: operations["maintenancePostAccountNotification"];
  };
  "/maintenance/districts": {
    get: operations["maintenanceGetDistricts"];
    put: operations["maintenancePutDistricts"];
  };
  "/maintenance/organizations": {
    get: operations["maintenanceGetOrganizations"];
    put: operations["maintenancePutOrganizations"];
  };
  "/maintenance/studentGroups": {
    get: operations["maintenanceGetStudentGroups"];
    put: operations["maintenancePutStudentGroups"];
  };
  "/maintenance/administratorDistricts": {
    get: operations["maintenanceGetAdministratorDistricts"];
    post: operations["maintenancePostAdministratorDistricts"];
    delete: operations["maintenanceDeleteAdministratorDistricts"];
  };
  "/maintenance/teacherOrganizations": {
    get: operations["maintenanceGetTeacherOrganizations"];
    post: operations["maintenancePostTeacherOrganizations"];
    delete: operations["maintenanceDeleteTeacherOrganizations"];
  };
  "/maintenance/studentGroupStudents": {
    get: operations["maintenanceGetStudentGroupStudents"];
    post: operations["maintenancePostStudentGroupStudents"];
    delete: operations["maintenanceDeleteStudentGroupStudents"];
  };
  "/maintenance/constructFreeTrialAccountsForSales": {
    get: operations["maintenanceGetConstructFreeTrialAccountsForSales"];
  };
}

export interface components {
  schemas: {
    postLogin_request: {
      /** @description login ID */
      loginId: string;
      /** @description password */
      password: string;
    };
    /**
     * @example {
     *   "role": "student",
     *   "id": "id",
     *   "accessToken": "accessToken"
     * }
     */
    postLogin_200_response_user: {
      id: string;
      accessToken: string;
      /** @enum {string} */
      role:
        | "student"
        | "teacher"
        | "administrator"
        | "internalOperator"
        | "anonymous";
    };
    /**
     * @example {
     *   "user": {
     *     "role": "student",
     *     "id": "id",
     *     "accessToken": "accessToken"
     *   }
     * }
     */
    postLogin_200_response: {
      user: components["schemas"]["postLogin_200_response_user"];
    };
    /** Error */
    Error: {
      error: string;
    };
    postCleverAuthenticate_request: {
      code: string;
      grantType: string;
      redirectUri: string;
      studentGroupId: string;
      organizationId: string;
    };
    /**
     * @example {
     *   "role": "role",
     *   "id": "id",
     *   "accessToken": "accessToken"
     * }
     */
    postCleverAuthenticate_200_response_user: {
      id: string;
      accessToken: string;
      role: string;
    };
    /**
     * @example {
     *   "user": {
     *     "role": "role",
     *     "id": "id",
     *     "accessToken": "accessToken"
     *   }
     * }
     */
    postCleverAuthenticate_200_response: {
      user?: components["schemas"]["postCleverAuthenticate_200_response_user"];
    };
    /**
     * @example {
     *   "message": "message"
     * }
     */
    getCleverRosterSync_200_response: {
      message?: string;
    };
    postGoogleAuthenticate_request: {
      token: string;
      studentGroupId: string;
      organizationId: string;
      role: string;
    };
    postClassLinkAuthenticate_request: {
      code: string;
      studentGroupId: string;
      organizationId: string;
      role: string;
    };
    /**
     * @example {
     *   "message": "ok"
     * }
     */
    getClasslinkRosterSync_200_response: {
      /** @enum {string} */
      message?: "ok";
    };
    postUserResetPasswordRequest_request: {
      email: string;
    };
    postUserResetPasswordRequest_500_response: {
      error: string;
    };
    postResetPassword_request: {
      isValidateToken?: boolean;
      token: string;
      password?: string;
    };
    postUserResetPasswordRequestResend_request: {
      token: string;
    };
    /**
     * @example {
     *   "bookImageUrl": "bookImageUrl",
     *   "allLessonIds": [
     *     "allLessonIds",
     *     "allLessonIds"
     *   ],
     *   "course": "basic",
     *   "characterImageUrl": "characterImageUrl",
     *   "id": "id",
     *   "gemLessonIds": [
     *     "gemLessonIds",
     *     "gemLessonIds"
     *   ],
     *   "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *   "bookLessonIds": [
     *     "bookLessonIds",
     *     "bookLessonIds"
     *   ],
     *   "bookName": "bookName"
     * }
     */
    CodeIllusionPackage_chapters_inner_circles_inner: {
      id: string;
      /**
       * Course
       * @enum {string}
       */
      course: "basic" | "webDesign" | "mediaArt" | "gameDevelopment" | "";
      characterImageUrl: string;
      clearedCharacterImageUrl: string;
      gemLessonIds: string[];
      bookLessonIds: string[];
      bookName: string;
      bookImageUrl: string;
      allLessonIds: string[];
    };
    /**
     * @example {
     *   "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *   "name": "name",
     *   "lessonNoteSheetsZipUrl": "lessonNoteSheetsZipUrl",
     *   "circles": [
     *     {
     *       "bookImageUrl": "bookImageUrl",
     *       "allLessonIds": [
     *         "allLessonIds",
     *         "allLessonIds"
     *       ],
     *       "course": "basic",
     *       "characterImageUrl": "characterImageUrl",
     *       "id": "id",
     *       "gemLessonIds": [
     *         "gemLessonIds",
     *         "gemLessonIds"
     *       ],
     *       "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *       "bookLessonIds": [
     *         "bookLessonIds",
     *         "bookLessonIds"
     *       ],
     *       "bookName": "bookName"
     *     },
     *     {
     *       "bookImageUrl": "bookImageUrl",
     *       "allLessonIds": [
     *         "allLessonIds",
     *         "allLessonIds"
     *       ],
     *       "course": "basic",
     *       "characterImageUrl": "characterImageUrl",
     *       "id": "id",
     *       "gemLessonIds": [
     *         "gemLessonIds",
     *         "gemLessonIds"
     *       ],
     *       "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *       "bookLessonIds": [
     *         "bookLessonIds",
     *         "bookLessonIds"
     *       ],
     *       "bookName": "bookName"
     *     }
     *   ],
     *   "id": "id",
     *   "title": "title"
     * }
     */
    CodeIllusionPackage_chapters_inner: {
      id: string;
      name: string;
      title: string;
      lessonNoteSheetsZipUrl?: string;
      lessonOverViewPdfUrl?: string;
      circles: components["schemas"]["CodeIllusionPackage_chapters_inner_circles_inner"][];
    };
    /**
     * CodeIllusionPackage
     * @example {
     *   "level": "basic",
     *   "headerButtonText": "headerButtonText",
     *   "chapters": [
     *     {
     *       "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *       "name": "name",
     *       "lessonNoteSheetsZipUrl": "lessonNoteSheetsZipUrl",
     *       "circles": [
     *         {
     *           "bookImageUrl": "bookImageUrl",
     *           "allLessonIds": [
     *             "allLessonIds",
     *             "allLessonIds"
     *           ],
     *           "course": "basic",
     *           "characterImageUrl": "characterImageUrl",
     *           "id": "id",
     *           "gemLessonIds": [
     *             "gemLessonIds",
     *             "gemLessonIds"
     *           ],
     *           "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *           "bookLessonIds": [
     *             "bookLessonIds",
     *             "bookLessonIds"
     *           ],
     *           "bookName": "bookName"
     *         },
     *         {
     *           "bookImageUrl": "bookImageUrl",
     *           "allLessonIds": [
     *             "allLessonIds",
     *             "allLessonIds"
     *           ],
     *           "course": "basic",
     *           "characterImageUrl": "characterImageUrl",
     *           "id": "id",
     *           "gemLessonIds": [
     *             "gemLessonIds",
     *             "gemLessonIds"
     *           ],
     *           "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *           "bookLessonIds": [
     *             "bookLessonIds",
     *             "bookLessonIds"
     *           ],
     *           "bookName": "bookName"
     *         }
     *       ],
     *       "id": "id",
     *       "title": "title"
     *     },
     *     {
     *       "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *       "name": "name",
     *       "lessonNoteSheetsZipUrl": "lessonNoteSheetsZipUrl",
     *       "circles": [
     *         {
     *           "bookImageUrl": "bookImageUrl",
     *           "allLessonIds": [
     *             "allLessonIds",
     *             "allLessonIds"
     *           ],
     *           "course": "basic",
     *           "characterImageUrl": "characterImageUrl",
     *           "id": "id",
     *           "gemLessonIds": [
     *             "gemLessonIds",
     *             "gemLessonIds"
     *           ],
     *           "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *           "bookLessonIds": [
     *             "bookLessonIds",
     *             "bookLessonIds"
     *           ],
     *           "bookName": "bookName"
     *         },
     *         {
     *           "bookImageUrl": "bookImageUrl",
     *           "allLessonIds": [
     *             "allLessonIds",
     *             "allLessonIds"
     *           ],
     *           "course": "basic",
     *           "characterImageUrl": "characterImageUrl",
     *           "id": "id",
     *           "gemLessonIds": [
     *             "gemLessonIds",
     *             "gemLessonIds"
     *           ],
     *           "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *           "bookLessonIds": [
     *             "bookLessonIds",
     *             "bookLessonIds"
     *           ],
     *           "bookName": "bookName"
     *         }
     *       ],
     *       "id": "id",
     *       "title": "title"
     *     }
     *   ],
     *   "name": "name",
     *   "id": "id",
     *   "redirectUrlWhenAllFinished": "redirectUrlWhenAllFinished",
     *   "headerButtonLink": "headerButtonLink"
     * }
     */
    CodeIllusionPackage: {
      id: string;
      /** @enum {string} */
      level: "basic" | "advanced";
      name: string;
      headerButtonLink: string | null;
      headerButtonText: string | null;
      redirectUrlWhenAllFinished: string | null;
      chapters: components["schemas"]["CodeIllusionPackage_chapters_inner"][];
    };
    /**
     * @example {
     *   "codeIllusionPackage": {
     *     "level": "basic",
     *     "headerButtonText": "headerButtonText",
     *     "chapters": [
     *       {
     *         "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *         "name": "name",
     *         "lessonNoteSheetsZipUrl": "lessonNoteSheetsZipUrl",
     *         "circles": [
     *           {
     *             "bookImageUrl": "bookImageUrl",
     *             "allLessonIds": [
     *               "allLessonIds",
     *               "allLessonIds"
     *             ],
     *             "course": "basic",
     *             "characterImageUrl": "characterImageUrl",
     *             "id": "id",
     *             "gemLessonIds": [
     *               "gemLessonIds",
     *               "gemLessonIds"
     *             ],
     *             "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *             "bookLessonIds": [
     *               "bookLessonIds",
     *               "bookLessonIds"
     *             ],
     *             "bookName": "bookName"
     *           },
     *           {
     *             "bookImageUrl": "bookImageUrl",
     *             "allLessonIds": [
     *               "allLessonIds",
     *               "allLessonIds"
     *             ],
     *             "course": "basic",
     *             "characterImageUrl": "characterImageUrl",
     *             "id": "id",
     *             "gemLessonIds": [
     *               "gemLessonIds",
     *               "gemLessonIds"
     *             ],
     *             "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *             "bookLessonIds": [
     *               "bookLessonIds",
     *               "bookLessonIds"
     *             ],
     *             "bookName": "bookName"
     *           }
     *         ],
     *         "id": "id",
     *         "title": "title"
     *       },
     *       {
     *         "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *         "name": "name",
     *         "lessonNoteSheetsZipUrl": "lessonNoteSheetsZipUrl",
     *         "circles": [
     *           {
     *             "bookImageUrl": "bookImageUrl",
     *             "allLessonIds": [
     *               "allLessonIds",
     *               "allLessonIds"
     *             ],
     *             "course": "basic",
     *             "characterImageUrl": "characterImageUrl",
     *             "id": "id",
     *             "gemLessonIds": [
     *               "gemLessonIds",
     *               "gemLessonIds"
     *             ],
     *             "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *             "bookLessonIds": [
     *               "bookLessonIds",
     *               "bookLessonIds"
     *             ],
     *             "bookName": "bookName"
     *           },
     *           {
     *             "bookImageUrl": "bookImageUrl",
     *             "allLessonIds": [
     *               "allLessonIds",
     *               "allLessonIds"
     *             ],
     *             "course": "basic",
     *             "characterImageUrl": "characterImageUrl",
     *             "id": "id",
     *             "gemLessonIds": [
     *               "gemLessonIds",
     *               "gemLessonIds"
     *             ],
     *             "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *             "bookLessonIds": [
     *               "bookLessonIds",
     *               "bookLessonIds"
     *             ],
     *             "bookName": "bookName"
     *           }
     *         ],
     *         "id": "id",
     *         "title": "title"
     *       }
     *     ],
     *     "name": "name",
     *     "id": "id",
     *     "redirectUrlWhenAllFinished": "redirectUrlWhenAllFinished",
     *     "headerButtonLink": "headerButtonLink"
     *   }
     * }
     */
    getUsersUserIdCodeIllusionPackages_200_response: {
      codeIllusionPackage: components["schemas"]["CodeIllusionPackage"];
    };
    /**
     * Lesson
     * @description The Definition of Lesson
     * @example {
     *   "maxStarCount": 0.8008281904610115,
     *   "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *   "lessonEnvironment": "litLessonPlayer",
     *   "hintCount": 1.4658129805029452,
     *   "level": "basic",
     *   "lessonDuration": "lessonDuration",
     *   "lessonObjectives": "lessonObjectives",
     *   "description": "description",
     *   "url": "url",
     *   "skillsLearnedInThisLesson": "skillsLearnedInThisLesson",
     *   "thumbnailImageUrl": "thumbnailImageUrl",
     *   "name": "name",
     *   "course": "basic",
     *   "theme": "theme",
     *   "quizCount": 6.027456183070403,
     *   "id": "id",
     *   "projectName": "projectName",
     *   "scenarioName": "scenarioName"
     * }
     */
    Lesson: {
      id: string;
      url: string;
      name: string;
      /**
       * LessonEnvironment
       * @description We currently only have "LiT Lesson Player" as an Environment, but we will add external project etc. like "Magic Quest" in the future.
       *
       * @enum {string}
       */
      lessonEnvironment?: "litLessonPlayer";
      /**
       * Course
       * @enum {string}
       */
      course: "basic" | "webDesign" | "mediaArt" | "gameDevelopment" | "";
      theme: string;
      skillsLearnedInThisLesson: string;
      description: string;
      lessonObjectives: string;
      thumbnailImageUrl: string;
      lessonOverViewPdfUrl?: string;
      projectName?: string;
      scenarioName?: string;
      lessonDuration: string;
      maxStarCount: number;
      quizCount?: number;
      hintCount?: number;
      /** @enum {string} */
      level: "basic" | "advanced" | "heroic" | "adventurous";
    };
    /**
     * @example {
     *   "lessons": [
     *     {
     *       "maxStarCount": 0.8008281904610115,
     *       "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *       "lessonEnvironment": "litLessonPlayer",
     *       "hintCount": 1.4658129805029452,
     *       "level": "basic",
     *       "lessonDuration": "lessonDuration",
     *       "lessonObjectives": "lessonObjectives",
     *       "description": "description",
     *       "url": "url",
     *       "skillsLearnedInThisLesson": "skillsLearnedInThisLesson",
     *       "thumbnailImageUrl": "thumbnailImageUrl",
     *       "name": "name",
     *       "course": "basic",
     *       "theme": "theme",
     *       "quizCount": 6.027456183070403,
     *       "id": "id",
     *       "projectName": "projectName",
     *       "scenarioName": "scenarioName"
     *     },
     *     {
     *       "maxStarCount": 0.8008281904610115,
     *       "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *       "lessonEnvironment": "litLessonPlayer",
     *       "hintCount": 1.4658129805029452,
     *       "level": "basic",
     *       "lessonDuration": "lessonDuration",
     *       "lessonObjectives": "lessonObjectives",
     *       "description": "description",
     *       "url": "url",
     *       "skillsLearnedInThisLesson": "skillsLearnedInThisLesson",
     *       "thumbnailImageUrl": "thumbnailImageUrl",
     *       "name": "name",
     *       "course": "basic",
     *       "theme": "theme",
     *       "quizCount": 6.027456183070403,
     *       "id": "id",
     *       "projectName": "projectName",
     *       "scenarioName": "scenarioName"
     *     }
     *   ]
     * }
     */
    getLessons_200_response: {
      lessons: components["schemas"]["Lesson"][];
    };
    /**
     * UserLessonStatus
     * @example {
     *   "correctAnsweredQuizCount": 6.027456183070403,
     *   "usedHintCount": 1.4658129805029452,
     *   "lessonId": "lessonId",
     *   "stepIdskippingDetected": true,
     *   "startedAt": "2000-01-23T04:56:07.000Z",
     *   "achievedStarCount": 0.8008281904610115,
     *   "quizCount": 5.962133916683182,
     *   "userId": "userId",
     *   "status": "not_cleared",
     *   "finishedAt": "2000-01-23T04:56:07.000Z"
     * }
     */
    UserLessonStatus: {
      userId: string;
      lessonId: string;
      /**
       * @description "not_cleared" shows "It's available but not cleared"
       * "cleared" shows "It's available and already cleared at least once"
       * "locked" shows "It's unavailable for some reason. e.g.) the teacher has locked this lesson"
       * @enum {string}
       */
      status: "not_cleared" | "cleared" | "locked";
      achievedStarCount: number;
      correctAnsweredQuizCount?: number | null;
      usedHintCount?: number | null;
      stepIdskippingDetected: boolean;
      /** Format: date-time */
      startedAt?: string;
      /** Format: date-time */
      finishedAt?: string;
      quizCount?: number;
    };
    /**
     * @example {
     *   "userLessonStatuses": [
     *     {
     *       "correctAnsweredQuizCount": 6.027456183070403,
     *       "usedHintCount": 1.4658129805029452,
     *       "lessonId": "lessonId",
     *       "stepIdskippingDetected": true,
     *       "startedAt": "2000-01-23T04:56:07.000Z",
     *       "achievedStarCount": 0.8008281904610115,
     *       "quizCount": 5.962133916683182,
     *       "userId": "userId",
     *       "status": "not_cleared",
     *       "finishedAt": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "correctAnsweredQuizCount": 6.027456183070403,
     *       "usedHintCount": 1.4658129805029452,
     *       "lessonId": "lessonId",
     *       "stepIdskippingDetected": true,
     *       "startedAt": "2000-01-23T04:56:07.000Z",
     *       "achievedStarCount": 0.8008281904610115,
     *       "quizCount": 5.962133916683182,
     *       "userId": "userId",
     *       "status": "not_cleared",
     *       "finishedAt": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    getUsersUserIdLessonStatuses_200_response: {
      userLessonStatuses?: components["schemas"]["UserLessonStatus"][];
    };
    /**
     * UserSoundSettings
     * @example {
     *   "seVolume": 0.8008281904610115,
     *   "bgmVolume": 6.027456183070403,
     *   "narrationLanguage": "en",
     *   "serifNarrationVolume": 5.962133916683182,
     *   "hintNarrationVolume": 1.4658129805029452
     * }
     */
    UserSoundSettings: {
      seVolume: number;
      bgmVolume: number;
      hintNarrationVolume: number;
      serifNarrationVolume: number;
      /** @enum {string} */
      narrationLanguage: "en" | "es";
    };
    /**
     * UserSettings
     * @example {
     *   "sound": {
     *     "seVolume": 0.8008281904610115,
     *     "bgmVolume": 6.027456183070403,
     *     "narrationLanguage": "en",
     *     "serifNarrationVolume": 5.962133916683182,
     *     "hintNarrationVolume": 1.4658129805029452
     *   }
     * }
     */
    UserSettings: {
      sound: components["schemas"]["UserSoundSettings"];
    };
    /**
     * @example {
     *   "settings": {
     *     "sound": {
     *       "seVolume": 0.8008281904610115,
     *       "bgmVolume": 6.027456183070403,
     *       "narrationLanguage": "en",
     *       "serifNarrationVolume": 5.962133916683182,
     *       "hintNarrationVolume": 1.4658129805029452
     *     }
     *   }
     * }
     */
    getUserSettings_200_response: {
      settings?: components["schemas"]["UserSettings"];
    };
    /**
     * @example {
     *   "soundSettings": {
     *     "seVolume": 0.8008281904610115,
     *     "bgmVolume": 6.027456183070403,
     *     "narrationLanguage": "en",
     *     "serifNarrationVolume": 5.962133916683182,
     *     "hintNarrationVolume": 1.4658129805029452
     *   }
     * }
     */
    updateUserSoundSettings_200_response: {
      soundSettings?: components["schemas"]["UserSoundSettings"];
    };
    /**
     * UserPackageAssignment
     * @example {
     *   "packageId": "packageId",
     *   "packageCategoryId": "packageCategoryId",
     *   "userId": "userId"
     * }
     */
    UserPackageAssignment: {
      userId: string;
      packageCategoryId: string;
      packageId: string;
    };
    /**
     * @example {
     *   "userPackageAssignments": [
     *     {
     *       "packageId": "packageId",
     *       "packageCategoryId": "packageCategoryId",
     *       "userId": "userId"
     *     },
     *     {
     *       "packageId": "packageId",
     *       "packageCategoryId": "packageCategoryId",
     *       "userId": "userId"
     *     }
     *   ]
     * }
     */
    getUserPackageAssignments_200_response: {
      userPackageAssignments: components["schemas"]["UserPackageAssignment"][];
    };
    /**
     * @example {
     *   "userPackageAssignment": {
     *     "packageId": "packageId",
     *     "packageCategoryId": "packageCategoryId",
     *     "userId": "userId"
     *   }
     * }
     */
    postUserPackageAssignment_200_response: {
      userPackageAssignment: components["schemas"]["UserPackageAssignment"];
    };
    deleteUserPackageAssignment_request: {
      packageCategoryId: string;
      userId: string;
    };
    /**
     * @example {
     *   "message": "message"
     * }
     */
    deleteUserPackageAssignment_200_response: {
      message: string;
    };
    /**
     * District
     * @description The Definition of Get Districts.
     * @example {
     *   "lastRosterSyncEventId": "lastRosterSyncEventId",
     *   "lastRosterSyncEventDate": "lastRosterSyncEventDate",
     *   "stateId": "stateId",
     *   "name": "name",
     *   "lmsId": "lmsId",
     *   "id": "id",
     *   "districtLMSId": "districtLMSId",
     *   "administrators": "administrators",
     *   "enableRosterSync": true
     * }
     */
    District: {
      id: string;
      name: string;
      districtLMSId: string;
      lastRosterSyncEventId: string;
      lastRosterSyncEventDate: string;
      enableRosterSync: boolean;
      lmsId?: string;
      stateId?: string;
      administrators?: string;
    };
    /**
     * @example {
     *   "districts": [
     *     {
     *       "lastRosterSyncEventId": "lastRosterSyncEventId",
     *       "lastRosterSyncEventDate": "lastRosterSyncEventDate",
     *       "stateId": "stateId",
     *       "name": "name",
     *       "lmsId": "lmsId",
     *       "id": "id",
     *       "districtLMSId": "districtLMSId",
     *       "administrators": "administrators",
     *       "enableRosterSync": true
     *     },
     *     {
     *       "lastRosterSyncEventId": "lastRosterSyncEventId",
     *       "lastRosterSyncEventDate": "lastRosterSyncEventDate",
     *       "stateId": "stateId",
     *       "name": "name",
     *       "lmsId": "lmsId",
     *       "id": "id",
     *       "districtLMSId": "districtLMSId",
     *       "administrators": "administrators",
     *       "enableRosterSync": true
     *     }
     *   ]
     * }
     */
    getDistricts_200_response: {
      districts?: components["schemas"]["District"][];
    };
    postDistrict_request: {
      /** @description This is a district name. */
      name: string;
      stateId?: string;
      /** @description This is a lmsId like(None, Clever, Claslink, Google classroom). */
      lmsId: string;
      /** @description This is a districtLmsId. */
      districtLmsId?: string;
      /** @description This is a enableRosterSync. */
      enableRosterSync?: boolean;
      /** @description This is apiToken. */
      apiToken?: string;
    };
    putDistrict_request: {
      /** @description This is a district name. */
      name: string;
      /** @description This is a lmsId like(None, Clever, Claslink, Google classroom). */
      lmsId: string;
      /** @description This is a districtLmsId. */
      districtLmsId?: string;
      /** @description This is a enableRosterSync. */
      enableRosterSync?: boolean;
      /** @description This is apiToken. */
      apiToken?: string;
    };
    /**
     * Administrator
     * @description Administrator
     * @example {
     *   "firstName": "firstName",
     *   "lastName": "lastName",
     *   "administratorId": "administratorId",
     *   "districtId": "districtId",
     *   "createdUserId": "createdUserId",
     *   "createdDate": "createdDate",
     *   "userId": "userId",
     *   "email": "email",
     *   "administratorLMSId": "administratorLMSId"
     * }
     */
    Administrator: {
      administratorId?: string;
      userId?: string;
      districtId?: string;
      email?: string;
      firstName?: string;
      lastName?: string;
      administratorLMSId?: string;
      createdUserId?: string;
      createdDate?: string;
    };
    /**
     * @example {
     *   "administrators": [
     *     {
     *       "firstName": "firstName",
     *       "lastName": "lastName",
     *       "administratorId": "administratorId",
     *       "districtId": "districtId",
     *       "createdUserId": "createdUserId",
     *       "createdDate": "createdDate",
     *       "userId": "userId",
     *       "email": "email",
     *       "administratorLMSId": "administratorLMSId"
     *     },
     *     {
     *       "firstName": "firstName",
     *       "lastName": "lastName",
     *       "administratorId": "administratorId",
     *       "districtId": "districtId",
     *       "createdUserId": "createdUserId",
     *       "createdDate": "createdDate",
     *       "userId": "userId",
     *       "email": "email",
     *       "administratorLMSId": "administratorLMSId"
     *     }
     *   ]
     * }
     */
    getAdministrators_200_response: {
      administrators?: components["schemas"]["Administrator"][];
    };
    /** administrator */
    administrator: {
      email?: string;
      firstName?: string;
      lastName?: string;
      administratorLMSId?: string;
      password?: string;
    };
    postAdministrators_request: {
      administrators: components["schemas"]["administrator"][];
    };
    postAdministrators_400_response_error_oneOf_inner: {
      index?: number;
      message?: (
        | "duplicateRecordsWithSameEmail"
        | "userAlreadyExistWithEmail"
        | "emailInvalid"
        | "emailNotProvided"
      )[];
    };
    postAdministrators_400_response_error:
      | string
      | components["schemas"]["postAdministrators_400_response_error_oneOf_inner"][];
    postAdministrators_400_response: {
      error: components["schemas"]["postAdministrators_400_response_error"];
    };
    putAdministrator_request: {
      /** @description This is a user's email. */
      email: string;
      /** @description This is a first name of administrator. */
      firstName?: string;
      /** @description This is a last name of administrator. */
      lastName?: string;
      /** @description This is a administratorLMSId of administrator. */
      administratorLMSId?: string;
      password?: string;
    };
    /**
     * Organization
     * @description The Definition of Get Organizations.
     * @example {
     *   "districtId": "districtId",
     *   "createdUserId": "createdUserId",
     *   "createdDate": "2000-01-23T04:56:07.000Z",
     *   "stateId": "stateId",
     *   "name": "name",
     *   "id": "id",
     *   "organizationLMSId": "organizationLMSId",
     *   "updatedDate": "2000-01-23T04:56:07.000Z"
     * }
     */
    Organization: {
      id: string;
      name: string;
      districtId: string;
      stateId: string;
      organizationLMSId: string;
      createdUserId: string;
      /** Format: date-time */
      createdDate: string;
      /** Format: date-time */
      updatedDate: string;
    };
    /**
     * @example {
     *   "organizations": [
     *     {
     *       "districtId": "districtId",
     *       "createdUserId": "createdUserId",
     *       "createdDate": "2000-01-23T04:56:07.000Z",
     *       "stateId": "stateId",
     *       "name": "name",
     *       "id": "id",
     *       "organizationLMSId": "organizationLMSId",
     *       "updatedDate": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "districtId": "districtId",
     *       "createdUserId": "createdUserId",
     *       "createdDate": "2000-01-23T04:56:07.000Z",
     *       "stateId": "stateId",
     *       "name": "name",
     *       "id": "id",
     *       "organizationLMSId": "organizationLMSId",
     *       "updatedDate": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    getOrganizations_200_response: {
      organizations?: components["schemas"]["Organization"][];
    };
    postOrganization_request: {
      name: string;
      districtId: string;
      stateId: string;
      organizationLMSId?: string;
      createdUserId?: string;
    };
    /**
     * StudentGroups
     * @description The Definition of Get Student Groups.
     * @example {
     *   "organizationId": "organizationId",
     *   "createdUserId": "createdUserId",
     *   "createdDate": "2000-01-23T04:56:07.000Z",
     *   "studentGroupLmsId": "studentGroupLmsId",
     *   "grade": "grade",
     *   "name": "name",
     *   "id": "id",
     *   "updatedDate": "2000-01-23T04:56:07.000Z",
     *   "updatedUserId": "updatedUserId"
     * }
     */
    StudentGroups: {
      id: string;
      organizationId: string;
      name: string;
      grade: string;
      studentGroupLmsId: string;
      createdUserId: string;
      updatedUserId: string;
      /** Format: date-time */
      createdDate: string;
      /** Format: date-time */
      updatedDate: string;
    };
    /**
     * @example {
     *   "studentgroups": [
     *     {
     *       "organizationId": "organizationId",
     *       "createdUserId": "createdUserId",
     *       "createdDate": "2000-01-23T04:56:07.000Z",
     *       "studentGroupLmsId": "studentGroupLmsId",
     *       "grade": "grade",
     *       "name": "name",
     *       "id": "id",
     *       "updatedDate": "2000-01-23T04:56:07.000Z",
     *       "updatedUserId": "updatedUserId"
     *     },
     *     {
     *       "organizationId": "organizationId",
     *       "createdUserId": "createdUserId",
     *       "createdDate": "2000-01-23T04:56:07.000Z",
     *       "studentGroupLmsId": "studentGroupLmsId",
     *       "grade": "grade",
     *       "name": "name",
     *       "id": "id",
     *       "updatedDate": "2000-01-23T04:56:07.000Z",
     *       "updatedUserId": "updatedUserId"
     *     }
     *   ]
     * }
     */
    getStudentGroups_200_response: {
      studentgroups?: components["schemas"]["StudentGroups"][];
    };
    postStudentGroup_request: {
      /** @description This is a student group name. */
      name: string;
      /** @description This is a packageId. */
      packageId: string;
      /** @description This is a grade like (grade1,grade2 and etc). */
      grade?: string;
      studentGroupLmsId?: string;
    };
    /**
     * @example {
     *   "districtId": "districtId",
     *   "districtName": "districtName",
     *   "lmsId": "lmsId"
     * }
     */
    getDistrictLMSInformationByOrganization_200_response: {
      districtId: string;
      /** @description This is a district name. */
      districtName: string;
      /** @description This is a lmsId like(None, Clever, Claslink, Google). */
      lmsId: string;
    };
    putStudentGroup_request: {
      /** @description This is a student group name. */
      name: string;
      /** @description This is a packageId. */
      packageId: string;
      /** @description This is a grade like (grade1,grade2 and etc). */
      grade?: string;
      studentGroupLmsId?: string;
    };
    /**
     * @example {
     *   "package": {
     *     "level": "basic",
     *     "headerButtonText": "headerButtonText",
     *     "chapters": [
     *       {
     *         "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *         "name": "name",
     *         "lessonNoteSheetsZipUrl": "lessonNoteSheetsZipUrl",
     *         "circles": [
     *           {
     *             "bookImageUrl": "bookImageUrl",
     *             "allLessonIds": [
     *               "allLessonIds",
     *               "allLessonIds"
     *             ],
     *             "course": "basic",
     *             "characterImageUrl": "characterImageUrl",
     *             "id": "id",
     *             "gemLessonIds": [
     *               "gemLessonIds",
     *               "gemLessonIds"
     *             ],
     *             "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *             "bookLessonIds": [
     *               "bookLessonIds",
     *               "bookLessonIds"
     *             ],
     *             "bookName": "bookName"
     *           },
     *           {
     *             "bookImageUrl": "bookImageUrl",
     *             "allLessonIds": [
     *               "allLessonIds",
     *               "allLessonIds"
     *             ],
     *             "course": "basic",
     *             "characterImageUrl": "characterImageUrl",
     *             "id": "id",
     *             "gemLessonIds": [
     *               "gemLessonIds",
     *               "gemLessonIds"
     *             ],
     *             "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *             "bookLessonIds": [
     *               "bookLessonIds",
     *               "bookLessonIds"
     *             ],
     *             "bookName": "bookName"
     *           }
     *         ],
     *         "id": "id",
     *         "title": "title"
     *       },
     *       {
     *         "lessonOverViewPdfUrl": "lessonOverViewPdfUrl",
     *         "name": "name",
     *         "lessonNoteSheetsZipUrl": "lessonNoteSheetsZipUrl",
     *         "circles": [
     *           {
     *             "bookImageUrl": "bookImageUrl",
     *             "allLessonIds": [
     *               "allLessonIds",
     *               "allLessonIds"
     *             ],
     *             "course": "basic",
     *             "characterImageUrl": "characterImageUrl",
     *             "id": "id",
     *             "gemLessonIds": [
     *               "gemLessonIds",
     *               "gemLessonIds"
     *             ],
     *             "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *             "bookLessonIds": [
     *               "bookLessonIds",
     *               "bookLessonIds"
     *             ],
     *             "bookName": "bookName"
     *           },
     *           {
     *             "bookImageUrl": "bookImageUrl",
     *             "allLessonIds": [
     *               "allLessonIds",
     *               "allLessonIds"
     *             ],
     *             "course": "basic",
     *             "characterImageUrl": "characterImageUrl",
     *             "id": "id",
     *             "gemLessonIds": [
     *               "gemLessonIds",
     *               "gemLessonIds"
     *             ],
     *             "clearedCharacterImageUrl": "clearedCharacterImageUrl",
     *             "bookLessonIds": [
     *               "bookLessonIds",
     *               "bookLessonIds"
     *             ],
     *             "bookName": "bookName"
     *           }
     *         ],
     *         "id": "id",
     *         "title": "title"
     *       }
     *     ],
     *     "name": "name",
     *     "id": "id",
     *     "redirectUrlWhenAllFinished": "redirectUrlWhenAllFinished",
     *     "headerButtonLink": "headerButtonLink"
     *   }
     * }
     */
    getPackageDetailsByStudentGroupId_200_response: {
      package?: components["schemas"]["CodeIllusionPackage"];
    };
    /**
     * Student
     * @description The Definition of Get Students.
     * @example {
     *   "lastLessionName": "lastLessionName",
     *   "loginId": "loginId",
     *   "studentGroupCount": 0.8008281904610115,
     *   "lastLessonStartedAt": "2000-01-23T04:56:07.000Z",
     *   "nickName": "nickName",
     *   "studentGroup": "studentGroup",
     *   "userId": "userId",
     *   "studentLMSId": "studentLMSId",
     *   "password": "password",
     *   "createdDate": "2000-01-23T04:56:07.000Z",
     *   "createdUserName": "createdUserName",
     *   "emailsToNotify": [
     *     "emailsToNotify",
     *     "emailsToNotify"
     *   ],
     *   "id": "id",
     *   "email": "email"
     * }
     */
    Student: {
      id: string;
      nickName: string;
      userId: string;
      password: string;
      email: string;
      studentLMSId: string;
      emailsToNotify: string[];
      loginId: string;
      createdUserName: string;
      /** Format: date-time */
      createdDate: string;
      lastLessionName: string;
      /** Format: date-time */
      lastLessonStartedAt: string | null;
      studentGroupCount: number;
      studentGroup: string;
    };
    /**
     * @example {
     *   "students": [
     *     {
     *       "lastLessionName": "lastLessionName",
     *       "loginId": "loginId",
     *       "studentGroupCount": 0.8008281904610115,
     *       "lastLessonStartedAt": "2000-01-23T04:56:07.000Z",
     *       "nickName": "nickName",
     *       "studentGroup": "studentGroup",
     *       "userId": "userId",
     *       "studentLMSId": "studentLMSId",
     *       "password": "password",
     *       "createdDate": "2000-01-23T04:56:07.000Z",
     *       "createdUserName": "createdUserName",
     *       "emailsToNotify": [
     *         "emailsToNotify",
     *         "emailsToNotify"
     *       ],
     *       "id": "id",
     *       "email": "email"
     *     },
     *     {
     *       "lastLessionName": "lastLessionName",
     *       "loginId": "loginId",
     *       "studentGroupCount": 0.8008281904610115,
     *       "lastLessonStartedAt": "2000-01-23T04:56:07.000Z",
     *       "nickName": "nickName",
     *       "studentGroup": "studentGroup",
     *       "userId": "userId",
     *       "studentLMSId": "studentLMSId",
     *       "password": "password",
     *       "createdDate": "2000-01-23T04:56:07.000Z",
     *       "createdUserName": "createdUserName",
     *       "emailsToNotify": [
     *         "emailsToNotify",
     *         "emailsToNotify"
     *       ],
     *       "id": "id",
     *       "email": "email"
     *     }
     *   ]
     * }
     */
    getStudents_200_response: {
      students?: components["schemas"]["Student"][];
    };
    /** student */
    student: {
      nickName?: string;
      email?: string;
      loginId?: string;
      password?: string;
      studentLMSId?: string;
      emailsToNotify?: string[];
    };
    postStudents_request: {
      students: components["schemas"]["student"][];
    };
    postStudents_400_response_error_oneOf_inner: {
      index?: number;
      message?: (
        | "invalidEmail"
        | "loginIdAlreadyExists"
        | "duplicateEmail"
        | "nickNameNotProvided"
        | "emptyPassword"
        | "studentLMSIdAlreadyExists"
        | "duplicateRecordsWithSameLoginId"
        | "duplicateRecordsWithStudentLMSId"
        | "loginIdSholdNotContainedWhiteSpace"
        | "userAlreadyExistWithEmail"
        | "duplicateRecordsWithSameEmail"
        | "atLeastOneFieldIsMandatory"
        | "studentLmsIdNotProvided"
      )[];
    };
    postStudents_400_response_error:
      | string
      | components["schemas"]["postStudents_400_response_error_oneOf_inner"][];
    postStudents_400_response: {
      error: components["schemas"]["postStudents_400_response_error"];
    };
    putStudent_request: {
      nickName?: string;
      loginId?: string;
      password?: string;
      studentLMSId?: string;
      email?: string;
      emailsToNotify?: string[];
    };
    /**
     * Teacher
     * @description Teacher
     * @example {
     *   "firstName": "firstName",
     *   "lastName": "lastName",
     *   "createdUserId": "createdUserId",
     *   "createdDate": "createdDate",
     *   "teacherLMSId": "teacherLMSId",
     *   "createdUserName": "createdUserName",
     *   "id": "id",
     *   "userId": "userId",
     *   "email": "email"
     * }
     */
    Teacher: {
      id: string;
      email: string;
      userId: string;
      firstName: string;
      lastName: string;
      teacherLMSId: string;
      createdUserId: string;
      createdUserName?: string;
      createdDate: string;
    };
    /**
     * @example {
     *   "teachers": [
     *     {
     *       "firstName": "firstName",
     *       "lastName": "lastName",
     *       "createdUserId": "createdUserId",
     *       "createdDate": "createdDate",
     *       "teacherLMSId": "teacherLMSId",
     *       "createdUserName": "createdUserName",
     *       "id": "id",
     *       "userId": "userId",
     *       "email": "email"
     *     },
     *     {
     *       "firstName": "firstName",
     *       "lastName": "lastName",
     *       "createdUserId": "createdUserId",
     *       "createdDate": "createdDate",
     *       "teacherLMSId": "teacherLMSId",
     *       "createdUserName": "createdUserName",
     *       "id": "id",
     *       "userId": "userId",
     *       "email": "email"
     *     }
     *   ]
     * }
     */
    getTeachers_200_response: {
      teachers?: components["schemas"]["Teacher"][];
    };
    /** teacher */
    teacher: {
      email?: string;
      firstName?: string;
      lastName?: string;
      teacherLMSId?: string;
      password?: string;
    };
    postTeachers_request: {
      teachers: components["schemas"]["teacher"][];
    };
    postTeachers_400_response_error_oneOf_inner: {
      index?: number;
      message?: (
        | "duplicateRecordsWithSameEmail"
        | "duplicateRecordsWithSameTeacherLMSId"
        | "userAlreadyExistWithEmail"
        | "userAlreadyExistWithTeacherLMSId"
        | "emailInvalid"
        | "emailNotProvided"
        | "emptyPassword"
      )[];
    };
    postTeachers_400_response_error:
      | string
      | components["schemas"]["postTeachers_400_response_error_oneOf_inner"][];
    postTeachers_400_response: {
      error: components["schemas"]["postTeachers_400_response_error"];
    };
    /**
     * @example {
     *   "stateId": "stateId",
     *   "name": "name",
     *   "id": "id"
     * }
     */
    Teacher_Organization_teacher_teacherOrganizations_inner: {
      /** @description id of the organization. */
      id: string;
      /** @description name of the organization. */
      name: string;
      /** @description stateId of organization */
      stateId?: string;
    };
    /**
     * @example {
     *   "organizationId": "organizationId",
     *   "firstName": "firstName",
     *   "lastName": "lastName",
     *   "teacherId": "teacherId",
     *   "districtId": "districtId",
     *   "createdUserId": "createdUserId",
     *   "createdDate": "createdDate",
     *   "teacherLMSId": "teacherLMSId",
     *   "isPrimary": true,
     *   "userId": "userId",
     *   "teacherOrganizations": [
     *     {
     *       "stateId": "stateId",
     *       "name": "name",
     *       "id": "id"
     *     },
     *     {
     *       "stateId": "stateId",
     *       "name": "name",
     *       "id": "id"
     *     }
     *   ],
     *   "email": "email"
     * }
     */
    Teacher_Organization_teacher: {
      teacherId: string;
      userId: string;
      firstName: string;
      organizationId?: string;
      districtId?: string;
      email: string;
      lastName: string;
      isPrimary?: boolean;
      teacherLMSId: string;
      createdUserId: string;
      createdDate: string;
      teacherOrganizations: components["schemas"]["Teacher_Organization_teacher_teacherOrganizations_inner"][];
    };
    /**
     * Teacher-Organization
     * @description Teacher
     * @example {
     *   "teacher": {
     *     "organizationId": "organizationId",
     *     "firstName": "firstName",
     *     "lastName": "lastName",
     *     "teacherId": "teacherId",
     *     "districtId": "districtId",
     *     "createdUserId": "createdUserId",
     *     "createdDate": "createdDate",
     *     "teacherLMSId": "teacherLMSId",
     *     "isPrimary": true,
     *     "userId": "userId",
     *     "teacherOrganizations": [
     *       {
     *         "stateId": "stateId",
     *         "name": "name",
     *         "id": "id"
     *       },
     *       {
     *         "stateId": "stateId",
     *         "name": "name",
     *         "id": "id"
     *       }
     *     ],
     *     "email": "email"
     *   }
     * }
     */
    Teacher_Organization: {
      teacher: components["schemas"]["Teacher_Organization_teacher"];
    };
    putTeacher_request_teacher: {
      /** @description This is a first name of teacher. */
      firstName?: string;
      /** @description This is a last name of teacher. */
      lastName?: string;
      /** @description This is a teacherLMSId of teacher. */
      teacherLMSId?: string;
      email?: string;
      password?: string;
    };
    putTeacher_request: {
      teacher?: components["schemas"]["putTeacher_request_teacher"];
    };
    postStudentGroupUnaccessibleLesson_request: {
      packageId: string;
    };
    /**
     * UnaccessibleLesson
     * @description The Definition of Get unaccessible Lesson.
     * @example {
     *   "createdUserId": "createdUserId",
     *   "createdDate": "createdDate",
     *   "packageId": "packageId",
     *   "studentGroupId": "studentGroupId",
     *   "lessonId": "lessonId"
     * }
     */
    UnaccessibleLesson: {
      studentGroupId: string;
      packageId: string;
      lessonId: string;
      createdUserId: string;
      createdDate: string;
    };
    /**
     * @example {
     *   "unaccessibleLessons": [
     *     {
     *       "createdUserId": "createdUserId",
     *       "createdDate": "createdDate",
     *       "packageId": "packageId",
     *       "studentGroupId": "studentGroupId",
     *       "lessonId": "lessonId"
     *     },
     *     {
     *       "createdUserId": "createdUserId",
     *       "createdDate": "createdDate",
     *       "packageId": "packageId",
     *       "studentGroupId": "studentGroupId",
     *       "lessonId": "lessonId"
     *     }
     *   ]
     * }
     */
    getUnaccessibleLessons_200_response: {
      unaccessibleLessons: components["schemas"]["UnaccessibleLesson"][];
    };
    /**
     * @example {
     *   "studentGroupLessonStatuses": [
     *     {
     *       "correctAnsweredQuizCount": 6.027456183070403,
     *       "usedHintCount": 1.4658129805029452,
     *       "lessonId": "lessonId",
     *       "stepIdskippingDetected": true,
     *       "startedAt": "2000-01-23T04:56:07.000Z",
     *       "achievedStarCount": 0.8008281904610115,
     *       "quizCount": 5.962133916683182,
     *       "userId": "userId",
     *       "status": "not_cleared",
     *       "finishedAt": "2000-01-23T04:56:07.000Z"
     *     },
     *     {
     *       "correctAnsweredQuizCount": 6.027456183070403,
     *       "usedHintCount": 1.4658129805029452,
     *       "lessonId": "lessonId",
     *       "stepIdskippingDetected": true,
     *       "startedAt": "2000-01-23T04:56:07.000Z",
     *       "achievedStarCount": 0.8008281904610115,
     *       "quizCount": 5.962133916683182,
     *       "userId": "userId",
     *       "status": "not_cleared",
     *       "finishedAt": "2000-01-23T04:56:07.000Z"
     *     }
     *   ]
     * }
     */
    getStudentGroupLessonStatuses_200_response: {
      studentGroupLessonStatuses?: components["schemas"]["UserLessonStatus"][];
    };
    getStudentGroupLessonStatuses_500_response: {
      error: string;
    };
    /**
     * @example {
     *   "role": "role",
     *   "loginId": "loginId",
     *   "id": "id",
     *   "email": "email"
     * }
     */
    LoggedInUser_user: {
      id?: string;
      email?: string | null;
      role?: string;
      loginId?: string | null;
    };
    /**
     * @example {
     *   "firstName": "firstName",
     *   "lastName": "lastName",
     *   "districtId": "districtId",
     *   "id": "id",
     *   "userId": "userId",
     *   "administratorLMSId": "administratorLMSId"
     * }
     */
    LoggedInUser_administrator: {
      id?: string;
      userId?: string;
      firstName?: string;
      lastName?: string;
      administratorLMSId?: string;
      districtId?: string;
    };
    /**
     * @example {
     *   "firstName": "firstName",
     *   "lastName": "lastName",
     *   "districtId": "districtId",
     *   "teacherLMSId": "teacherLMSId",
     *   "organizationIds": [
     *     "organizationIds",
     *     "organizationIds"
     *   ],
     *   "id": "id",
     *   "userId": "userId"
     * }
     */
    LoggedInUser_teacher: {
      id?: string;
      userId?: string;
      firstName?: string;
      lastName?: string;
      teacherLMSId?: string;
      districtId?: string;
      organizationIds?: string[];
    };
    /**
     * @example {
     *   "studentLMSId": "studentLMSId",
     *   "districtId": "districtId",
     *   "organizationIds": [
     *     "organizationIds",
     *     "organizationIds"
     *   ],
     *   "nickName": "nickName",
     *   "id": "id",
     *   "userId": "userId",
     *   "studentGroupIds": [
     *     "studentGroupIds",
     *     "studentGroupIds"
     *   ]
     * }
     */
    LoggedInUser_student: {
      id?: string;
      userId?: string;
      nickName?: string;
      studentLMSId?: string;
      districtId?: string;
      organizationIds?: string[];
      studentGroupIds?: string[];
    };
    /**
     * LoggedInUser
     * @example {
     *   "administrator": {
     *     "firstName": "firstName",
     *     "lastName": "lastName",
     *     "districtId": "districtId",
     *     "id": "id",
     *     "userId": "userId",
     *     "administratorLMSId": "administratorLMSId"
     *   },
     *   "teacher": {
     *     "firstName": "firstName",
     *     "lastName": "lastName",
     *     "districtId": "districtId",
     *     "teacherLMSId": "teacherLMSId",
     *     "organizationIds": [
     *       "organizationIds",
     *       "organizationIds"
     *     ],
     *     "id": "id",
     *     "userId": "userId"
     *   },
     *   "student": {
     *     "studentLMSId": "studentLMSId",
     *     "districtId": "districtId",
     *     "organizationIds": [
     *       "organizationIds",
     *       "organizationIds"
     *     ],
     *     "nickName": "nickName",
     *     "id": "id",
     *     "userId": "userId",
     *     "studentGroupIds": [
     *       "studentGroupIds",
     *       "studentGroupIds"
     *     ]
     *   },
     *   "user": {
     *     "role": "role",
     *     "loginId": "loginId",
     *     "id": "id",
     *     "email": "email"
     *   }
     * }
     */
    LoggedInUser: {
      user?: components["schemas"]["LoggedInUser_user"];
      administrator?: components["schemas"]["LoggedInUser_administrator"];
      teacher?: components["schemas"]["LoggedInUser_teacher"];
      student?: components["schemas"]["LoggedInUser_student"];
    };
    postUserLessonStatus_request: {
      lessonId: string;
    };
    /**
     * @example {
     *   "packageId": "packageId",
     *   "packageCategoryId": "codeillusion",
     *   "packageName": "packageName"
     * }
     */
    getAllPackages_200_response_packages_inner: {
      /** @enum {string} */
      packageCategoryId: "codeillusion" | "cse";
      /** @description it is the id of the package. */
      packageId: string;
      /** @description it is the name of the package. */
      packageName: string;
    };
    /**
     * @example {
     *   "packages": [
     *     {
     *       "packageId": "packageId",
     *       "packageCategoryId": "codeillusion",
     *       "packageName": "packageName"
     *     },
     *     {
     *       "packageId": "packageId",
     *       "packageCategoryId": "codeillusion",
     *       "packageName": "packageName"
     *     }
     *   ]
     * }
     */
    getAllPackages_200_response: {
      packages?: components["schemas"]["getAllPackages_200_response_packages_inner"][];
    };
    /**
     * @example {
     *   "packageId": "packageId",
     *   "packageCategoryId": "packageCategoryId",
     *   "packageName": "packageName"
     * }
     */
    getDistrictPurchasedPackagesByDistrictId_200_response_packages_inner: {
      packageCategoryId: string;
      /** @description it is the id of the package. */
      packageId: string;
      /** @description it is the name of the package. */
      packageName: string;
    };
    /**
     * @example {
     *   "packages": [
     *     {
     *       "packageId": "packageId",
     *       "packageCategoryId": "packageCategoryId",
     *       "packageName": "packageName"
     *     },
     *     {
     *       "packageId": "packageId",
     *       "packageCategoryId": "packageCategoryId",
     *       "packageName": "packageName"
     *     }
     *   ]
     * }
     */
    getDistrictPurchasedPackagesByDistrictId_200_response: {
      packages: components["schemas"]["getDistrictPurchasedPackagesByDistrictId_200_response_packages_inner"][];
    };
    /**
     * @example {
     *   "standard": "standard",
     *   "cse": [
     *     "cse",
     *     "cse"
     *   ],
     *   "domain": "domain",
     *   "disneyCodeillusionLesson": [
     *     "disneyCodeillusionLesson",
     *     "disneyCodeillusionLesson"
     *   ],
     *   "description": "description"
     * }
     */
    StandardMapping_gradeBand_inner_standardDomain_inner: {
      standard: string;
      domain: string;
      description: string;
      disneyCodeillusionLesson: string[];
      cse: string[];
    };
    /**
     * @example {
     *   "standardDomain": [
     *     {
     *       "standard": "standard",
     *       "cse": [
     *         "cse",
     *         "cse"
     *       ],
     *       "domain": "domain",
     *       "disneyCodeillusionLesson": [
     *         "disneyCodeillusionLesson",
     *         "disneyCodeillusionLesson"
     *       ],
     *       "description": "description"
     *     },
     *     {
     *       "standard": "standard",
     *       "cse": [
     *         "cse",
     *         "cse"
     *       ],
     *       "domain": "domain",
     *       "disneyCodeillusionLesson": [
     *         "disneyCodeillusionLesson",
     *         "disneyCodeillusionLesson"
     *       ],
     *       "description": "description"
     *     }
     *   ],
     *   "band": "band"
     * }
     */
    StandardMapping_gradeBand_inner: {
      band: string;
      standardDomain: components["schemas"]["StandardMapping_gradeBand_inner_standardDomain_inner"][];
    };
    /**
     * StandardMapping
     * @description The Definition of Get standard mapping based on organization state.
     * @example {
     *   "gradeBand": [
     *     {
     *       "standardDomain": [
     *         {
     *           "standard": "standard",
     *           "cse": [
     *             "cse",
     *             "cse"
     *           ],
     *           "domain": "domain",
     *           "disneyCodeillusionLesson": [
     *             "disneyCodeillusionLesson",
     *             "disneyCodeillusionLesson"
     *           ],
     *           "description": "description"
     *         },
     *         {
     *           "standard": "standard",
     *           "cse": [
     *             "cse",
     *             "cse"
     *           ],
     *           "domain": "domain",
     *           "disneyCodeillusionLesson": [
     *             "disneyCodeillusionLesson",
     *             "disneyCodeillusionLesson"
     *           ],
     *           "description": "description"
     *         }
     *       ],
     *       "band": "band"
     *     },
     *     {
     *       "standardDomain": [
     *         {
     *           "standard": "standard",
     *           "cse": [
     *             "cse",
     *             "cse"
     *           ],
     *           "domain": "domain",
     *           "disneyCodeillusionLesson": [
     *             "disneyCodeillusionLesson",
     *             "disneyCodeillusionLesson"
     *           ],
     *           "description": "description"
     *         },
     *         {
     *           "standard": "standard",
     *           "cse": [
     *             "cse",
     *             "cse"
     *           ],
     *           "domain": "domain",
     *           "disneyCodeillusionLesson": [
     *             "disneyCodeillusionLesson",
     *             "disneyCodeillusionLesson"
     *           ],
     *           "description": "description"
     *         }
     *       ],
     *       "band": "band"
     *     }
     *   ],
     *   "stateId": "stateId",
     *   "stateStandardName": "stateStandardName"
     * }
     */
    StandardMapping: {
      stateId: string;
      stateStandardName: string;
      gradeBand: components["schemas"]["StandardMapping_gradeBand_inner"][];
    };
    /**
     * @example {
     *   "standardMappings": [
     *     {
     *       "gradeBand": [
     *         {
     *           "standardDomain": [
     *             {
     *               "standard": "standard",
     *               "cse": [
     *                 "cse",
     *                 "cse"
     *               ],
     *               "domain": "domain",
     *               "disneyCodeillusionLesson": [
     *                 "disneyCodeillusionLesson",
     *                 "disneyCodeillusionLesson"
     *               ],
     *               "description": "description"
     *             },
     *             {
     *               "standard": "standard",
     *               "cse": [
     *                 "cse",
     *                 "cse"
     *               ],
     *               "domain": "domain",
     *               "disneyCodeillusionLesson": [
     *                 "disneyCodeillusionLesson",
     *                 "disneyCodeillusionLesson"
     *               ],
     *               "description": "description"
     *             }
     *           ],
     *           "band": "band"
     *         },
     *         {
     *           "standardDomain": [
     *             {
     *               "standard": "standard",
     *               "cse": [
     *                 "cse",
     *                 "cse"
     *               ],
     *               "domain": "domain",
     *               "disneyCodeillusionLesson": [
     *                 "disneyCodeillusionLesson",
     *                 "disneyCodeillusionLesson"
     *               ],
     *               "description": "description"
     *             },
     *             {
     *               "standard": "standard",
     *               "cse": [
     *                 "cse",
     *                 "cse"
     *               ],
     *               "domain": "domain",
     *               "disneyCodeillusionLesson": [
     *                 "disneyCodeillusionLesson",
     *                 "disneyCodeillusionLesson"
     *               ],
     *               "description": "description"
     *             }
     *           ],
     *           "band": "band"
     *         }
     *       ],
     *       "stateId": "stateId",
     *       "stateStandardName": "stateStandardName"
     *     },
     *     {
     *       "gradeBand": [
     *         {
     *           "standardDomain": [
     *             {
     *               "standard": "standard",
     *               "cse": [
     *                 "cse",
     *                 "cse"
     *               ],
     *               "domain": "domain",
     *               "disneyCodeillusionLesson": [
     *                 "disneyCodeillusionLesson",
     *                 "disneyCodeillusionLesson"
     *               ],
     *               "description": "description"
     *             },
     *             {
     *               "standard": "standard",
     *               "cse": [
     *                 "cse",
     *                 "cse"
     *               ],
     *               "domain": "domain",
     *               "disneyCodeillusionLesson": [
     *                 "disneyCodeillusionLesson",
     *                 "disneyCodeillusionLesson"
     *               ],
     *               "description": "description"
     *             }
     *           ],
     *           "band": "band"
     *         },
     *         {
     *           "standardDomain": [
     *             {
     *               "standard": "standard",
     *               "cse": [
     *                 "cse",
     *                 "cse"
     *               ],
     *               "domain": "domain",
     *               "disneyCodeillusionLesson": [
     *                 "disneyCodeillusionLesson",
     *                 "disneyCodeillusionLesson"
     *               ],
     *               "description": "description"
     *             },
     *             {
     *               "standard": "standard",
     *               "cse": [
     *                 "cse",
     *                 "cse"
     *               ],
     *               "domain": "domain",
     *               "disneyCodeillusionLesson": [
     *                 "disneyCodeillusionLesson",
     *                 "disneyCodeillusionLesson"
     *               ],
     *               "description": "description"
     *             }
     *           ],
     *           "band": "band"
     *         }
     *       ],
     *       "stateId": "stateId",
     *       "stateStandardName": "stateStandardName"
     *     }
     *   ]
     * }
     */
    getStandardMapping_200_response: {
      standardMappings: components["schemas"]["StandardMapping"][];
    };
    /**
     * @example {
     *   "unaccessibleLessons": [
     *     "unaccessibleLessons",
     *     "unaccessibleLessons"
     *   ]
     * }
     */
    getStudentUnaccessibleLessons_200_response: {
      unaccessibleLessons: string[];
    };
    /**
     * StudentGroupPackageAssignment
     * @description The Definition of Get StudentGroupPackageAssignment
     * @example {
     *   "packageId": "packageId",
     *   "packageCategoryId": "packageCategoryId",
     *   "studentGroupId": "studentGroupId"
     * }
     */
    StudentGroupPackageAssignment: {
      packageCategoryId: string;
      studentGroupId: string;
      packageId: string;
    };
    /**
     * @example {
     *   "studentGroupPackageAssignments": [
     *     {
     *       "packageId": "packageId",
     *       "packageCategoryId": "packageCategoryId",
     *       "studentGroupId": "studentGroupId"
     *     },
     *     {
     *       "packageId": "packageId",
     *       "packageCategoryId": "packageCategoryId",
     *       "studentGroupId": "studentGroupId"
     *     }
     *   ]
     * }
     */
    getStudentGroupPackageAssignments_200_response: {
      studentGroupPackageAssignments: components["schemas"]["StudentGroupPackageAssignment"][];
    };
    /**
     * @example {
     *   "isQuizLesson": true,
     *   "id": "id"
     * }
     */
    CsePackage_units_inner_lessons_inner: {
      id: string;
      isQuizLesson: boolean;
    };
    /**
     * @example {
     *   "name": "name",
     *   "description": "description",
     *   "id": "id",
     *   "lessons": [
     *     {
     *       "isQuizLesson": true,
     *       "id": "id"
     *     },
     *     {
     *       "isQuizLesson": true,
     *       "id": "id"
     *     }
     *   ]
     * }
     */
    CsePackage_units_inner: {
      id: string;
      name: string;
      description: string;
      lessons: components["schemas"]["CsePackage_units_inner_lessons_inner"][];
    };
    /**
     * CsePackage
     * @example {
     *   "headerButtonText": "headerButtonText",
     *   "name": "name",
     *   "id": "id",
     *   "units": [
     *     {
     *       "name": "name",
     *       "description": "description",
     *       "id": "id",
     *       "lessons": [
     *         {
     *           "isQuizLesson": true,
     *           "id": "id"
     *         },
     *         {
     *           "isQuizLesson": true,
     *           "id": "id"
     *         }
     *       ]
     *     },
     *     {
     *       "name": "name",
     *       "description": "description",
     *       "id": "id",
     *       "lessons": [
     *         {
     *           "isQuizLesson": true,
     *           "id": "id"
     *         },
     *         {
     *           "isQuizLesson": true,
     *           "id": "id"
     *         }
     *       ]
     *     }
     *   ],
     *   "headerButtonLink": "headerButtonLink"
     * }
     */
    CsePackage: {
      id: string;
      name: string;
      headerButtonLink: string | null;
      headerButtonText: string | null;
      units: components["schemas"]["CsePackage_units_inner"][];
    };
    /**
     * @example {
     *   "csePackage": {
     *     "headerButtonText": "headerButtonText",
     *     "name": "name",
     *     "id": "id",
     *     "units": [
     *       {
     *         "name": "name",
     *         "description": "description",
     *         "id": "id",
     *         "lessons": [
     *           {
     *             "isQuizLesson": true,
     *             "id": "id"
     *           },
     *           {
     *             "isQuizLesson": true,
     *             "id": "id"
     *           }
     *         ]
     *       },
     *       {
     *         "name": "name",
     *         "description": "description",
     *         "id": "id",
     *         "lessons": [
     *           {
     *             "isQuizLesson": true,
     *             "id": "id"
     *           },
     *           {
     *             "isQuizLesson": true,
     *             "id": "id"
     *           }
     *         ]
     *       }
     *     ],
     *     "headerButtonLink": "headerButtonLink"
     *   }
     * }
     */
    getCsePackage_200_response: {
      csePackage: components["schemas"]["CsePackage"];
    };
    putChangePassword_request: {
      newPassword: string;
    };
    /**
     * @example {
     *   "districtId": "districtId",
     *   "createdUserId": "createdUserId",
     *   "errorMessage": "errorMessage",
     *   "startedAt": "startedAt",
     *   "id": "id",
     *   "finishedAt": "finishedAt"
     * }
     */
    getDistrictRosterSyncStatus_200_response_districtRosterSyncStatuses_inner: {
      id: string;
      districtId: string;
      startedAt: string;
      finishedAt?: string;
      errorMessage?: string;
      createdUserId?: string;
    };
    /**
     * @example {
     *   "districtRosterSyncStatuses": [
     *     {
     *       "districtId": "districtId",
     *       "createdUserId": "createdUserId",
     *       "errorMessage": "errorMessage",
     *       "startedAt": "startedAt",
     *       "id": "id",
     *       "finishedAt": "finishedAt"
     *     },
     *     {
     *       "districtId": "districtId",
     *       "createdUserId": "createdUserId",
     *       "errorMessage": "errorMessage",
     *       "startedAt": "startedAt",
     *       "id": "id",
     *       "finishedAt": "finishedAt"
     *     }
     *   ]
     * }
     */
    getDistrictRosterSyncStatus_200_response: {
      districtRosterSyncStatuses: components["schemas"]["getDistrictRosterSyncStatus_200_response_districtRosterSyncStatuses_inner"][];
    };
    /**
     * @example {
     *   "result": "valid",
     *   "isAccessible": true,
     *   "name": "name"
     * }
     */
    getCheckToken_200_response: {
      /** @enum {string} */
      result: "valid";
      isAccessible: boolean;
      name: string;
    };
    getCheckToken_401_response: {
      /** @enum {string} */
      result: "invalid";
      isAccessible: boolean;
      redirect_url: string;
    };
    /**
     * @example {
     *   "show_user_icon": true,
     *   "show_menu": true,
     *   "show_login_status": true
     * }
     */
    getPlayersSetting_200_response_header_appearance: {
      show_user_icon?: boolean;
      show_menu?: boolean;
      show_login_status?: boolean;
    };
    /**
     * @example {
     *   "se": 6.027456183070403,
     *   "bgm": 0.8008281904610115,
     *   "hint_talk": 5.962133916683182,
     *   "serif_talk": 1.4658129805029452
     * }
     */
    getPlayersSetting_200_response_sound_volume: {
      bgm: number;
      se: number;
      /** @description Volume of automatic reading of instructional characters' lines */
      serif_talk: number;
      /** @description Volume of audio played when pressing the play button in the upper right corner of the hint window */
      hint_talk: number;
    };
    /**
     * @example {
     *   "hint_talk": "hint_talk",
     *   "serif_talk": "serif_talk"
     * }
     */
    getPlayersSetting_200_response_sound_config_talk_type: {
      serif_talk: string;
      hint_talk: string;
    };
    /**
     * @example {
     *   "talk_type": {
     *     "hint_talk": "hint_talk",
     *     "serif_talk": "serif_talk"
     *   },
     *   "min": 5.637376656633329,
     *   "max": 2.3021358869347655
     * }
     */
    getPlayersSetting_200_response_sound_config: {
      min: number;
      max: number;
      talk_type: components["schemas"]["getPlayersSetting_200_response_sound_config_talk_type"];
    };
    /**
     * @example {
     *   "title": "title",
     *   "url": "url"
     * }
     */
    getPlayersSetting_200_response_return_page: {
      title: string;
      url: string;
    };
    /**
     * @example {
     *   "border": "border",
     *   "padding": "padding",
     *   "borderRadius": "borderRadius"
     * }
     */
    getPlayersSetting_200_response_custom_items_inner_style: {
      border: string;
      padding: string;
      borderRadius: string;
    };
    /**
     * @example {
     *   "confirm": "confirm",
     *   "new_tab": true,
     *   "style": {
     *     "border": "border",
     *     "padding": "padding",
     *     "borderRadius": "borderRadius"
     *   },
     *   "text": "text",
     *   "url": "url"
     * }
     */
    getPlayersSetting_200_response_custom_items_inner: {
      url: string;
      text: string;
      style?: components["schemas"]["getPlayersSetting_200_response_custom_items_inner_style"];
      new_tab: boolean;
      confirm: string;
    };
    /**
     * @example {
     *   "login_status": "yes",
     *   "sound_volume": {
     *     "se": 6.027456183070403,
     *     "bgm": 0.8008281904610115,
     *     "hint_talk": 5.962133916683182,
     *     "serif_talk": 1.4658129805029452
     *   },
     *   "sound_config": {
     *     "talk_type": {
     *       "hint_talk": "hint_talk",
     *       "serif_talk": "serif_talk"
     *     },
     *     "min": 5.637376656633329,
     *     "max": 2.3021358869347655
     *   },
     *   "log_level": "development",
     *   "nickname": "nickname",
     *   "my_page_url": "my_page_url",
     *   "return_page": {
     *     "title": "title",
     *     "url": "url"
     *   },
     *   "language": "en",
     *   "player_name": "player_name",
     *   "header_user_icon_name": "header_user_icon_name",
     *   "header_appearance": {
     *     "show_user_icon": true,
     *     "show_menu": true,
     *     "show_login_status": true
     *   },
     *   "custom_items": [
     *     {
     *       "confirm": "confirm",
     *       "new_tab": true,
     *       "style": {
     *         "border": "border",
     *         "padding": "padding",
     *         "borderRadius": "borderRadius"
     *       },
     *       "text": "text",
     *       "url": "url"
     *     },
     *     {
     *       "confirm": "confirm",
     *       "new_tab": true,
     *       "style": {
     *         "border": "border",
     *         "padding": "padding",
     *         "borderRadius": "borderRadius"
     *       },
     *       "text": "text",
     *       "url": "url"
     *     }
     *   ]
     * }
     */
    getPlayersSetting_200_response: {
      /** @enum {string} */
      language: "en" | "ja";
      /** @enum {string} */
      log_level: "development" | "production";
      header_user_icon_name: string;
      /**
       * @example yes
       * @enum {string}
       */
      login_status: "yes";
      /** @description URL to which the user is redirected when clicking the user icon in the header; if not specified, nothing happens when the icon is clicked. */
      my_page_url?: string;
      /** @description User name next to the user icon in the header. If not specified, the string "user" is used. */
      player_name?: string;
      /** @description This name is used in serifs of instructors */
      nickname?: string;
      header_appearance: components["schemas"]["getPlayersSetting_200_response_header_appearance"];
      sound_volume: components["schemas"]["getPlayersSetting_200_response_sound_volume"];
      sound_config: components["schemas"]["getPlayersSetting_200_response_sound_config"];
      return_page: components["schemas"]["getPlayersSetting_200_response_return_page"];
      /** @deprecated */
      custom_items: components["schemas"]["getPlayersSetting_200_response_custom_items_inner"][];
    };
    getPlayersSetting_401_response: {
      /** @enum {string} */
      login_status: "no";
    };
    /**
     * @example {
     *   "isMaintenance": true
     * }
     */
    getPlayersServerStatus_200_response: {
      isMaintenance: boolean;
    };
    postActionLog_request: {
      log: { [key: string]: unknown };
    };
    postStepPassed_request: {
      /** @description This is defined in the spread sheet where the lesson steps are defined */
      project_name: string;
      /** @description This is defined in the spread sheet where the lesson steps are defined */
      scenario_path: string;
      /** @description This is defined in the spread sheet where the lesson steps are defined */
      step_id: string;
    };
    postQuizAnswered_request: {
      /** @description This is defined in the spread sheet where the lesson steps are defined */
      project_name: string;
      /** @description This is defined in the spread sheet where the lesson steps are defined */
      scenario_path: string;
      /** @description This is defined in the spread sheet where the lesson steps are defined */
      step_id: string;
      is_correct: boolean;
      /** @description Which choice did the user selected */
      selected_choice: string;
    };
    /**
     * @example {
     *   "redirecetUrl": "redirecetUrl",
     *   "isAccessible": true,
     *   "passed_step_id_list": [
     *     0.8008281904610115,
     *     0.8008281904610115
     *   ],
     *   "cleared": true
     * }
     */
    getLessonsSetting_200_response: {
      isAccessible: boolean;
      cleared: boolean;
      redirecetUrl: string;
      passed_step_id_list: number[];
    };
    getLessonsSetting_401_response: {
      isAccessible: boolean;
      redirectUrl: string;
    };
    postLessonFinished_request_finish_status: {
      /** @description Will be true the user answered all of quiz correcly or the lesson has no quiz */
      quiz_all_answered: boolean;
      /** @description Will be true if the user didn't use any hint in the lesson */
      no_hint_cleared: boolean;
      /** @description Will be true if the user did the cheat that skip a step by editing the step_id in the URL. */
      no_status_up: boolean;
    };
    postLessonFinished_request: {
      /** @description This is defined in the spread sheet where the lesson steps are defined */
      project_name: string;
      /** @description This is defined in the spread sheet where the lesson steps are defined */
      scenario_path: string;
      finish_status: components["schemas"]["postLessonFinished_request_finish_status"];
    };
    postLessonFinished_200_response_oneOf: {
      /** @enum {string} */
      type: "full_url";
      /** @description When "type" is "full_url", this will be the url to which the user redirect after the lesson */
      value: string;
    };
    postLessonFinished_200_response: components["schemas"]["postLessonFinished_200_response_oneOf"];
    postLessonFinished_401_response: {
      /** @enum {string} */
      login_status: "no";
    };
    /**
     * @example {
     *   "quizAllAnswered": true,
     *   "noHintCleared": true,
     *   "cleared": true
     * }
     */
    postLessonCleared_200_response_stars_to: {
      cleared: boolean;
      noHintCleared: boolean;
      quizAllAnswered: boolean;
    };
    /**
     * @example {
     *   "from": {
     *     "quizAllAnswered": true,
     *     "noHintCleared": true,
     *     "cleared": true
     *   },
     *   "to": {
     *     "quizAllAnswered": true,
     *     "noHintCleared": true,
     *     "cleared": true
     *   }
     * }
     */
    postLessonCleared_200_response_stars: {
      to: components["schemas"]["postLessonCleared_200_response_stars_to"];
      from: components["schemas"]["postLessonCleared_200_response_stars_to"];
    };
    /**
     * @example {
     *   "name": "name",
     *   "rank": 5.962133916683182,
     *   "label": "label",
     *   "requiredTp": 5.637376656633329
     * }
     */
    postLessonCleared_200_response_status_to_designation: {
      label: string;
      rank: number;
      name: string;
      requiredTp: number;
    };
    /**
     * @example {
     *   "level": 9.301444243932576,
     *   "name": "name",
     *   "requiredExp": 7.061401241503109,
     *   "label": "label",
     *   "exp": 2.3021358869347655
     * }
     */
    postLessonCleared_200_response_status_to_courseLevel_inner: {
      exp: number;
      label: string;
      requiredExp: number;
      level: number;
      name: string;
    };
    /**
     * @example {
     *   "currentChapterName": "currentChapterName",
     *   "courseLevel": [
     *     {
     *       "level": 9.301444243932576,
     *       "name": "name",
     *       "requiredExp": 7.061401241503109,
     *       "label": "label",
     *       "exp": 2.3021358869347655
     *     },
     *     {
     *       "level": 9.301444243932576,
     *       "name": "name",
     *       "requiredExp": 7.061401241503109,
     *       "label": "label",
     *       "exp": 2.3021358869347655
     *     }
     *   ],
     *   "coins": 1.4658129805029452,
     *   "nickname": "nickname",
     *   "designation": {
     *     "name": "name",
     *     "rank": 5.962133916683182,
     *     "label": "label",
     *     "requiredTp": 5.637376656633329
     *   },
     *   "tp": 6.027456183070403,
     *   "totalStarNum": 0.8008281904610115
     * }
     */
    postLessonCleared_200_response_status_to: {
      totalStarNum: number;
      tp: number;
      nickname: string;
      coins: number;
      designation: components["schemas"]["postLessonCleared_200_response_status_to_designation"];
      courseLevel: components["schemas"]["postLessonCleared_200_response_status_to_courseLevel_inner"][];
      currentChapterName: string;
    };
    /**
     * @example {
     *   "0": 3.616076749251911
     * }
     */
    postLessonCleared_200_response_status_levelTable_mediaArt: {
      "0": number;
    };
    /**
     * @example {
     *   "mediaArt": {
     *     "0": 3.616076749251911
     *   },
     *   "game": {
     *     "0": 3.616076749251911
     *   },
     *   "webDesign": {
     *     "0": 3.616076749251911
     *   },
     *   "basic": {
     *     "0": 3.616076749251911
     *   }
     * }
     */
    postLessonCleared_200_response_status_levelTable: {
      mediaArt: components["schemas"]["postLessonCleared_200_response_status_levelTable_mediaArt"];
      basic: components["schemas"]["postLessonCleared_200_response_status_levelTable_mediaArt"];
      webDesign: components["schemas"]["postLessonCleared_200_response_status_levelTable_mediaArt"];
      game: components["schemas"]["postLessonCleared_200_response_status_levelTable_mediaArt"];
    };
    /**
     * @example {
     *   "0": "0"
     * }
     */
    postLessonCleared_200_response_status_rankTable_label: {
      "0": string;
    };
    /**
     * @example {
     *   "label": {
     *     "0": "0"
     *   },
     *   "tp": {
     *     "0": 3.616076749251911
     *   }
     * }
     */
    postLessonCleared_200_response_status_rankTable: {
      label: components["schemas"]["postLessonCleared_200_response_status_rankTable_label"];
      tp: components["schemas"]["postLessonCleared_200_response_status_levelTable_mediaArt"];
    };
    /**
     * @example {
     *   "from": {
     *     "currentChapterName": "currentChapterName",
     *     "courseLevel": [
     *       {
     *         "level": 9.301444243932576,
     *         "name": "name",
     *         "requiredExp": 7.061401241503109,
     *         "label": "label",
     *         "exp": 2.3021358869347655
     *       },
     *       {
     *         "level": 9.301444243932576,
     *         "name": "name",
     *         "requiredExp": 7.061401241503109,
     *         "label": "label",
     *         "exp": 2.3021358869347655
     *       }
     *     ],
     *     "coins": 1.4658129805029452,
     *     "nickname": "nickname",
     *     "designation": {
     *       "name": "name",
     *       "rank": 5.962133916683182,
     *       "label": "label",
     *       "requiredTp": 5.637376656633329
     *     },
     *     "tp": 6.027456183070403,
     *     "totalStarNum": 0.8008281904610115
     *   },
     *   "to": {
     *     "currentChapterName": "currentChapterName",
     *     "courseLevel": [
     *       {
     *         "level": 9.301444243932576,
     *         "name": "name",
     *         "requiredExp": 7.061401241503109,
     *         "label": "label",
     *         "exp": 2.3021358869347655
     *       },
     *       {
     *         "level": 9.301444243932576,
     *         "name": "name",
     *         "requiredExp": 7.061401241503109,
     *         "label": "label",
     *         "exp": 2.3021358869347655
     *       }
     *     ],
     *     "coins": 1.4658129805029452,
     *     "nickname": "nickname",
     *     "designation": {
     *       "name": "name",
     *       "rank": 5.962133916683182,
     *       "label": "label",
     *       "requiredTp": 5.637376656633329
     *     },
     *     "tp": 6.027456183070403,
     *     "totalStarNum": 0.8008281904610115
     *   },
     *   "levelTable": {
     *     "mediaArt": {
     *       "0": 3.616076749251911
     *     },
     *     "game": {
     *       "0": 3.616076749251911
     *     },
     *     "webDesign": {
     *       "0": 3.616076749251911
     *     },
     *     "basic": {
     *       "0": 3.616076749251911
     *     }
     *   },
     *   "rankTable": {
     *     "label": {
     *       "0": "0"
     *     },
     *     "tp": {
     *       "0": 3.616076749251911
     *     }
     *   }
     * }
     */
    postLessonCleared_200_response_status: {
      to: components["schemas"]["postLessonCleared_200_response_status_to"];
      from: components["schemas"]["postLessonCleared_200_response_status_to"];
      levelTable: components["schemas"]["postLessonCleared_200_response_status_levelTable"];
      rankTable: components["schemas"]["postLessonCleared_200_response_status_rankTable"];
    };
    /**
     * @example {
     *   "stars": {
     *     "from": {
     *       "quizAllAnswered": true,
     *       "noHintCleared": true,
     *       "cleared": true
     *     },
     *     "to": {
     *       "quizAllAnswered": true,
     *       "noHintCleared": true,
     *       "cleared": true
     *     }
     *   },
     *   "status": {
     *     "from": {
     *       "currentChapterName": "currentChapterName",
     *       "courseLevel": [
     *         {
     *           "level": 9.301444243932576,
     *           "name": "name",
     *           "requiredExp": 7.061401241503109,
     *           "label": "label",
     *           "exp": 2.3021358869347655
     *         },
     *         {
     *           "level": 9.301444243932576,
     *           "name": "name",
     *           "requiredExp": 7.061401241503109,
     *           "label": "label",
     *           "exp": 2.3021358869347655
     *         }
     *       ],
     *       "coins": 1.4658129805029452,
     *       "nickname": "nickname",
     *       "designation": {
     *         "name": "name",
     *         "rank": 5.962133916683182,
     *         "label": "label",
     *         "requiredTp": 5.637376656633329
     *       },
     *       "tp": 6.027456183070403,
     *       "totalStarNum": 0.8008281904610115
     *     },
     *     "to": {
     *       "currentChapterName": "currentChapterName",
     *       "courseLevel": [
     *         {
     *           "level": 9.301444243932576,
     *           "name": "name",
     *           "requiredExp": 7.061401241503109,
     *           "label": "label",
     *           "exp": 2.3021358869347655
     *         },
     *         {
     *           "level": 9.301444243932576,
     *           "name": "name",
     *           "requiredExp": 7.061401241503109,
     *           "label": "label",
     *           "exp": 2.3021358869347655
     *         }
     *       ],
     *       "coins": 1.4658129805029452,
     *       "nickname": "nickname",
     *       "designation": {
     *         "name": "name",
     *         "rank": 5.962133916683182,
     *         "label": "label",
     *         "requiredTp": 5.637376656633329
     *       },
     *       "tp": 6.027456183070403,
     *       "totalStarNum": 0.8008281904610115
     *     },
     *     "levelTable": {
     *       "mediaArt": {
     *         "0": 3.616076749251911
     *       },
     *       "game": {
     *         "0": 3.616076749251911
     *       },
     *       "webDesign": {
     *         "0": 3.616076749251911
     *       },
     *       "basic": {
     *         "0": 3.616076749251911
     *       }
     *     },
     *     "rankTable": {
     *       "label": {
     *         "0": "0"
     *       },
     *       "tp": {
     *         "0": 3.616076749251911
     *       }
     *     }
     *   }
     * }
     */
    postLessonCleared_200_response: {
      stars: components["schemas"]["postLessonCleared_200_response_stars"];
      status: components["schemas"]["postLessonCleared_200_response_status"];
    };
    getChurnZeroAuthentication_302_response: {
      authToken: string;
    };
    /** MaintenanceUserStudentRole */
    MaintenanceUserStudentRole: {
      /** @enum {string} */
      role: "student";
      nickname: string;
      lmsId?: string;
    };
    /** MaintenanceAuthenticationInfo */
    MaintenanceAuthenticationInfo: {
      loginId: string;
      email: string;
      password: string;
    };
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf: {
      id: string;
    };
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf: components["schemas"]["MaintenanceUserStudentRole"] &
      components["schemas"]["MaintenanceAuthenticationInfo"] &
      components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"];
    /** MaintenanceUserTeacherRole */
    MaintenanceUserTeacherRole: {
      /** @enum {string} */
      role: "teacher";
      firstName: string;
      lastName: string;
      lmsId?: string;
    };
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_1: components["schemas"]["MaintenanceUserTeacherRole"] &
      components["schemas"]["MaintenanceAuthenticationInfo"] &
      components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"];
    /** MaintenanceUserAdministratorRole */
    MaintenanceUserAdministratorRole: {
      /** @enum {string} */
      role: "administrator";
      firstName: string;
      lastName: string;
      lmsId?: string;
    };
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_2: components["schemas"]["MaintenanceUserAdministratorRole"] &
      components["schemas"]["MaintenanceAuthenticationInfo"] &
      components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"];
    /** MaintenanceUserInternalOperatorRole */
    MaintenanceUserInternalOperatorRole: {
      /** @enum {string} */
      role: "internalOperator";
    };
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_3: components["schemas"]["MaintenanceUserInternalOperatorRole"] &
      components["schemas"]["MaintenanceAuthenticationInfo"] &
      components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"];
    /** MaintenanceUserPerRoleWithIdAndAuthenticationInfo */
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo:
      | components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf"]
      | components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_1"]
      | components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_2"]
      | components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_3"];
    /**
     * @example {
     *   "users": [
     *     null,
     *     null
     *   ]
     * }
     */
    maintenanceGetUsers_200_response: {
      users: components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo"][];
    };
    maintenancePutUsers_request_users_inner: components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo"];
    maintenancePutUsers_request: {
      users: components["schemas"]["maintenancePutUsers_request_users_inner"][];
    };
    MaintenanceUserPerRoleWithAuthenticationInfo_oneOf: components["schemas"]["MaintenanceUserStudentRole"] &
      components["schemas"]["MaintenanceAuthenticationInfo"];
    MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_1: components["schemas"]["MaintenanceUserTeacherRole"] &
      components["schemas"]["MaintenanceAuthenticationInfo"];
    MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_2: components["schemas"]["MaintenanceUserAdministratorRole"] &
      components["schemas"]["MaintenanceAuthenticationInfo"];
    MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_3: components["schemas"]["MaintenanceUserInternalOperatorRole"] &
      components["schemas"]["MaintenanceAuthenticationInfo"];
    /** MaintenanceUserPerRoleWithAuthenticationInfo */
    MaintenanceUserPerRoleWithAuthenticationInfo:
      | components["schemas"]["MaintenanceUserPerRoleWithAuthenticationInfo_oneOf"]
      | components["schemas"]["MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_1"]
      | components["schemas"]["MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_2"]
      | components["schemas"]["MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_3"];
    maintenancePostUsers_request: {
      users: components["schemas"]["MaintenanceUserPerRoleWithAuthenticationInfo"][];
    };
    MaintenanceUserPerRoleWithId_oneOf: components["schemas"]["MaintenanceUserStudentRole"] &
      components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"];
    MaintenanceUserPerRoleWithId_oneOf_1: components["schemas"]["MaintenanceUserTeacherRole"] &
      components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"];
    MaintenanceUserPerRoleWithId_oneOf_2: components["schemas"]["MaintenanceUserAdministratorRole"] &
      components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"];
    MaintenanceUserPerRoleWithId_oneOf_3: components["schemas"]["MaintenanceUserInternalOperatorRole"] &
      components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"];
    /** MaintenanceUserPerRoleWithId */
    MaintenanceUserPerRoleWithId:
      | components["schemas"]["MaintenanceUserPerRoleWithId_oneOf"]
      | components["schemas"]["MaintenanceUserPerRoleWithId_oneOf_1"]
      | components["schemas"]["MaintenanceUserPerRoleWithId_oneOf_2"]
      | components["schemas"]["MaintenanceUserPerRoleWithId_oneOf_3"];
    /**
     * @example {
     *   "users": [
     *     null,
     *     null
     *   ]
     * }
     */
    maintenancePostUsers_200_response: {
      users: components["schemas"]["MaintenanceUserPerRoleWithId"][];
    };
    maintenancePostAccountNotification_request_accounts_inner: {
      email: string;
      password: string;
    };
    maintenancePostAccountNotification_request: {
      title: string;
      accounts: components["schemas"]["maintenancePostAccountNotification_request_accounts_inner"][];
      /** @enum {string} */
      toType: "email" | "adminId" | "teacherId";
      toEmails?: string[];
      toAdminIds?: string[];
      toTeacherIds?: string[];
    };
    /**
     * @example {
     *   "message": "ok"
     * }
     */
    maintenancePostAccountNotification_200_response: {
      /** @enum {string} */
      message: "ok";
    };
    /**
     * MaintenanceDistrict
     * @description The Definition of Get Districts.
     */
    MaintenanceDistrict: {
      name: string;
      stateId: string;
      lmsId?: string;
      enableRosterSync?: boolean;
      districtLmsId?: string;
    };
    /** DistrictWithId */
    DistrictWithId: components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"] &
      components["schemas"]["MaintenanceDistrict"];
    /**
     * @example {
     *   "districts": [
     *     null,
     *     null
     *   ]
     * }
     */
    maintenanceGetDistricts_200_response: {
      districts: components["schemas"]["DistrictWithId"][];
    };
    maintenancePutDistricts_request_districts_inner_allOf: {
      id?: string;
    };
    maintenancePutDistricts_request_districts_inner: components["schemas"]["maintenancePutDistricts_request_districts_inner_allOf"] &
      components["schemas"]["MaintenanceDistrict"];
    maintenancePutDistricts_request: {
      districts: components["schemas"]["maintenancePutDistricts_request_districts_inner"][];
    };
    /**
     * @example {
     *   "ok": "ok"
     * }
     */
    maintenancePutDistricts_200_response: {
      ok: string;
    };
    /**
     * MaintenanceOrganization
     * @description The Definition of Get Organizations.
     */
    MaintenanceOrganization: {
      name: string;
      districtId: string;
      stateId: string;
      organizationLmsId?: string;
    };
    /** OrganizationWithId */
    OrganizationWithId: components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"] &
      components["schemas"]["MaintenanceOrganization"];
    /**
     * @example {
     *   "organizations": [
     *     null,
     *     null
     *   ]
     * }
     */
    maintenanceGetOrganizations_200_response: {
      organizations: components["schemas"]["OrganizationWithId"][];
    };
    maintenancePutOrganizations_request_organizations_inner: components["schemas"]["maintenancePutDistricts_request_districts_inner_allOf"] &
      components["schemas"]["MaintenanceOrganization"];
    maintenancePutOrganizations_request: {
      organizations: components["schemas"]["maintenancePutOrganizations_request_organizations_inner"][];
    };
    /**
     * MaintenanceStudentGroup
     * @description The Definition of Get Student Groups.
     */
    MaintenanceStudentGroup: {
      organizationId: string;
      name: string;
      codeillusionPackageId: string;
      csePackageId?: string;
      grade: string;
      studentGroupLmsId?: string;
    };
    /** StudentGroupWithId */
    StudentGroupWithId: components["schemas"]["MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf"] &
      components["schemas"]["MaintenanceStudentGroup"];
    /**
     * @example {
     *   "studentGroups": [
     *     null,
     *     null
     *   ]
     * }
     */
    maintenanceGetStudentGroups_200_response: {
      studentGroups: components["schemas"]["StudentGroupWithId"][];
    };
    maintenancePutStudentGroups_request_studentGroups_inner: components["schemas"]["maintenancePutDistricts_request_districts_inner_allOf"] &
      components["schemas"]["MaintenanceStudentGroup"];
    maintenancePutStudentGroups_request: {
      studentGroups: components["schemas"]["maintenancePutStudentGroups_request_studentGroups_inner"][];
    };
    /**
     * MaintenanceAdministratorDistrict
     * @description The Definition of Get Districts.
     * @example {
     *   "districtId": "districtId",
     *   "userId": "userId"
     * }
     */
    MaintenanceAdministratorDistrict: {
      districtId: string;
      userId: string;
    };
    /**
     * @example {
     *   "administratorDistricts": [
     *     {
     *       "districtId": "districtId",
     *       "userId": "userId"
     *     },
     *     {
     *       "districtId": "districtId",
     *       "userId": "userId"
     *     }
     *   ]
     * }
     */
    maintenanceGetAdministratorDistricts_200_response: {
      administratorDistricts: components["schemas"]["MaintenanceAdministratorDistrict"][];
    };
    /**
     * MaintenanceTeacherOrganization
     * @description The Definition of Get Organizations.
     * @example {
     *   "organizationId": "organizationId",
     *   "userId": "userId"
     * }
     */
    MaintenanceTeacherOrganization: {
      organizationId: string;
      userId: string;
    };
    /**
     * @example {
     *   "teacherOrganizations": [
     *     {
     *       "organizationId": "organizationId",
     *       "userId": "userId"
     *     },
     *     {
     *       "organizationId": "organizationId",
     *       "userId": "userId"
     *     }
     *   ]
     * }
     */
    maintenanceGetTeacherOrganizations_200_response: {
      teacherOrganizations: components["schemas"]["MaintenanceTeacherOrganization"][];
    };
    /**
     * MaintenanceStudentGroupStudent
     * @description The Definition of Get Student Groups.
     * @example {
     *   "studentGroupId": "studentGroupId",
     *   "userId": "userId"
     * }
     */
    MaintenanceStudentGroupStudent: {
      studentGroupId: string;
      userId: string;
    };
    /**
     * @example {
     *   "studentGroupStudents": [
     *     {
     *       "studentGroupId": "studentGroupId",
     *       "userId": "userId"
     *     },
     *     {
     *       "studentGroupId": "studentGroupId",
     *       "userId": "userId"
     *     }
     *   ]
     * }
     */
    maintenanceGetStudentGroupStudents_200_response: {
      studentGroupStudents: components["schemas"]["MaintenanceStudentGroupStudent"][];
    };
    /**
     * @example {
     *   "message": "message"
     * }
     */
    maintenanceGetConstructFreeTrialAccountsForSales_200_response: {
      message: string;
    };
  };
}

export interface operations {
  postLogin: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postLogin_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postLogin_request"];
      };
    };
  };
  postNoCredentialLogin: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postLogin_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": { [key: string]: unknown };
      };
    };
  };
  postCleverAuthenticate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postCleverAuthenticate_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postCleverAuthenticate_request"];
      };
    };
  };
  /** This API provides get all the clever 's data' and add in codex database. */
  getCleverRosterSync: {
    parameters: {
      query: {
        districtId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getCleverRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  postGoogleAuthenticate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postCleverAuthenticate_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postGoogleAuthenticate_request"];
      };
    };
  };
  postClassLinkAuthenticate: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postCleverAuthenticate_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postClassLinkAuthenticate_request"];
      };
    };
  };
  /** This API provides get all the classlink 's data' and add in codex database. */
  getClasslinkRosterSync: {
    parameters: {
      query: {
        districtId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** POST API call when administartor, lit, or teacher user want to reset their password. */
  postUserResetPasswordRequest: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postUserResetPasswordRequest_request"];
      };
    };
  };
  /** POST API call when administartor, lit, or teacher user reset their password. */
  postResetPassword: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postResetPassword_request"];
      };
    };
  };
  /** POST API call when administartor, lit, or teacher user want to resend reset password request. */
  postUserResetPasswordRequestResend: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postUserResetPasswordRequestResend_request"];
      };
    };
  };
  /**
   * This API returns the CodeIllusionPacakges available to the specified user.
   * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
   */
  getUsersUserIdCodeIllusionPackages: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getUsersUserIdCodeIllusionPackages_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** This API provides a list of Lesson definitions. */
  getLessons: {
    parameters: {
      query: {
        lessonIds: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getLessons_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * This API provides Lesson Statuses for the specified User.
   * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
   */
  getUsersUserIdLessonStatuses: {
    parameters: {
      path: {
        userId: string;
      };
      query: {
        lessonIds?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getUsersUserIdLessonStatuses_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * This API provides Settings for the specified User.
   * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
   */
  getUserSettings: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getUserSettings_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * This API updates SoundSettings for the specified User.
   * SoundSettings is the part of User's Settings.
   * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
   */
  updateUserSoundSettings: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["updateUserSoundSettings_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserSoundSettings"];
      };
    };
  };
  /** This API returns the UserPackageAssignment which are assigned to the specified user. */
  getUserPackageAssignments: {
    parameters: {
      query: {
        userId?: string;
        packageId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getUserPackageAssignments_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** This API create the UserPackageAssignment. */
  postUserPackageAssignment: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postUserPackageAssignment_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** This user has the same category package already */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserPackageAssignment"];
      };
    };
  };
  /** This API deletes the UserPackageAssignment which are assigned to the specified user. */
  deleteUserPackageAssignment: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deleteUserPackageAssignment_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["deleteUserPackageAssignment_request"];
      };
    };
  };
  /**
   * This API provides all the Districts.
   * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
   */
  getDistricts: {
    parameters: {
      query: {
        districtIds?: string[];
        LMSId?: string;
        enabledRosterSync?: boolean;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getDistricts_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** District POST API call when user want to add district in system. */
  postDistrict: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** District already exist */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postDistrict_request"];
      };
    };
  };
  /** This API gives the district by districtId. */
  getDistrictByDistrictId: {
    parameters: {
      path: {
        districtId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["District"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** District PUT API call when user want to edit district in system. */
  putDistrict: {
    parameters: {
      path: {
        districtId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** District already exist */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["putDistrict_request"];
      };
    };
  };
  /** Delete district */
  deleteDistrict: {
    parameters: {
      path: {
        districtId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** This API provides a list of all the administrators. */
  getAdministrators: {
    parameters: {
      path: {
        districtId: string;
      };
      query: {
        administratorIds?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getAdministrators_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  postAdministrators: {
    parameters: {
      path: {
        districtId: string;
      };
      query: {
        administratorIds?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["postAdministrators_400_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postAdministrators_request"];
      };
    };
  };
  /** Administrator PUT API call when user want to edit administrator in system. */
  putAdministrator: {
    parameters: {
      path: {
        administratorId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Administrator already exist */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["putAdministrator_request"];
      };
    };
  };
  /** delete an administrator */
  deleteAdministrator: {
    parameters: {
      path: {
        administratorId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /**
   * This API provides all the organizations.
   * If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
   */
  getOrganizations: {
    parameters: {
      path: {
        districtId: string;
      };
      query: {
        organizationIds?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getOrganizations_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Organization POST API call when user want to add organization in system. */
  postOrganization: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** given organization already exist in same district */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postOrganization_request"];
      };
    };
  };
  /** Organization PUT API call when user want to edit organization information in system. */
  putOrganization: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Organization already exist in same district */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postOrganization_request"];
      };
    };
  };
  /** Organization DELETE API call when user want to delete organization in system. */
  deleteOrganization: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /**
   * This API provides the student groups based on organizationId
   * If the user pointed to by the token does not have permission to view the information for the specified student groups, an error will occur.
   */
  getStudentGroups: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getStudentGroups_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Student Group POST API call when user want to add student group in system. */
  postStudentGroup: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Student Group already exist */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postStudentGroup_request"];
      };
    };
  };
  /** This API provides the district lms information based on organizationId. */
  getDistrictLMSInformationByOrganization: {
    parameters: {
      path: {
        organizationId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getDistrictLMSInformationByOrganization_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Student Group PUT API call when user want to edit student group in system. */
  putStudentGroup: {
    parameters: {
      path: {
        studentGroupId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Student Group already exist */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["putStudentGroup_request"];
      };
    };
  };
  /** Delete Student Group */
  deleteStudentGroup: {
    parameters: {
      path: {
        studentGroupId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getPackageDetailsByStudentGroupId: {
    parameters: {
      path: {
        studentGroupId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getPackageDetailsByStudentGroupId_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** This API provides the students based on studentGroupId. */
  getStudents: {
    parameters: {
      path: {
        studentGroupId: string;
      };
      query: {
        studentIds?: string[];
        name?: string;
        option?: "NotIn" | "In";
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getStudents_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  postStudents: {
    parameters: {
      path: {
        studentGroupId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["postStudents_400_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postStudents_request"];
      };
    };
  };
  /** This API add existing student to student group */
  postStudentInStudentGroup: {
    parameters: {
      path: {
        studentGroupId: string;
        studentId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** invalid studentGroupId */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Student already exist */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** DELETE API call when user Internal Operator or Administrator want to remove the student from studentGroup. */
  deleteStudentFromStudentGroup: {
    parameters: {
      path: {
        studentGroupId: string;
        studentId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** Student PUT API call when user want to edit student information in system. */
  putStudent: {
    parameters: {
      path: {
        studentId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** student already exist */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["putStudent_request"];
      };
    };
  };
  /** Student DELETE API call when user want to delete student in system. */
  deleteStudent: {
    parameters: {
      path: {
        studentId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** This API provides the teachers based on organizationId */
  getTeachers: {
    parameters: {
      path: {
        organizationId: string;
      };
      query: {
        teacherIds?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getTeachers_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  postTeachers: {
    parameters: {
      path: {
        organizationId: string;
      };
      query: {
        teacherIds?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["postTeachers_400_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postTeachers_request"];
      };
    };
  };
  /** This API gives  the teacher's basic details and it's organization's details. */
  getTeacherOrganizations: {
    parameters: {
      path: {
        teacherId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["Teacher_Organization"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** Teacher PUT API call when user want to edit teacher in system. */
  putTeacher: {
    parameters: {
      path: {
        teacherId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Email already associate with the Teacher. */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["putTeacher_request"];
      };
    };
  };
  /** delete an teacher */
  deleteTeacher: {
    parameters: {
      path: {
        teacherId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** POST API call when user want to add teacher into organization. */
  postTeacherInOrganization: {
    parameters: {
      path: {
        organizationId: string;
        teacherId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Teacher already associate with the Organization. */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** DELETE API call when user(Internal Operator/Administrator) want to remove the teacher from organization. */
  deleteTeacherFromOrganization: {
    parameters: {
      path: {
        organizationId: string;
        teacherId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** POST API call when teacher want to restrict lesson access to their student group. */
  postStudentGroupUnaccessibleLesson: {
    parameters: {
      path: {
        studentGroupId: string;
      };
      query: {
        lessonIds: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Specified lesson already disable for student group */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postStudentGroupUnaccessibleLesson_request"];
      };
    };
  };
  /** Delete API call when teacher / internal operator / district administrator want to remove restrict lesson access to their student group. */
  deleteStudentGroupUnaccessibleLesson: {
    parameters: {
      path: {
        studentGroupId: string;
      };
      query: {
        lessonIds: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** Get API call when teacher / internal operator / district administrator want to view restrict lesson access to their student group. */
  getUnaccessibleLessons: {
    parameters: {
      path: {
        studentGroupId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getUnaccessibleLessons_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** GET API call when teacher / internal operator / district administrator want to view lesson statuses for student group. */
  getStudentGroupLessonStatuses: {
    parameters: {
      path: {
        studentGroupId: string;
      };
      query: {
        lessonIds?: string[];
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getStudentGroupLessonStatuses_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["getStudentGroupLessonStatuses_500_response"];
        };
      };
    };
  };
  getLoggedInUser: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["LoggedInUser"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** This POST API call when user start the any lesson. */
  postUserLessonStatus: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postUserLessonStatus_request"];
      };
    };
  };
  getAllPackages: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getAllPackages_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getDistrictPurchasedPackagesByDistrictId: {
    parameters: {
      path: {
        districtId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getDistrictPurchasedPackagesByDistrictId_200_response"];
        };
      };
      /** Bad request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** This API provides standard-mapping information of state. */
  getStandardMapping: {
    parameters: {
      query: {
        stateId?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getStandardMapping_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Get API call when user want to view restricted lesson. */
  getStudentUnaccessibleLessons: {
    parameters: {
      path: {
        studentId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getStudentUnaccessibleLessons_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** This API provides the StudentGroupPackageAssignments based on queries */
  getStudentGroupPackageAssignments: {
    parameters: {
      query: {
        studentGroupId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getStudentGroupPackageAssignments_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getCodeIllusionPackage: {
    parameters: {
      query: {
        packageId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getUsersUserIdCodeIllusionPackages_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  getCsePackage: {
    parameters: {
      path: {
        packageId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getCsePackage_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** PUT API call when teacher,administrator or internal operator want to change their password. */
  putChangePassword: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["putChangePassword_request"];
      };
    };
  };
  /** This API provides roster sync status of district. */
  getDistrictRosterSyncStatus: {
    parameters: {
      query: {
        districtId: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getDistrictRosterSyncStatus_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  /** Lesson Player calls this API once at startup, verifying that the Bearer token is valid. If not, returning a redirect url. */
  getCheckToken: {
    parameters: {
      header: {
        authentication?: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getCheckToken_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["getCheckToken_401_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** The Lesson Player calls this API once at startup, and the return value contains a variety of information that can be used to change the behavior of the Lesson Player. */
  getPlayersSetting: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getPlayersSetting_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["getPlayersSetting_401_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** The Lesson Player expects the "isMaintenance" flag to always be false. */
  getPlayersServerStatus: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getPlayersServerStatus_200_response"];
        };
      };
    };
  };
  /** The Lesson Player calls this API once for action log */
  postActionLog: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["getPlayersSetting_401_response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postActionLog_request"];
      };
    };
  };
  /** The Lesson Player calls this API once for each step completed; it stores the information on the BACKEND side and returns nothing. It always succeeds. */
  postStepPassed: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["getPlayersSetting_401_response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postStepPassed_request"];
      };
    };
  };
  /** The Lesson Player calls this API once for each step completed; it stores the information on the BACKEND side and returns nothing. It always succeeds. */
  postQuizAnswered: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getClasslinkRosterSync_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["getPlayersSetting_401_response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postQuizAnswered_request"];
      };
    };
  };
  /** The Lesson Player calls this API once at the start of each lesson. The display of the editor screen changes according to the returned value. */
  getLessonsSetting: {
    parameters: {
      query: {
        scenario_path: string;
        project_name: string;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["getLessonsSetting_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["getLessonsSetting_401_response"];
        };
      };
      /** Forbidden */
      403: {
        content: {
          "application/json": components["schemas"]["getLessonsSetting_401_response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
  };
  /** Lesson Player calls this API at the end of each lesson. It moves to the specified destination according to the return value. */
  postLessonFinished: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postLessonFinished_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["postLessonFinished_401_response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postLessonFinished_request"];
      };
    };
  };
  /** Lesson Player calls this API at the end of each lesson. It moves to the specified destination according to the return value. */
  postLessonCleared: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postLessonCleared_200_response"];
        };
      };
      /** Unauthorized */
      401: {
        content: {
          "application/json": components["schemas"]["postLessonFinished_401_response"];
        };
      };
      /** Not Found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["postUserResetPasswordRequest_500_response"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["postLessonFinished_request"];
      };
    };
  };
  /** Lesson Player calls this API at the end of each lesson. It moves to the specified destination according to the return value. */
  getAfterLessonCleared: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["postLessonFinished_200_response"];
        };
      };
    };
  };
  postLessonSheetChanged: {
    parameters: {
      query: {
        lessonName: string;
      };
    };
    responses: {
      /** OK */
      200: unknown;
      /** Internal Server Error */
      500: unknown;
    };
  };
  getChurnZeroAuthentication: {
    parameters: {
      query: {
        "account-external-id": string;
        "contact-external-id": string;
        next: string;
      };
    };
    responses: {
      /** Redirects to success center auth callback url */
      302: {
        content: {
          "application/json": components["schemas"]["getChurnZeroAuthentication_302_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  maintenanceHealthCheck: {
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["deleteUserPackageAssignment_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["deleteUserPackageAssignment_200_response"];
        };
      };
    };
  };
  maintenanceGetUsers: {
    responses: {
      /** Returns all Users */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetUsers_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  maintenancePutUsers: {
    responses: {
      /** Returns created Users */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetUsers_200_response"];
        };
      };
      /** Some of the given Users not found */
      404: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenancePutUsers_request"];
      };
    };
  };
  maintenancePostUsers: {
    responses: {
      /** Returns created Users */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePostUsers_200_response"];
        };
      };
      /** Some of the given Users already exist */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenancePostUsers_request"];
      };
    };
  };
  maintenancePostAccountNotification: {
    responses: {
      /** Succeeded to create. Returns nothing */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePostAccountNotification_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenancePostAccountNotification_request"];
      };
    };
  };
  maintenanceGetDistricts: {
    responses: {
      /** Returns all Districts */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  maintenancePutDistricts: {
    responses: {
      /** Returns created Districts */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenancePutDistricts_request"];
      };
    };
  };
  maintenanceGetOrganizations: {
    responses: {
      /** Returns all Organizations */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetOrganizations_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  maintenancePutOrganizations: {
    responses: {
      /** Returns created Organizations */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenancePutOrganizations_request"];
      };
    };
  };
  maintenanceGetStudentGroups: {
    responses: {
      /** Returns all StudentGroup */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetStudentGroups_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  maintenancePutStudentGroups: {
    responses: {
      /** Returns created StudentGroup */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenancePutStudentGroups_request"];
      };
    };
  };
  maintenanceGetAdministratorDistricts: {
    responses: {
      /** Returns all AdministratorDistricts */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetAdministratorDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  maintenancePostAdministratorDistricts: {
    responses: {
      /** Returns created AdministratorDistrict */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenanceGetAdministratorDistricts_200_response"];
      };
    };
  };
  maintenanceDeleteAdministratorDistricts: {
    responses: {
      /** Returns ok */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenanceGetAdministratorDistricts_200_response"];
      };
    };
  };
  maintenanceGetTeacherOrganizations: {
    responses: {
      /** Returns all TeacherOrganizations */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetTeacherOrganizations_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  maintenancePostTeacherOrganizations: {
    responses: {
      /** Returns created TeacherOrganizations */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenanceGetTeacherOrganizations_200_response"];
      };
    };
  };
  maintenanceDeleteTeacherOrganizations: {
    responses: {
      /** Returns ok */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenanceGetTeacherOrganizations_200_response"];
      };
    };
  };
  maintenanceGetStudentGroupStudents: {
    responses: {
      /** Returns all StudentGroupStudents */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetStudentGroupStudents_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
  maintenancePostStudentGroupStudents: {
    responses: {
      /** Returns created StudentGroupStudents */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenanceGetStudentGroupStudents_200_response"];
      };
    };
  };
  maintenanceDeleteStudentGroupStudents: {
    responses: {
      /** Returns ok */
      200: {
        content: {
          "application/json": components["schemas"]["maintenancePutDistricts_200_response"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["maintenanceGetStudentGroupStudents_200_response"];
      };
    };
  };
  maintenanceGetConstructFreeTrialAccountsForSales: {
    parameters: {
      query: {
        districtName: string;
        stateId: string;
        prefix: string;
        maxStudentCount?: number;
        maxTeacherCount?: number;
      };
    };
    responses: {
      /** OK */
      200: {
        content: {
          "application/json": components["schemas"]["maintenanceGetConstructFreeTrialAccountsForSales_200_response"];
        };
      };
      /** Bad Request */
      400: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Duplicated */
      409: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
      /** Internal Server Error */
      500: {
        content: {
          "application/json": components["schemas"]["Error"];
        };
      };
    };
  };
}

export interface external {}
