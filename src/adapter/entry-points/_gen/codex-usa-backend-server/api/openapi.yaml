openapi: 3.0.3
info:
  contact:
    name: Life is Tech! USA
  description: This provides APIs which used from basically codex_usa_frontend
  title: CodeX USA Backend
  version: 1.0.0
servers:
- url: https://api.stg.lit-lx.com
- url: https://stg.lit-lx.com
tags:
- name: authentication
- name: codex
- name: playerApi
- name: maintenance
paths:
  /login:
    post:
      operationId: postLogin
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  loginId: PFS0000001
                  password: d&fo1n@dl-1!
            schema:
              $ref: '#/components/schemas/postLogin_request'
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    user:
                      id: 1234-1234-1234-1234
                      accessToken: ffff-ffff-00001234
                      role: student
              schema:
                $ref: '#/components/schemas/postLogin_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: given ID/Password are incorrect
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Login with ID/Password and get access token
      tags:
      - authentication
      x-eov-operation-handler: controllers/AuthenticationController
  /no-credential-login:
    post:
      operationId: postNoCredentialLogin
      requestBody:
        content:
          application/json:
            schema:
              properties: {}
              type: object
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    user:
                      id: 1234-1234-1234-1234
                      accessToken: ffff-ffff-00001234
                      role: student
              schema:
                $ref: '#/components/schemas/postLogin_200_response'
          description: OK
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Login without ID/Password. This will make an anonymous user.
      tags:
      - authentication
      x-eov-operation-handler: controllers/AuthenticationController
  /clever/oauth/token:
    post:
      operationId: postCleverAuthenticate
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  code: be055f7b9d748811351a
                  grantType: authorization_code
                  redirectUri: http://localhost:3100
                  studentGroupId: student-group-id-1
                  organizationId: organization-id-1
            schema:
              $ref: '#/components/schemas/postCleverAuthenticate_request'
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    user:
                      id: 1234-1234-1234-1234
                      accessToken: ffff-ffff-00001234
                      role: student
              schema:
                $ref: '#/components/schemas/postCleverAuthenticate_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: error message.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get Clever user access token
      tags:
      - authentication
      x-eov-operation-handler: controllers/AuthenticationController
  /clever/roster-sync:
    get:
      description: This API provides get all the clever 's data' and add in codex
        database.
      operationId: getCleverRosterSync
      parameters:
      - explode: true
        in: query
        name: districtId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCleverRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view all the packages.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Clever's data and add in codex database.
      tags:
      - clever-roster-sync
      x-eov-operation-handler: controllers/CleverRosterSyncController
  /google/oauth/token:
    post:
      operationId: postGoogleAuthenticate
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  user:
                    id: 1234-1234-1234-1234
                    accessToken: ffff-ffff-00001234
                    role: student
            schema:
              $ref: '#/components/schemas/postGoogleAuthenticate_request'
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    user:
                      id: 1234-1234-1234-1234
                      accessToken: ffff-ffff-00001234
                      role: student
              schema:
                $ref: '#/components/schemas/postCleverAuthenticate_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: error message.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get google user access token
      tags:
      - authentication
      x-eov-operation-handler: controllers/AuthenticationController
  /class-link/oauth/token:
    post:
      operationId: postClassLinkAuthenticate
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  user:
                    id: 1234-1234-1234-1234
                    accessToken: ffff-ffff-00001234
                    role: student
            schema:
              $ref: '#/components/schemas/postClassLinkAuthenticate_request'
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    user:
                      id: 1234-1234-1234-1234
                      accessToken: ffff-ffff-00001234
                      role: student
              schema:
                $ref: '#/components/schemas/postCleverAuthenticate_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: error message.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get class-link user access token
      tags:
      - authentication
      x-eov-operation-handler: controllers/AuthenticationController
  /class-link/roster-sync:
    get:
      description: This API provides get all the classlink 's data' and add in codex
        database.
      operationId: getClasslinkRosterSync
      parameters:
      - explode: true
        in: query
        name: districtId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view all the packages.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Classlink's data and add in codex database.
      tags:
      - classlink-roster-sync
      x-eov-operation-handler: controllers/ClasslinkRosterSyncController
  /reset-password-request:
    post:
      description: "POST API call when administartor, lit, or teacher user want to\
        \ reset their password."
      operationId: postUserResetPasswordRequest
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  email: test@email.com
            schema:
              $ref: '#/components/schemas/postUserResetPasswordRequest_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid email:
                  value:
                    error: Invalid email is provided.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: Student can not change their password.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified user not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: User reset password request.
      tags:
      - authentication
      x-eov-operation-handler: controllers/AuthenticationController
  /reset-password:
    post:
      description: "POST API call when administartor, lit, or teacher user reset their\
        \ password."
      operationId: postResetPassword
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  token: user-token
                  password: d&fo1n@dl-1!
            schema:
              $ref: '#/components/schemas/postResetPassword_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Bad Request:
                  value:
                    error: Password cannot be blank
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The specified token is expired.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                token not found:
                  value:
                    error: The specified token not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: reset password.
      tags:
      - authentication
      x-eov-operation-handler: controllers/AuthenticationController
  /reset-password-request-resend:
    post:
      description: "POST API call when administartor, lit, or teacher user want to\
        \ resend reset password request."
      operationId: postUserResetPasswordRequestResend
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  token: ffff-ffff-00001234
            schema:
              $ref: '#/components/schemas/postUserResetPasswordRequestResend_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid token:
                  value:
                    error: Invalid token is provided.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                token not found:
                  value:
                    error: The specified token not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: User reset password request resend.
      tags:
      - authentication
      x-eov-operation-handler: controllers/AuthenticationController
  /users/{userId}/codeIllusionPackage:
    get:
      description: |-
        This API returns the CodeIllusionPacakges available to the specified user.
        If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
      operationId: getUsersUserIdCodeIllusionPackages
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    codeIllusionPackage:
                      id: package-id-1
                      level: basic
                      chapters:
                      - id: chapter-id
                        name: Chapter 1
                        title: Welcome to Technologia
                        circles:
                        - id: circle-id
                          course: basic
                          characterImageUrl: https://lit.com/character-image-1.png
                          clearedCharacterImageUrl: https://lit.com/character-image-1.png
                          gemLessonIds:
                          - lesson-id-1
                          - lesson-id-2
                          - lesson-id-3
                          bookLessonIds:
                          - lesson-id-4
                          - lesson-id-5
                          bookName: The Principal's Test
                          bookImageUrl: https://lit.com/book-image-1.png
              schema:
                $ref: '#/components/schemas/getUsersUserIdCodeIllusionPackages_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      user's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified user not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get User's CodeIllusion Packages
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /lessons:
    get:
      description: This API provides a list of Lesson definitions.
      operationId: getLessons
      parameters:
      - explode: true
        in: query
        name: lessonIds
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    lessons:
                    - id: lesson-id-1
                      url: https://player.lit.com/lesson/lesson-id-1
                      name: The Mouse Magic
                      lessonType: book
                      course: mediaArt
                      description: Learn how to input the mouse's movements using
                        the mouseX and mouseY functions.
                      thumbnailImageUrl: https://lit.com/thumbnail-image-1.png
                      lessonDuration: 3-8min
                      maxStarCount: 3
                    - id: lesson-id-2
                      url: https://player.lit.com/lesson/lesson-id-2
                      name: The Mouse Magic 2
                      lessonType: gem
                      course: gameDevelopment
                      description: Review mouse and circle variables as well as how
                        to add color. Learn how to use them with if statements.
                      thumbnailImageUrl: https://lit.com/thumbnail-image-2.png
                      lessonDuration: 3-8min
                      maxStarCount: 3
                    - id: lesson-id-3
                      url: https://player.lit.com/lesson/lesson-id-3
                      name: LESSON 1
                      lessonType: book
                      course: basic
                      description: "Learn how to use for statements to create many\
                        \ figures using short pieces of code, as well as how to connect\
                        \ it to your cursor."
                      thumbnailImageUrl: https://lit.com/thumbnail-image-3.png
                      lessonDuration: 3-8min
                      maxStarCount: 3
              schema:
                $ref: '#/components/schemas/getLessons_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                not found:
                  value:
                    error: lesson ids 0001 not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Lessons
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /users/{userId}/lessonStatuses:
    get:
      description: |-
        This API provides Lesson Statuses for the specified User.
        If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
      operationId: getUsersUserIdLessonStatuses
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: lessonIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    userLessonStatuses:
                    - lessonId: lesson-id-1
                      status: not_cleared
                      achievedStarCount: 2
                    - lessonId: lesson-id-2
                      status: not_cleared
                      achievedStarCount: 3
              schema:
                $ref: '#/components/schemas/getUsersUserIdLessonStatuses_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      user's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified user not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get User LessonStatuses
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /users/{userId}/settings:
    get:
      description: |-
        This API provides Settings for the specified User.
        If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
      operationId: getUserSettings
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    settings:
                      sound:
                        seVolume: 4
                        bgmVolume: 5
                        hintNarrationVolume: 0
                        serifNarrationVolume: 3
              schema:
                $ref: '#/components/schemas/getUserSettings_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      user's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified user not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get User Settings
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /users/{userId}/soundSettings:
    put:
      description: |-
        This API updates SoundSettings for the specified User.
        SoundSettings is the part of User's Settings.
        If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
      operationId: updateUserSoundSettings
      parameters:
      - explode: false
        in: path
        name: userId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              request body:
                value:
                  seVolume: 4
                  bgmVolume: 5
                  hintNarrationVolume: 0
                  serifNarrationVolume: 3
            schema:
              $ref: '#/components/schemas/UserSoundSettings'
        description: ""
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    soundSettings:
                      seVolume: 4
                      bgmVolume: 5
                      hintNarrationVolume: 0
                      serifNarrationVolume: 3
              schema:
                $ref: '#/components/schemas/updateUserSoundSettings_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      user's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified user not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Update User SoundSettings
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /user-package-assignments:
    delete:
      description: This API deletes the UserPackageAssignment which are assigned to
        the specified user.
      operationId: deleteUserPackageAssignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/deleteUserPackageAssignment_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteUserPackageAssignment_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete User Package Assignment
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    get:
      description: This API returns the UserPackageAssignment which are assigned to
        the specified user.
      operationId: getUserPackageAssignments
      parameters:
      - explode: true
        in: query
        name: userId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: packageId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getUserPackageAssignments_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified user not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get User Package Assignment
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    post:
      description: This API create the UserPackageAssignment.
      operationId: postUserPackageAssignment
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserPackageAssignment'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/postUserPackageAssignment_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "409":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: This user has the same category package already
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Create User Package Assignment
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /districts:
    get:
      description: |-
        This API provides all the Districts.
        If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
      operationId: getDistricts
      parameters:
      - explode: true
        in: query
        name: districtIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: LMSId
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: enabledRosterSync
        required: false
        schema:
          type: boolean
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    districts:
                    - id: district-1
                      name: District of Columbia
                      districtLMSId: null
                      lmsId: None
                      lastRosterSyncEventId: event-id-1
                      lastRosterSyncEventDate: 2022-05-29T16:07:41.835Z
                      enableRosterSync: false
                      stateId: AL
                      administrators: "admin@gmail.com,test@gmail.com"
                    - id: district-2
                      name: District of Florida
                      districtLMSId: 1
                      lmsId: Clever
                      lastRosterSyncEventId: event-id-2
                      lastRosterSyncEventDate: 2022-05-29T16:07:41.835Z
                      enableRosterSync: true
                      stateId: GL
                      administrators: "admin1@gmail.com,test1@gmail.com"
              schema:
                $ref: '#/components/schemas/getDistricts_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      district's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified district not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get All Districts
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /district:
    post:
      description: District POST API call when user want to add district in system.
      operationId: postDistrict
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  name: Florida District
                  lmsId: 1
                  districtLmsId: 10
            schema:
              $ref: '#/components/schemas/postDistrict_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the specified
                      district's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                district not found:
                  value:
                    error: The district information not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: District already exist
              schema:
                $ref: '#/components/schemas/Error'
          description: District already exist
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: District API POST
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /district/{districtId}:
    delete:
      description: Delete district
      operationId: deleteDistrict
      parameters:
      - explode: false
        in: path
        name: districtId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid district id..
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to delete the specified
                      district's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified district not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete district
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    get:
      description: This API gives the district by districtId.
      operationId: getDistrictByDistrictId
      parameters:
      - explode: false
        in: path
        name: districtId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/District'
          description: OK
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: Invalid format of districtId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Get District By districtId
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    put:
      description: District PUT API call when user want to edit district in system.
      operationId: putDistrict
      parameters:
      - explode: false
        in: path
        name: districtId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  name: Florida District
                  lmsId: 1
                  districtLmsId: 10
            schema:
              $ref: '#/components/schemas/putDistrict_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the specified
                      district's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                district not found:
                  value:
                    error: The specified district not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: District already exist
              schema:
                $ref: '#/components/schemas/Error'
          description: District already exist
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: District API PUT
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /district/{districtId}/administrators:
    get:
      description: This API provides a list of all the administrators.
      operationId: getAdministrators
      parameters:
      - explode: false
        in: path
        name: districtId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: administratorIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    administrators:
                      administrators:
                      - userId: "1"
                        districtId: "1"
                        administratorId: "1"
                        email: admin1@email.com
                        firstName: admin
                        lastName: one
                        administratorLMSId: "1"
                        createdUserId: "1"
                        createdDate: 02 oct 2022
                      - userId: "2"
                        districtId: "1"
                        administratorId: "1"
                        email: admin2@email.com
                        firstName: admin
                        lastName: two
                        administratorLMSId: "2"
                        createdUserId: "2"
                        createdDate: 02 oct 2022
                      - userId: "3"
                        districtId: "1"
                        administratorId: "1"
                        email: admin3@email.com
                        firstName: admin
                        lastName: three
                        administratorLMSId: "3"
                        createdUserId: "3"
                        createdDate: 02 oct 2022
              schema:
                $ref: '#/components/schemas/getAdministrators_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid request.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      administrator's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified district not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get All Administrators
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    post:
      operationId: postAdministrators
      parameters:
      - explode: false
        in: path
        name: districtId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: administratorIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  administrators:
                  - email: admin1@email.com
                    firstName: admin1_first_name
                    lastName: admin1_last_name
                    administratorLMSId: admin1_adminisitrator_lms_id
                  - email: admin2@email.com
                    firstName: admin2_first_name
                    lastName: admin2_last_name
                    administratorLMSId: admin2_adminisitrator_lms_id
                  - email: admin3@email.com
                    firstName: admin3_first_name
                    lastName: admin3_last_name
                    administratorLMSId: admin3_adminisitrator_lms_id
            schema:
              $ref: '#/components/schemas/postAdministrators_request'
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    message: ok
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error:
                    - index: 0
                      message:
                      - duplicateRecordsWithSameEmail
                      - userAlreadyExistWithEmail
                    - index: 2
                      message:
                      - duplicateRecordsWithSameEmail
                      - userAlreadyExistWithEmail
                      - emailInvalid
                      - emailNotProvided
              schema:
                $ref: '#/components/schemas/postAdministrators_400_response'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the administrators
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified district not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create administrators from the given email ids
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /administrator/{administratorId}:
    delete:
      description: delete an administrator
      operationId: deleteAdministrator
      parameters:
      - explode: false
        in: path
        name: administratorId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid request.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to delete an administrator
                      information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                admnistrator not found:
                  value:
                    error: The specified administrator not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Delete an administrator
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    put:
      description: Administrator PUT API call when user want to edit administrator
        in system.
      operationId: putAdministrator
      parameters:
      - explode: false
        in: path
        name: administratorId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  administrator:
                    email: admin1@email.com
                    firstName: admin
                    lastName: one
                    administratorLMSId: 1
            schema:
              $ref: '#/components/schemas/putAdministrator_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid request.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the specified
                      administrator's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                district not found:
                  value:
                    error: The specified administrator not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Administrator already exist
              schema:
                $ref: '#/components/schemas/Error'
          description: Administrator already exist
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Administrator API PUT
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /district/{districtId}/organizations:
    get:
      description: |-
        This API provides all the organizations.
        If the user pointed to by the token does not have permission to view the information for the specified userId, an error will occur.
      operationId: getOrganizations
      parameters:
      - explode: false
        in: path
        name: districtId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: organizationIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    organizations:
                    - id: organization-1
                      name: Sunrise
                      districtId: district-1
                      stateId: state-1
                      createdUserId: user-id-1
                      organizationLMSId: 1
                      createdDate: 2022-05-17T11:54:02.141Z
                      updatedDate: 2022-05-17T11:54:02.141Z
                    - id: Delta
                      name: organization 1
                      districtId: district-1
                      stateId: state-1
                      createdUserId: user-id-1
                      organizationLMSId: 1
                      createdDate: 2022-05-17T11:54:02.141Z
                      updatedDate: 2022-05-17T11:54:02.141Z
              schema:
                $ref: '#/components/schemas/getOrganizations_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      organization's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get All Organizations
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /organization:
    post:
      description: Organization POST API call when user want to add organization in
        system.
      operationId: postOrganization
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  name: Sunrise
                  districtId: district-1
                  stateId: state-1
            schema:
              $ref: '#/components/schemas/postOrganization_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add organization
                      information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "409":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: organization already exist.
              schema:
                $ref: '#/components/schemas/Error'
          description: given organization already exist in same district
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Organization API POST
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /organization/{organizationId}:
    delete:
      description: Organization DELETE API call when user want to delete organization
        in system.
      operationId: deleteOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid Organization id..
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to delete the specified
                      organization
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                organization not found:
                  value:
                    error: The specified organization not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete Organization
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    put:
      description: Organization PUT API call when user want to edit organization information
        in system.
      operationId: putOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  name: Sunrise
                  districtId: district-1
                  stateId: state-1
            schema:
              $ref: '#/components/schemas/postOrganization_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid request.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to edit the specified
                      organization information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                organization not found:
                  value:
                    error: The specified organization not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Organization already exist in same district
              schema:
                $ref: '#/components/schemas/Error'
          description: Organization already exist in same district
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Organization API PUT
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /organization/{organizationId}/student-groups:
    get:
      description: |-
        This API provides the student groups based on organizationId
        If the user pointed to by the token does not have permission to view the information for the specified student groups, an error will occur.
      operationId: getStudentGroups
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    studentgroups:
                    - id: student-group-1
                      organizationId: organization-id-1
                      name: FL Group
                      grade: grade1
                      studentGroupLmsId: student-group-lms-id-1
                      createdUserId: user-id-1
                      updatedUserId: user-id-1
                      createdDate: 2022-05-17T11:54:02.141Z
                      updatedDate: 2022-05-17T11:54:02.141Z
                    - id: student-group-2
                      organizationId: organization-id-2
                      name: HL Group
                      grade: grade1
                      studentGroupLmsId: student-group-lms-id-1
                      createdUserId: user-id-1
                      updatedUserId: user-id-1
                      createdDate: 2022-05-17T11:54:02.141Z
                      updatedDate: 2022-05-17T11:54:02.141Z
              schema:
                $ref: '#/components/schemas/getStudentGroups_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid organizationId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      student groups's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified student group not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Student Groups based on organizationId
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /organization/{organizationId}/student-group:
    post:
      description: Student Group POST API call when user want to add student group
        in system.
      operationId: postStudentGroup
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  name: Fl Group
                  packageId: package-id-1
                  grade: grade1
                  studentGroupLmsId: 1
            schema:
              $ref: '#/components/schemas/postStudentGroup_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid organizationId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the specified
                      student group's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                district not found:
                  value:
                    error: The organization information not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Student Group already exist
              schema:
                $ref: '#/components/schemas/Error'
          description: Student Group already exist
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Student Group API POST
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /organization/{organizationId}/district-lms-information:
    get:
      description: This API provides the district lms information based on organizationId.
      operationId: getDistrictLMSInformationByOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDistrictLMSInformationByOrganization_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid format of organizationId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "404":
          content:
            application/json:
              examples:
                district not found:
                  value:
                    error: The specified organization district not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred.
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get district lms information based on organizationId
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student-group/{studentGroupId}:
    delete:
      description: Delete Student Group
      operationId: deleteStudentGroup
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid studentGroup id.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to delete the specified
                      student group's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified student group not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete Student Group
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    put:
      description: Student Group PUT API call when user want to edit student group
        in system.
      operationId: putStudentGroup
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  name: Fl Group
                  packageId: package-id-1
                  grade: grade1
                  studentGroupLmsId: 1
            schema:
              $ref: '#/components/schemas/putStudentGroup_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid studentGroupId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the specified
                      student group's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                student group not found:
                  value:
                    error: The student group information not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Student Group already exist
              schema:
                $ref: '#/components/schemas/Error'
          description: Student Group already exist
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Student Group API PUT
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student-group/{studentGroupId}/codeillusion-packages:
    get:
      operationId: getPackageDetailsByStudentGroupId
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getPackageDetailsByStudentGroupId_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: Invalid studentGroupId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view all the packages.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The package not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something went wrong.
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get package details from studentGroupId.
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student-group/{studentGroupId}/students:
    get:
      description: This API provides the students based on studentGroupId.
      operationId: getStudents
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: studentIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      - explode: true
        in: query
        name: name
        required: false
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: option
        required: false
        schema:
          default: In
          enum:
          - NotIn
          - In
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    students:
                    - id: student-1
                      userId: user-id-8
                      nickName: Parth
                      loginId: parth123
                      studentLMSId: lms-1
                      email: parth@gmail.com
                      emailToNotify:
                      - parth@gmail.com
                      - parekh@gmail.com
                      createdUserName: user-name-1
                      studentGroupCount: 2
                      studentGroup: "Student-group-1,Student-group-2"
                      createdDate: 2022-05-17T11:54:02.141Z
                    - id: student-2
                      userId: user-id-9
                      nickName: Parekh
                      loginId: parekh123
                      studentLMSId: lms-2
                      email: parekh@gmail.com
                      emailToNotify:
                      - parekh@gmail.com
                      createdUserName: user-name-1
                      createdDate: 2022-05-17T11:54:02.141Z
                      studentGroupCount: 1
                      studentGroup: Student-group-1
              schema:
                $ref: '#/components/schemas/getStudents_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: Invalid studentGroupId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      student's information.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                student group not found:
                  value:
                    error: The specified student group not found.
                administrator not found:
                  value:
                    error: administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Students API
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    post:
      operationId: postStudents
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  students:
                  - nickName: parth
                    loginId: login-id-1
                    password: parth@123
                    studentLMSId: lms-id-1
                    email: parth@gmail.com
                    emailsToNotify:
                    - parth@gmail.com
                    - parekh@gmail.com
                  - nickName: chirag
                    loginId: login-id-2
                    password: chirag@123
                    email: chirag@gmail.com
                    studentLMSId: lms-id-2
                    emailsToNotify:
                    - chirag@gmail.com
                    - patel@gmail.com
            schema:
              $ref: '#/components/schemas/postStudents_request'
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    message: ok
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error:
                    - index: 0
                      message:
                      - duplicateRecordsWithSameLoginId
                      - duplicateRecordsWithStudentLMSId
                    - index: 2
                      message:
                      - invalidEmail
                      - loginIdAlreadyExists
                      - loginIdNotProvided
                      - nickNameNotProvided
                      - emptyPassword
              schema:
                $ref: '#/components/schemas/postStudents_400_response'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the students.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                student group not found:
                  value:
                    error: The specified student group not found.
                administrator not found:
                  value:
                    error: administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Student API POST
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student-group/{studentGroupId}/students/{studentId}:
    delete:
      description: DELETE API call when user Internal Operator or Administrator want
        to remove the student from studentGroup.
      operationId: deleteStudentFromStudentGroup
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: studentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid studentGroupId:
                  value:
                    error: Invalid studentGroupId.
                Invalid studentId:
                  value:
                    error: Invalid studentId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to delete the specified
                      student from student-group.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                student group not found:
                  value:
                    error: The specified student group not found.
                student not found:
                  value:
                    error: The specified student not found in student group.
                administrator not found:
                  value:
                    error: administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: This API remove student in studentgroup
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    post:
      description: This API add existing student to student group
      operationId: postStudentInStudentGroup
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: studentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    message: ok
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid studentGroupId:
                  value:
                    error: Invalid studentGroupId.
                Invalid studentId:
                  value:
                    error: Invalid studentId.
              schema:
                $ref: '#/components/schemas/Error'
          description: invalid studentGroupId
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the student.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                student group not found:
                  value:
                    error: The specified student group not found.
                student not found:
                  value:
                    error: The specified student not found.
                administrator not found:
                  value:
                    error: administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                already exists:
                  value:
                    error: Student already exists in same student group.
              schema:
                $ref: '#/components/schemas/Error'
          description: Student already exist
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Student API POST
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student/{studentId}:
    delete:
      description: Student DELETE API call when user want to delete student in system.
      operationId: deleteStudent
      parameters:
      - explode: false
        in: path
        name: studentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Invalid student id..
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to delete the specified
                      student.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                student not found:
                  value:
                    error: The specified student not found.
                administrator not found:
                  value:
                    error: administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete Student
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    put:
      description: Student PUT API call when user want to edit student information
        in system.
      operationId: putStudent
      parameters:
      - explode: false
        in: path
        name: studentId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  nickName: parth
                  loginId: login-id-1
                  password: parth@123
                  studentLMSId: lms-id-1
                  email: parth@gmail.com
                  emailsToNotify:
                  - parth@gmail.com
                  - parekh@gmail.com
            schema:
              $ref: '#/components/schemas/putStudent_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: Invalid studentId.
                invalid student attributes:
                  value:
                    error: "invalidEmail,duplicateEmail,atLeastOneFieldIsMandatory,nickNameNotProvided"
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to edit the specified
                      student information.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                student not found:
                  value:
                    error: The specified student not found.
                administrator not found:
                  value:
                    error: administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                already exists:
                  value:
                    error: "loginIdAlreadyExists,studentLMSIdAlreadyExists,userAlreadyExistWithEmail"
              schema:
                $ref: '#/components/schemas/Error'
          description: student already exist
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Student API PUT
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /organization/{organizationId}/teachers:
    get:
      description: This API provides the teachers based on organizationId
      operationId: getTeachers
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: teacherIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    teachers:
                    - id: teacher-1
                      email: teacher1@email.com
                      firstName: teacher_first_name_1
                      lastName: teacher_last_name_1
                      teacherLMSId: teacher_lms_id_1
                      createddUserName: user_name_1
                      createdDate: 2022-05-17T11:54:02.141Z
                    - id: teacher-2
                      email: teacher2@email.com
                      firstName: teacher_first_name_2
                      lastName: teacher_last_name_2
                      teacherLMSId: teacher_lms_id_2
                      createddUserName: user_name_2
                      createdDate: 2022-05-17T11:54:02.141Z
              schema:
                $ref: '#/components/schemas/getTeachers_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid organizationId:
                  value:
                    error: Invalid organizationId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      teacher information.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                organization not found:
                  value:
                    error: The specified organization not found.
                teacher not found:
                  value:
                    error: The specified teacher not found.
                failed to get organization:
                  value:
                    error: Failed to getOrganization.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred.
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Teachers based on organizationId
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    post:
      operationId: postTeachers
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: teacherIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  teachers:
                  - email: teacher1@email.com
                    firstName: teacher_first_name_1
                    lastName: teacher_last_name_1
                    teacherLMSId: teacher_lms_id_1
                    password: teacher_password_1
                  - email: teacher2@email.com
                    firstName: teacher_first_name_2
                    lastName: teacher_last_name_2
                    teacherLMSId: teacher_lms_id_2
                    password: teacher_password_2
                  - email: teacher3@email.com
                    firstName: teacher_first_name_3
                    lastName: teacher_last_name_3
                    teacherLMSId: teacher_lms_id_3
                    password: teacher_password_3
            schema:
              $ref: '#/components/schemas/postTeachers_request'
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    message: ok
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                badRequest:
                  value:
                    error:
                    - index: 0
                      message:
                      - duplicateRecordsWithSameEmail
                      - userAlreadyExistWithEmail
                    - index: 2
                      message:
                      - duplicateRecordsWithSameEmail
                      - userAlreadyExistWithEmail
                      - emailInvalid
                      - emailNotProvided
                      - emptyPassword
                Invalid organizationId:
                  value:
                    error: Invalid organizationId.
              schema:
                $ref: '#/components/schemas/postTeachers_400_response'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the teachers.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                organization not found:
                  value:
                    error: The specified organization not found.
                administrator not found:
                  value:
                    error: The specified administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create teachers
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /teacher/{teacherId}:
    delete:
      description: delete an teacher
      operationId: deleteTeacher
      parameters:
      - explode: false
        in: path
        name: teacherId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid teacherId:
                  value:
                    error: Invalid teacherId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to delete an teacher.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                teacher not found:
                  value:
                    error: The specified teacher not found.
                administrator not found:
                  value:
                    error: The specified administrator not found.
                failed to get district administrators:
                  value:
                    error: Failed to getDistrictAdministrator.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred.
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Delete an teacher
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    get:
      description: This API gives  the teacher's basic details and it's organization's
        details.
      operationId: getTeacherOrganizations
      parameters:
      - explode: false
        in: path
        name: teacherId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher_Organization'
          description: OK
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: Invalid teacherId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to GET the specified
                      teacher's information.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                student not found:
                  value:
                    error: The specified teacher not found.
                administrator not found:
                  value:
                    error: administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Get Teacher's Organizations
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    put:
      description: Teacher PUT API call when user want to edit teacher in system.
      operationId: putTeacher
      parameters:
      - explode: false
        in: path
        name: teacherId
        required: true
        schema:
          type: string
        style: simple
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  teacher:
                    email: teacher1@email.com
                    firstName: teacher_first_name_1
                    lastName: teacher_last_name_1
                    teacherLMSId: teacher_lms_id_1
                    password: teacher_password_1
            schema:
              $ref: '#/components/schemas/putTeacher_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid teacherId:
                  value:
                    error: Invalid teacherId.
                Invalid email:
                  value:
                    error: Invalid email is provided.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to edit the specified
                      teacher information.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                teacher not found:
                  value:
                    error: The specified teacher not found.
                administrator not found:
                  value:
                    error: The specified administrator not found.
                failed to get district administrators:
                  value:
                    error: Failed to getDistrictAdministrator.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Email already exists:
                  value:
                    error: This email is already exist.
              schema:
                $ref: '#/components/schemas/Error'
          description: Email already associate with the Teacher.
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred.
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Teacher API PUT
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /organization/{organizationId}/teacher/{teacherId}:
    delete:
      description: DELETE API call when user(Internal Operator/Administrator) want
        to remove the teacher from organization.
      operationId: deleteTeacherFromOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: teacherId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid organizationId:
                  value:
                    error: Invalid organizationId.
                Invalid teacherId:
                  value:
                    error: Invalid teacherId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to remove the specified
                      teacher from organization.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                organization not found:
                  value:
                    error: The specified organization not found.
                teacher not found:
                  value:
                    error: The specified teacher not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Remove the teacher from organization
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    post:
      description: POST API call when user want to add teacher into organization.
      operationId: postTeacherInOrganization
      parameters:
      - explode: false
        in: path
        name: organizationId
        required: true
        schema:
          type: string
        style: simple
      - explode: false
        in: path
        name: teacherId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid organizationId:
                  value:
                    error: Invalid organizationId.
                Invalid teacherId:
                  value:
                    error: Invalid teacherId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to add the specified
                      teacher into organization.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                organization not found:
                  value:
                    error: The specified organization not found.
                teacher not found:
                  value:
                    error: The specified teacher not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                Teacher already exists:
                  value:
                    error: Teacher already associate with the Organization.
              schema:
                $ref: '#/components/schemas/Error'
          description: Teacher already associate with the Organization.
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Add teacher into organization
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student-group/{studentGroupId}/unaccessible-lesson:
    delete:
      description: Delete API call when teacher / internal operator / district administrator
        want to remove restrict lesson access to their student group.
      operationId: deleteStudentGroupUnaccessibleLesson
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: lessonIds
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid studentGroupId:
                  value:
                    error: Invalid studentGroupId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to remove restrict lesson
                      access for student group.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                studentGroup not found:
                  value:
                    error: The specified student group not found.
                lesson not found:
                  value:
                    error: The specified lesson not found.
                user not found:
                  value:
                    error: The specified user not found.
                administrator not found:
                  value:
                    error: The specified administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Remove restrict lessons from student group.
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
    post:
      description: POST API call when teacher want to restrict lesson access to their
        student group.
      operationId: postStudentGroupUnaccessibleLesson
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: lessonIds
        required: true
        schema:
          items:
            type: string
          type: array
        style: form
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  packageId: package-id-1
            schema:
              $ref: '#/components/schemas/postStudentGroupUnaccessibleLesson_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid studentGroupId:
                  value:
                    error: Invalid studentGroupId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to restrict lesson access
                      to provided student group.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                studentGroup not found:
                  value:
                    error: The specified student group not found.
                lesson not found:
                  value:
                    error: The specified lesson not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "409":
          content:
            application/json:
              examples:
                already disable:
                  value:
                    error: The specified lesson is already disable for provided student
                      group.
              schema:
                $ref: '#/components/schemas/Error'
          description: Specified lesson already disable for student group
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Restrict lesson to student.
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student-group/{studentGroupId}/unaccessible-lessons:
    get:
      description: Get API call when teacher / internal operator / district administrator
        want to view restrict lesson access to their student group.
      operationId: getUnaccessibleLessons
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    unaccessibleLessons:
                    - studentGroupId: student-group-id-1
                      packageId: package-id-1
                      lessonId: lesson-id-1
                      createdUserId: user-id-1
                      createdDate: 2022-05-17T11:54:02.141Z
                    - studentGroupId: student-group-id-1
                      packageId: package-id-2
                      lesonId: lesson-id-1
                      createdUserId: user-id-2
                      createdDate: 2022-05-17T11:54:02.141Z
              schema:
                $ref: '#/components/schemas/getUnaccessibleLessons_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid studentGroupId:
                  value:
                    error: Invalid studentGroupId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view restrict lesson
                      access for student group.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                studentGroup not found:
                  value:
                    error: The specified student group not found.
                lesson not found:
                  value:
                    error: The specified lesson not found.
                user not found:
                  value:
                    error: The specified user not found.
                administrator not found:
                  value:
                    error: The specified administrator not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something went wrong.
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get unaccessible lessons based on student group
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student-group/{studentGroupId}/lesson-statuses:
    get:
      description: GET API call when teacher / internal operator / district administrator
        want to view lesson statuses for student group.
      operationId: getStudentGroupLessonStatuses
      parameters:
      - explode: false
        in: path
        name: studentGroupId
        required: true
        schema:
          type: string
        style: simple
      - explode: true
        in: query
        name: lessonIds
        required: false
        schema:
          items:
            type: string
          type: array
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    studentGroupLessonStatuses:
                    - userId: user-id-1
                      lessonId: lesson-id-1
                      status: not_cleared
                      achievedStarCount: 2
                      usedHintCount: 1
                      correctAnsweredQuizCount: 1
                      stepIdskippingDetected: true
                      startedAt: 2022-05-17T11:54:02.141Z
                      finishedAt: 2022-05-17T11:54:02.141Z
                    - userId: user-id-2
                      lessonId: lesson-id-2
                      status: not_cleared
                      achievedStarCount: 3
                      usedHintCount: 1
                      correctAnsweredQuizCount: 1
                      stepIdskippingDetected: true
                      startedAt: 2022-05-17T11:54:02.141Z
                      finishedAt: 2022-05-17T11:54:02.141Z
              schema:
                $ref: '#/components/schemas/getStudentGroupLessonStatuses_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid studentGroupId:
                  value:
                    error: Invalid studentGroupId.
                Invalid lessonId:
                  value:
                    error: Invalid lessonId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view lesson statuses
                      for student group id.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                studentGroup not found:
                  value:
                    error: The specified student group not found.
                user not found:
                  value:
                    error: The specified user not found.
                administrator not found:
                  value:
                    error: The specified administrator not found.
                lesson statuses not found:
                  value:
                    error: The specified lesson statuses not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something went wrong
              schema:
                $ref: '#/components/schemas/getStudentGroupLessonStatuses_500_response'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get lesson statuses for student group.
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /me:
    get:
      operationId: getLoggedInUser
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    user:
                      id: user-id
                      email: user1@email.com
                      Role: teacher
                      loginId: login-id-1
                    administrator:
                      id: administrator-id
                      userId: user-id
                      firstName: administrator_first_name_1
                      lastName: administrator_last_name_1
                      administratorLMSId: administrator_lms_id_1
                    teacher:
                      id: teacher-id
                      userId: user-id
                      firstName: teacher_first_name_1
                      lastName: teacher_last_name_1
                      teacherLMSId: teacher_lms_id_1
                    student:
                      id: student-id
                      userId: user-id
                      nickName: student_nick_name
                      studentLMSId: student_lms_id_1
              schema:
                $ref: '#/components/schemas/LoggedInUser'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The user not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something went wrong.
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get my details
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /user-lesson-status:
    post:
      description: This POST API call when user start the any lesson.
      operationId: postUserLessonStatus
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  lessonId: lesson-id-1
            schema:
              $ref: '#/components/schemas/postUserLessonStatus_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                lesson not found:
                  value:
                    error: The specified lesson not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: User Lesson Status API POST
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /codex-packages:
    get:
      operationId: getAllPackages
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getAllPackages_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view all the packages.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something went wrong.
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all the packages availaible in codex
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /district/{districtId}/district-purchased-packages:
    get:
      operationId: getDistrictPurchasedPackagesByDistrictId
      parameters:
      - explode: false
        in: path
        name: districtId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDistrictPurchasedPackagesByDistrictId_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: Invalid format of districtId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view district purchased
                      packages.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                district not found:
                  value:
                    error: The specified district not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something went wrong.
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get all district purchased packages
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /standard-mappings:
    get:
      description: This API provides standard-mapping information of state.
      operationId: getStandardMapping
      parameters:
      - explode: true
        in: query
        name: stateId
        required: false
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    standardMappings:
                    - stateId: state-1
                      gradeBand:
                      - band: 9-12
                        standardDomain:
                        - standard: R1
                          domain: "Safety, Privacy, and Security"
                          description: "Identify, demonstrate, and apply personal\
                            \ safe use of digital devices."
                          disneyCodeillusionLesson:
                          - Principal | Gems 1-5
                          - "Mickey | Gems 1-3, Book 1"
                          - "Donald | Gems 1-4, Book 1"
                          - "Goofy | Gems 1-4, Book 1"
                          - "Tangled | Gems 1-4, Book 1"
                        - standard: R2
                          domain: Legal and Ethical Behavior
                          description: Recognize and demonstrate age-appropriate responsible
                            use of digital devices and resources as outlined in school/district
                            rules.
                          disneyCodeillusionLesson:
                          - Principal | Gems 1-5
                          - "Mickey | Gems 1-3, Book 1"
                          - "Donald | Gems 1-4, Book 1"
                          - "Goofy | Gems 1-4, Book 1"
                          - "Tangled | Gems 1-4, Book 1"
                      - band: 6
                        standardDomain:
                        - standard: R1
                          domain: "Safety, Privacy, and Security"
                          description: "Identify, demonstrate, and apply personal\
                            \ safe use of digital devices."
                          disneyCodeillusionLesson:
                          - Principal | Gems 1-5
                          - "Mickey | Gems 1-3, Book 1"
                          - "Donald | Gems 1-4, Book 1"
                          - "Goofy | Gems 1-4, Book 1"
                          - "Tangled | Gems 1-4, Book 1"
                        - standard: R2
                          domain: Legal and Ethical Behavior
                          description: Recognize and demonstrate age-appropriate responsible
                            use of digital devices and resources as outlined in school/district
                            rules.
                          disneyCodeillusionLesson:
                          - Principal | Gems 1-5
                          - "Mickey | Gems 1-3, Book 1"
                          - "Donald | Gems 1-4, Book 1"
                          - "Goofy | Gems 1-4, Book 1"
                          - "Tangled | Gems 1-4, Book 1"
                          cse:
                          - Unit 1 Lesson 5
              schema:
                $ref: '#/components/schemas/getStandardMapping_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to see standard mapping
                      informations.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get standard-mapping information based on state
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /{studentId}/unaccessible-lesson:
    get:
      description: Get API call when user want to view restricted lesson.
      operationId: getStudentUnaccessibleLessons
      parameters:
      - explode: false
        in: path
        name: studentId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    unaccessibleLessons:
                    - lesson-id-1
                    - lesson-id-2
                    - lesson-id-3
              schema:
                $ref: '#/components/schemas/getStudentUnaccessibleLessons_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid studentId:
                  value:
                    error: Invalid studentId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view restricted lesson.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The user not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something went wrong.
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get student unaccessible lessons
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /student-group-package-assignments:
    get:
      description: This API provides the StudentGroupPackageAssignments based on queries
      operationId: getStudentGroupPackageAssignments
      parameters:
      - explode: true
        in: query
        name: studentGroupId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStudentGroupPackageAssignments_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The token does not have permission to view the specified
                      student groups's information
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Student Groups Package Assignment based on queries
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /codeIllusionPackage:
    get:
      operationId: getCodeIllusionPackage
      parameters:
      - explode: true
        in: query
        name: packageId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    codeIllusionPackage:
                      id: package-id-1
                      level: basic
                      chapters:
                      - id: chapter-id
                        name: Chapter 1
                        title: Welcome to Technologia
                        circles:
                        - id: circle-id
                          course: basic
                          characterImageUrl: https://lit.com/character-image-1.png
                          clearedCharacterImageUrl: https://lit.com/character-image-1.png
                          gemLessonIds:
                          - lesson-id-1
                          - lesson-id-2
                          - lesson-id-3
                          bookLessonIds:
                          - lesson-id-4
                          - lesson-id-5
                          bookName: The Principal's Test
                          bookImageUrl: https://lit.com/book-image-1.png
              schema:
                $ref: '#/components/schemas/getUsersUserIdCodeIllusionPackages_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view the codeIllusion
                      package
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified package not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get CodeIllusion Package
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /cse-packages/{packageId}:
    get:
      operationId: getCsePackage
      parameters:
      - explode: false
        in: path
        name: packageId
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getCsePackage_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified package not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get Cse Package
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /change-password:
    put:
      description: "PUT API call when teacher,administrator or internal operator want\
        \ to change their password."
      operationId: putChangePassword
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  newPassword: new_password_1
            schema:
              $ref: '#/components/schemas/putChangePassword_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid email:
                  value:
                    error: password can not be empty.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The token is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to change their password.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The user information not found.
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /district-roster-sync-statuses:
    get:
      description: This API provides roster sync status of district.
      operationId: getDistrictRosterSyncStatus
      parameters:
      - explode: true
        in: query
        name: districtId
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getDistrictRosterSyncStatus_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                Invalid districtId:
                  value:
                    error: Invalid format of districtId.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: The user is not authorized.
              schema:
                $ref: '#/components/schemas/Error'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                forbidden:
                  value:
                    error: The user does not have permission to view roster sync status.
              schema:
                $ref: '#/components/schemas/Error'
          description: Forbidden
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Get roster sync status of district.
      tags:
      - codex
      x-eov-operation-handler: controllers/CodexController
  /player_api/check_token:
    get:
      description: "Lesson Player calls this API once at startup, verifying that the\
        \ Bearer token is valid. If not, returning a redirect url."
      operationId: getCheckToken
      parameters:
      - explode: false
        in: header
        name: authentication
        required: false
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              examples:
                authorized:
                  value:
                    result: valid
                    isAccessible: true
                    name: Bob
              schema:
                $ref: '#/components/schemas/getCheckToken_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    result: invalid
                    isAccessible: false
                    redirect_url: https://www.yahoo.com
              schema:
                $ref: '#/components/schemas/getCheckToken_401_response'
          description: Unauthorized
        "500":
          content:
            application/json:
              examples:
                authorized:
                  value:
                    result: valid
                    isAccessible: true
                    name: Bob
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Lesson Player API GET /check_token
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/player_setting:
    get:
      description: "The Lesson Player calls this API once at startup, and the return\
        \ value contains a variety of information that can be used to change the behavior\
        \ of the Lesson Player."
      operationId: getPlayersSetting
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    language: us
                    log_level: development
                    header_user_icon_name: string
                    login_status: "yes"
                    my_page_url: string
                    player_name: string
                    header_appearance:
                      show_user_icon: true
                      show_menu: true
                      show_login_status: true
                    sound_volume:
                      bgm: 0
                      se: 2
                      serif_talk: 5
                      hint_talk: 0
                    custom_items: []
              schema:
                $ref: '#/components/schemas/getPlayersSetting_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    login_status: "no"
              schema:
                $ref: '#/components/schemas/getPlayersSetting_401_response'
          description: Unauthorized
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Lesson Player API GET /player_setting
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/server_status:
    get:
      description: The Lesson Player expects the "isMaintenance" flag to always be
        false.
      operationId: getPlayersServerStatus
      responses:
        "200":
          content:
            application/json:
              examples:
                when be in mantainance:
                  value:
                    isMaintenance: true
              schema:
                $ref: '#/components/schemas/getPlayersServerStatus_200_response'
          description: OK
      summary: Lesson Player API GET /server_status
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/action_log:
    post:
      description: The Lesson Player calls this API once for action log
      operationId: postActionLog
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  log:
                    event_name: stepPassed
                    project_name: donald
                    scenario_path: lesson/g_donald_1
                    step_id: "10"
            schema:
              $ref: '#/components/schemas/postActionLog_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    login_status: "no"
              schema:
                $ref: '#/components/schemas/getPlayersSetting_401_response'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified lesson for scenario_path and project_name
                      not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Lesson Player API POST /action_log
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/step_passed:
    post:
      description: The Lesson Player calls this API once for each step completed;
        it stores the information on the BACKEND side and returns nothing. It always
        succeeds.
      operationId: postStepPassed
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  project_name: donald
                  scenario_path: lesson/g_donald_1
                  step_id: "10"
            schema:
              $ref: '#/components/schemas/postStepPassed_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    login_status: "no"
              schema:
                $ref: '#/components/schemas/getPlayersSetting_401_response'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified lesson for scenario_path and project_name
                      not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Lesson Player API POST /step_passed
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/quiz_answered:
    post:
      description: The Lesson Player calls this API once for each step completed;
        it stores the information on the BACKEND side and returns nothing. It always
        succeeds.
      operationId: postQuizAnswered
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  project_name: donald
                  scenario_path: lesson/g_donald_1
                  step_id: "10"
            schema:
              $ref: '#/components/schemas/postQuizAnswered_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getClasslinkRosterSync_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    login_status: "no"
              schema:
                $ref: '#/components/schemas/getPlayersSetting_401_response'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified lesson for scenario_path and project_name
                      not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Lesson Player API POST /quiz_answered
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/lesson_setting:
    get:
      description: The Lesson Player calls this API once at the start of each lesson.
        The display of the editor screen changes according to the returned value.
      operationId: getLessonsSetting
      parameters:
      - explode: true
        in: query
        name: scenario_path
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: project_name
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          content:
            application/json:
              examples:
                success:
                  value:
                    isAccessible: true
                    cleared: true
                    redirecetUrl: string
                    passed_step_id_list:
                    - 0
                    - 1
                    - 2
                    - 3
                    - 4
              schema:
                $ref: '#/components/schemas/getLessonsSetting_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    isAccessible: false
                    redirectUrl: https://google.com
              schema:
                $ref: '#/components/schemas/getLessonsSetting_401_response'
          description: Unauthorized
        "403":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    isAccessible: false
                    redirectUrl: https://google.com
              schema:
                $ref: '#/components/schemas/getLessonsSetting_401_response'
          description: Forbidden
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified scenario_path and project_name not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Lesson Player API GET /lesson_setting
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/lesson_finished:
    post:
      description: Lesson Player calls this API at the end of each lesson. It moves
        to the specified destination according to the return value.
      operationId: postLessonFinished
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  project_name: donald
                  scenario_path: lesson/b_donald_1
                  finish_status:
                    quiz_all_answered: true
                    no_hint_cleared: true
                    no_status_up: true
            schema:
              $ref: '#/components/schemas/postLessonFinished_request'
        description: ""
      responses:
        "200":
          content:
            application/json:
              examples:
                '"type" is "full_url"':
                  value:
                    type: full_url
                    value: http://www.yahoo.co.jp
              schema:
                $ref: '#/components/schemas/postLessonFinished_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    login_status: "no"
              schema:
                $ref: '#/components/schemas/postLessonFinished_401_response'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified scenario_path and project_name not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Lesson Player API POST /lesson_finished (This updates LessonStatus
        actually)
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/lesson_cleared:
    post:
      description: Lesson Player calls this API at the end of each lesson. It moves
        to the specified destination according to the return value.
      operationId: postLessonCleared
      requestBody:
        content:
          application/json:
            examples:
              success:
                value:
                  project_name: donald
                  scenario_path: lesson/b_donald_1
                  finish_status:
                    quiz_all_answered: true
                    no_hint_cleared: true
                    no_status_up: true
            schema:
              $ref: '#/components/schemas/postLessonFinished_request'
        description: ""
      responses:
        "200":
          content:
            application/json:
              examples:
                Success:
                  value:
                    stars:
                      to:
                        cleared: true
                        noHintCleared: true
                        quizAllAnswered: false
                      from:
                        cleared: true
                        noHintCleared: false
                        quizAllAnswered: false
                    status:
                      to:
                        totalStarNum: 0
                        tp: 0
                        nickname: user
                        coins: 0
                        designation:
                          label: Average Wizard
                          rank: 0
                          name: certified2
                          requiredTp: 0
                        courseLevel: []
                        currentChapterName: "8"
                      from:
                        totalStarNum: 0
                        tp: 0
                        nickname: user
                        coins: 0
                        designation:
                          label: Average Wizard
                          rank: 0
                          name: certified2
                          requiredTp: 0
                        courseLevel: []
                        currentChapterName: "8"
                      levelTable:
                        mediaArt:
                          "0": 0
                        basic:
                          "0": 0
                        webDesign:
                          "0": 0
                        game:
                          "0": 0
                      rankTable:
                        label:
                          "0": Average Wizard
                        tp:
                          "0": 0
              schema:
                $ref: '#/components/schemas/postLessonCleared_200_response'
          description: OK
        "401":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    login_status: "no"
              schema:
                $ref: '#/components/schemas/postLessonFinished_401_response'
          description: Unauthorized
        "404":
          content:
            application/json:
              examples:
                user not found:
                  value:
                    error: The specified scenario_path and project_name not found
              schema:
                $ref: '#/components/schemas/Error'
          description: Not Found
        "500":
          content:
            application/json:
              examples:
                internal error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/postUserResetPasswordRequest_500_response'
          description: Internal Server Error
      summary: Lesson Player API POST /lesson_cleared (This updates LessonStatus actually)
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/after_lesson_cleared:
    get:
      description: Lesson Player calls this API at the end of each lesson. It moves
        to the specified destination according to the return value.
      operationId: getAfterLessonCleared
      responses:
        "200":
          content:
            application/json:
              examples:
                '"type" is "full_url"':
                  value:
                    type: full_url
                    value: http://www.yahoo.co.jp
              schema:
                $ref: '#/components/schemas/postLessonFinished_200_response'
          description: OK
      summary: Lesson Player API GET /after_lesson_cleared (This updates LessonStatus
        actually)
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /player_api/lesson_sheet_changed:
    post:
      operationId: postLessonSheetChanged
      parameters:
      - explode: true
        in: query
        name: lessonName
        required: true
        schema:
          type: string
        style: form
      responses:
        "200":
          description: OK
        "500":
          description: Internal Server Error
      security:
      - BearerAuth: []
      summary: Lesson Player API POST /lesson_sheet_changed
      tags:
      - playerApi
      x-eov-operation-handler: controllers/PlayerApiController
  /churnzero/token:
    get:
      operationId: getChurnZeroAuthentication
      parameters:
      - explode: true
        in: query
        name: account-external-id
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: contact-external-id
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: next
        required: true
        schema:
          type: string
        style: form
      responses:
        "302":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getChurnZeroAuthentication_302_response'
          description: Redirects to success center auth callback url
        "400":
          content:
            application/json:
              examples:
                unauthorized:
                  value:
                    error: Query parameter values are incorrect.
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: ChurnZero token based authentication
      tags:
      - churnzero
      x-eov-operation-handler: controllers/ChurnzeroController
  /health-check:
    get:
      operationId: maintenanceHealthCheck
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteUserPackageAssignment_200_response'
          description: OK
        "500":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/deleteUserPackageAssignment_200_response'
          description: Internal Server Error
      summary: Health Check
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/users:
    get:
      operationId: maintenanceGetUsers
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetUsers_200_response'
          description: Returns all Users
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get All Users for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    post:
      operationId: maintenancePostUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenancePostUsers_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePostUsers_200_response'
          description: Returns created Users
        "409":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Some of the given Users already exist
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create Users bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    put:
      operationId: maintenancePutUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenancePutUsers_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetUsers_200_response'
          description: Returns created Users
        "404":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Some of the given Users not found
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Update Users bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/accountNotification:
    post:
      operationId: maintenancePostAccountNotification
      requestBody:
        content:
          application/json:
            example:
              example-1:
                value:
                  title: Sample Title
                  accounts:
                  - email: user-email-1@example.io
                    password: aaaaaaa
                  - email: user-email-2@example.io
                    password: bbbbbbb
                  toType: email
                  toEmails:
                  - example1@lit.com
                  - example2@lit.com
                  toAdminIds:
                  - admin-uuid-1
                  - admin-uuid-2
                  toTeacherIds:
                  - teacher-uuid-1
                  - teacher-uuid-2
            schema:
              $ref: '#/components/schemas/maintenancePostAccountNotification_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePostAccountNotification_200_response'
          description: Succeeded to create. Returns nothing
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: parameters is invalid
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create AccountNotification for example. This will send email
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/districts:
    get:
      operationId: maintenanceGetDistricts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetDistricts_200_response'
          description: Returns all Districts
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get All Districts for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    put:
      operationId: maintenancePutDistricts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenancePutDistricts_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns created Districts
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create or Update Districts bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/organizations:
    get:
      operationId: maintenanceGetOrganizations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetOrganizations_200_response'
          description: Returns all Organizations
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get All Organizations for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    put:
      operationId: maintenancePutOrganizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenancePutOrganizations_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns created Organizations
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create or Update Organizations bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/studentGroups:
    get:
      operationId: maintenanceGetStudentGroups
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetStudentGroups_200_response'
          description: Returns all StudentGroup
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get All StudentGroup for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    put:
      operationId: maintenancePutStudentGroups
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenancePutStudentGroups_request'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns created StudentGroup
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create or Update StudentGroup bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/administratorDistricts:
    delete:
      operationId: maintenanceDeleteAdministratorDistricts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenanceGetAdministratorDistricts_200_response'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns ok
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Delete AdministratorDistrict bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    get:
      operationId: maintenanceGetAdministratorDistricts
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetAdministratorDistricts_200_response'
          description: Returns all AdministratorDistricts
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get All AdministratorDistricts for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    post:
      operationId: maintenancePostAdministratorDistricts
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenanceGetAdministratorDistricts_200_response'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns created AdministratorDistrict
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create AdministratorDistrict bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/teacherOrganizations:
    delete:
      operationId: maintenanceDeleteTeacherOrganizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenanceGetTeacherOrganizations_200_response'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns ok
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Delete TeacherOrganizations bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    get:
      operationId: maintenanceGetTeacherOrganizations
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetTeacherOrganizations_200_response'
          description: Returns all TeacherOrganizations
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get All TeacherOrganizations for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    post:
      operationId: maintenancePostTeacherOrganizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenanceGetTeacherOrganizations_200_response'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns created TeacherOrganizations
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create TeacherOrganizations bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/studentGroupStudents:
    delete:
      operationId: maintenanceDeleteStudentGroupStudents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenanceGetStudentGroupStudents_200_response'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns ok
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Delete StudentGroupStudents bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    get:
      operationId: maintenanceGetStudentGroupStudents
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetStudentGroupStudents_200_response'
          description: Returns all StudentGroupStudents
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Get All StudentGroupStudents for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
    post:
      operationId: maintenancePostStudentGroupStudents
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/maintenanceGetStudentGroupStudents_200_response'
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenancePutDistricts_200_response'
          description: Returns created StudentGroupStudents
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Create StudentGroupStudents bulky for accounts management purpose
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
  /maintenance/constructFreeTrialAccountsForSales:
    get:
      operationId: maintenanceGetConstructFreeTrialAccountsForSales
      parameters:
      - explode: true
        in: query
        name: districtName
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: stateId
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: prefix
        required: true
        schema:
          type: string
        style: form
      - explode: true
        in: query
        name: maxStudentCount
        required: false
        schema:
          type: integer
        style: form
      - explode: true
        in: query
        name: maxTeacherCount
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/maintenanceGetConstructFreeTrialAccountsForSales_200_response'
          description: OK
        "400":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: parameters is invalid
              schema:
                $ref: '#/components/schemas/Error'
          description: Bad Request
        "409":
          content:
            application/json:
              examples:
                bad request:
                  value:
                    error: districtName is duplicated
              schema:
                $ref: '#/components/schemas/Error'
          description: Duplicated
        "500":
          content:
            application/json:
              examples:
                internal server error:
                  value:
                    error: Something wrong has occurred
              schema:
                $ref: '#/components/schemas/Error'
          description: Internal Server Error
      summary: Construct Free Trial Accounts for Sales
      tags:
      - maintenance
      x-eov-operation-handler: controllers/MaintenanceController
components:
  schemas:
    postLogin_request:
      description: ""
      properties:
        loginId:
          description: login ID
          minLength: 1
          type: string
        password:
          description: password
          minLength: 1
          type: string
      required:
      - loginId
      - password
      type: object
      x-examples:
        example-1:
          loginId: PFS0000001
          password: d&fo1n@dl-1!
    postLogin_200_response_user:
      example:
        role: student
        id: id
        accessToken: accessToken
      properties:
        id:
          type: string
        accessToken:
          type: string
        role:
          enum:
          - student
          - teacher
          - administrator
          - internalOperator
          - anonymous
          type: string
      required:
      - accessToken
      - id
      - role
      type: object
    postLogin_200_response:
      example:
        user:
          role: student
          id: id
          accessToken: accessToken
      properties:
        user:
          $ref: '#/components/schemas/postLogin_200_response_user'
      required:
      - user
      type: object
    Error:
      properties:
        error:
          type: string
      required:
      - error
      title: Error
      type: object
      x-tags:
      - error
    postCleverAuthenticate_request:
      description: ""
      properties:
        code:
          minLength: 1
          type: string
        grantType:
          minLength: 1
          type: string
        redirectUri:
          minLength: 1
          type: string
        studentGroupId:
          type: string
        organizationId:
          type: string
      required:
      - code
      - grantType
      - organizationId
      - redirectUri
      - studentGroupId
      type: object
      x-examples:
        example-1:
          code: be055f7b9d748811351a
          grantType: authorization_code
          redirectUri: http://localhost:3100
          studentGroupId: student-group-id-1
          organizationId: organization-id-1
    postCleverAuthenticate_200_response_user:
      example:
        role: role
        id: id
        accessToken: accessToken
      properties:
        id:
          type: string
        accessToken:
          type: string
        role:
          type: string
      required:
      - accessToken
      - id
      - role
      type: object
    postCleverAuthenticate_200_response:
      example:
        user:
          role: role
          id: id
          accessToken: accessToken
      properties:
        user:
          $ref: '#/components/schemas/postCleverAuthenticate_200_response_user'
      type: object
    getCleverRosterSync_200_response:
      description: ""
      example:
        message: message
      properties:
        message:
          type: string
      type: object
    postGoogleAuthenticate_request:
      description: ""
      properties:
        token:
          minLength: 1
          type: string
        studentGroupId:
          type: string
        organizationId:
          type: string
        role:
          type: string
      required:
      - organizationId
      - role
      - studentGroupId
      - token
      type: object
      x-examples:
        example-1:
          token: be055f7b9d748811351a
          studentGroupId: student-group-id-1
          organizationId: organization-id-1
          role: student
    postClassLinkAuthenticate_request:
      description: ""
      properties:
        code:
          minLength: 1
          type: string
        studentGroupId:
          type: string
        organizationId:
          type: string
        role:
          type: string
      required:
      - code
      - organizationId
      - role
      - studentGroupId
      type: object
      x-examples:
        example-1:
          code: be055f7b9d748811351a
          studentGroupId: student-group-id-1
          organizationId: organization-id-1
          role: student
    getClasslinkRosterSync_200_response:
      description: ""
      example:
        message: ok
      properties:
        message:
          enum:
          - ok
          type: string
      type: object
    postUserResetPasswordRequest_request:
      description: ""
      properties:
        email:
          type: string
      required:
      - email
      type: object
    postUserResetPasswordRequest_500_response:
      description: ""
      properties:
        error:
          type: string
      required:
      - error
      type: object
      x-examples:
        internal server error:
          error: something wrong happened
    postResetPassword_request:
      description: ""
      properties:
        isValidateToken:
          type: boolean
        token:
          type: string
        password:
          type: string
      required:
      - token
      type: object
    postUserResetPasswordRequestResend_request:
      description: ""
      properties:
        token:
          type: string
      required:
      - token
      type: object
    CodeIllusionPackage_chapters_inner_circles_inner:
      example:
        bookImageUrl: bookImageUrl
        allLessonIds:
        - allLessonIds
        - allLessonIds
        course: basic
        characterImageUrl: characterImageUrl
        id: id
        gemLessonIds:
        - gemLessonIds
        - gemLessonIds
        clearedCharacterImageUrl: clearedCharacterImageUrl
        bookLessonIds:
        - bookLessonIds
        - bookLessonIds
        bookName: bookName
      properties:
        id:
          type: string
        course:
          enum:
          - basic
          - webDesign
          - mediaArt
          - gameDevelopment
          - ""
          title: Course
          type: string
          x-tags:
          - lesson
        characterImageUrl:
          type: string
        clearedCharacterImageUrl:
          type: string
        gemLessonIds:
          items:
            type: string
          type: array
        bookLessonIds:
          items:
            type: string
          type: array
        bookName:
          type: string
        bookImageUrl:
          type: string
        allLessonIds:
          items:
            type: string
          type: array
      required:
      - allLessonIds
      - bookImageUrl
      - bookLessonIds
      - bookName
      - characterImageUrl
      - clearedCharacterImageUrl
      - course
      - gemLessonIds
      - id
      type: object
    CodeIllusionPackage_chapters_inner:
      example:
        lessonOverViewPdfUrl: lessonOverViewPdfUrl
        name: name
        lessonNoteSheetsZipUrl: lessonNoteSheetsZipUrl
        circles:
        - bookImageUrl: bookImageUrl
          allLessonIds:
          - allLessonIds
          - allLessonIds
          course: basic
          characterImageUrl: characterImageUrl
          id: id
          gemLessonIds:
          - gemLessonIds
          - gemLessonIds
          clearedCharacterImageUrl: clearedCharacterImageUrl
          bookLessonIds:
          - bookLessonIds
          - bookLessonIds
          bookName: bookName
        - bookImageUrl: bookImageUrl
          allLessonIds:
          - allLessonIds
          - allLessonIds
          course: basic
          characterImageUrl: characterImageUrl
          id: id
          gemLessonIds:
          - gemLessonIds
          - gemLessonIds
          clearedCharacterImageUrl: clearedCharacterImageUrl
          bookLessonIds:
          - bookLessonIds
          - bookLessonIds
          bookName: bookName
        id: id
        title: title
      properties:
        id:
          type: string
        name:
          type: string
        title:
          type: string
        lessonNoteSheetsZipUrl:
          type: string
        lessonOverViewPdfUrl:
          type: string
        circles:
          items:
            $ref: '#/components/schemas/CodeIllusionPackage_chapters_inner_circles_inner'
          type: array
      required:
      - circles
      - id
      - name
      - title
      type: object
    CodeIllusionPackage:
      example:
        level: basic
        headerButtonText: headerButtonText
        chapters:
        - lessonOverViewPdfUrl: lessonOverViewPdfUrl
          name: name
          lessonNoteSheetsZipUrl: lessonNoteSheetsZipUrl
          circles:
          - bookImageUrl: bookImageUrl
            allLessonIds:
            - allLessonIds
            - allLessonIds
            course: basic
            characterImageUrl: characterImageUrl
            id: id
            gemLessonIds:
            - gemLessonIds
            - gemLessonIds
            clearedCharacterImageUrl: clearedCharacterImageUrl
            bookLessonIds:
            - bookLessonIds
            - bookLessonIds
            bookName: bookName
          - bookImageUrl: bookImageUrl
            allLessonIds:
            - allLessonIds
            - allLessonIds
            course: basic
            characterImageUrl: characterImageUrl
            id: id
            gemLessonIds:
            - gemLessonIds
            - gemLessonIds
            clearedCharacterImageUrl: clearedCharacterImageUrl
            bookLessonIds:
            - bookLessonIds
            - bookLessonIds
            bookName: bookName
          id: id
          title: title
        - lessonOverViewPdfUrl: lessonOverViewPdfUrl
          name: name
          lessonNoteSheetsZipUrl: lessonNoteSheetsZipUrl
          circles:
          - bookImageUrl: bookImageUrl
            allLessonIds:
            - allLessonIds
            - allLessonIds
            course: basic
            characterImageUrl: characterImageUrl
            id: id
            gemLessonIds:
            - gemLessonIds
            - gemLessonIds
            clearedCharacterImageUrl: clearedCharacterImageUrl
            bookLessonIds:
            - bookLessonIds
            - bookLessonIds
            bookName: bookName
          - bookImageUrl: bookImageUrl
            allLessonIds:
            - allLessonIds
            - allLessonIds
            course: basic
            characterImageUrl: characterImageUrl
            id: id
            gemLessonIds:
            - gemLessonIds
            - gemLessonIds
            clearedCharacterImageUrl: clearedCharacterImageUrl
            bookLessonIds:
            - bookLessonIds
            - bookLessonIds
            bookName: bookName
          id: id
          title: title
        name: name
        id: id
        redirectUrlWhenAllFinished: redirectUrlWhenAllFinished
        headerButtonLink: headerButtonLink
      properties:
        id:
          type: string
        level:
          enum:
          - basic
          - advanced
          type: string
        name:
          type: string
        headerButtonLink:
          nullable: true
          type: string
        headerButtonText:
          nullable: true
          type: string
        redirectUrlWhenAllFinished:
          nullable: true
          type: string
        chapters:
          items:
            $ref: '#/components/schemas/CodeIllusionPackage_chapters_inner'
          type: array
      required:
      - chapters
      - headerButtonLink
      - headerButtonText
      - id
      - level
      - name
      - redirectUrlWhenAllFinished
      title: CodeIllusionPackage
      type: object
      x-tags:
      - lesson
    getUsersUserIdCodeIllusionPackages_200_response:
      example:
        codeIllusionPackage:
          level: basic
          headerButtonText: headerButtonText
          chapters:
          - lessonOverViewPdfUrl: lessonOverViewPdfUrl
            name: name
            lessonNoteSheetsZipUrl: lessonNoteSheetsZipUrl
            circles:
            - bookImageUrl: bookImageUrl
              allLessonIds:
              - allLessonIds
              - allLessonIds
              course: basic
              characterImageUrl: characterImageUrl
              id: id
              gemLessonIds:
              - gemLessonIds
              - gemLessonIds
              clearedCharacterImageUrl: clearedCharacterImageUrl
              bookLessonIds:
              - bookLessonIds
              - bookLessonIds
              bookName: bookName
            - bookImageUrl: bookImageUrl
              allLessonIds:
              - allLessonIds
              - allLessonIds
              course: basic
              characterImageUrl: characterImageUrl
              id: id
              gemLessonIds:
              - gemLessonIds
              - gemLessonIds
              clearedCharacterImageUrl: clearedCharacterImageUrl
              bookLessonIds:
              - bookLessonIds
              - bookLessonIds
              bookName: bookName
            id: id
            title: title
          - lessonOverViewPdfUrl: lessonOverViewPdfUrl
            name: name
            lessonNoteSheetsZipUrl: lessonNoteSheetsZipUrl
            circles:
            - bookImageUrl: bookImageUrl
              allLessonIds:
              - allLessonIds
              - allLessonIds
              course: basic
              characterImageUrl: characterImageUrl
              id: id
              gemLessonIds:
              - gemLessonIds
              - gemLessonIds
              clearedCharacterImageUrl: clearedCharacterImageUrl
              bookLessonIds:
              - bookLessonIds
              - bookLessonIds
              bookName: bookName
            - bookImageUrl: bookImageUrl
              allLessonIds:
              - allLessonIds
              - allLessonIds
              course: basic
              characterImageUrl: characterImageUrl
              id: id
              gemLessonIds:
              - gemLessonIds
              - gemLessonIds
              clearedCharacterImageUrl: clearedCharacterImageUrl
              bookLessonIds:
              - bookLessonIds
              - bookLessonIds
              bookName: bookName
            id: id
            title: title
          name: name
          id: id
          redirectUrlWhenAllFinished: redirectUrlWhenAllFinished
          headerButtonLink: headerButtonLink
      properties:
        codeIllusionPackage:
          $ref: '#/components/schemas/CodeIllusionPackage'
      required:
      - codeIllusionPackage
      type: object
    Lesson:
      description: The Definition of Lesson
      example:
        maxStarCount: 0.8008281904610115
        lessonOverViewPdfUrl: lessonOverViewPdfUrl
        lessonEnvironment: litLessonPlayer
        hintCount: 1.4658129805029452
        level: basic
        lessonDuration: lessonDuration
        lessonObjectives: lessonObjectives
        description: description
        url: url
        skillsLearnedInThisLesson: skillsLearnedInThisLesson
        thumbnailImageUrl: thumbnailImageUrl
        name: name
        course: basic
        theme: theme
        quizCount: 6.027456183070403
        id: id
        projectName: projectName
        scenarioName: scenarioName
      properties:
        id:
          type: string
        url:
          type: string
        name:
          type: string
        lessonEnvironment:
          description: |
            We currently only have "LiT Lesson Player" as an Environment, but we will add external project etc. like "Magic Quest" in the future.
          enum:
          - litLessonPlayer
          title: LessonEnvironment
          type: string
        course:
          enum:
          - basic
          - webDesign
          - mediaArt
          - gameDevelopment
          - ""
          title: Course
          type: string
          x-tags:
          - lesson
        theme:
          type: string
        skillsLearnedInThisLesson:
          type: string
        description:
          type: string
        lessonObjectives:
          type: string
        thumbnailImageUrl:
          type: string
        lessonOverViewPdfUrl:
          type: string
        projectName:
          type: string
        scenarioName:
          type: string
        lessonDuration:
          type: string
        maxStarCount:
          type: number
        quizCount:
          type: number
        hintCount:
          type: number
        level:
          enum:
          - basic
          - advanced
          - heroic
          - adventurous
          type: string
      required:
      - course
      - description
      - id
      - lessonDuration
      - lessonObjectives
      - level
      - maxStarCount
      - name
      - skillsLearnedInThisLesson
      - theme
      - thumbnailImageUrl
      - url
      title: Lesson
      type: object
      x-tags:
      - lesson
    getLessons_200_response:
      example:
        lessons:
        - maxStarCount: 0.8008281904610115
          lessonOverViewPdfUrl: lessonOverViewPdfUrl
          lessonEnvironment: litLessonPlayer
          hintCount: 1.4658129805029452
          level: basic
          lessonDuration: lessonDuration
          lessonObjectives: lessonObjectives
          description: description
          url: url
          skillsLearnedInThisLesson: skillsLearnedInThisLesson
          thumbnailImageUrl: thumbnailImageUrl
          name: name
          course: basic
          theme: theme
          quizCount: 6.027456183070403
          id: id
          projectName: projectName
          scenarioName: scenarioName
        - maxStarCount: 0.8008281904610115
          lessonOverViewPdfUrl: lessonOverViewPdfUrl
          lessonEnvironment: litLessonPlayer
          hintCount: 1.4658129805029452
          level: basic
          lessonDuration: lessonDuration
          lessonObjectives: lessonObjectives
          description: description
          url: url
          skillsLearnedInThisLesson: skillsLearnedInThisLesson
          thumbnailImageUrl: thumbnailImageUrl
          name: name
          course: basic
          theme: theme
          quizCount: 6.027456183070403
          id: id
          projectName: projectName
          scenarioName: scenarioName
      properties:
        lessons:
          items:
            $ref: '#/components/schemas/Lesson'
          type: array
      required:
      - lessons
      type: object
    UserLessonStatus:
      description: ""
      example:
        correctAnsweredQuizCount: 6.027456183070403
        usedHintCount: 1.4658129805029452
        lessonId: lessonId
        stepIdskippingDetected: true
        startedAt: 2000-01-23T04:56:07.000+00:00
        achievedStarCount: 0.8008281904610115
        quizCount: 5.962133916683182
        userId: userId
        status: not_cleared
        finishedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        userId:
          type: string
        lessonId:
          type: string
        status:
          description: |-
            "not_cleared" shows "It's available but not cleared"
            "cleared" shows "It's available and already cleared at least once"
            "locked" shows "It's unavailable for some reason. e.g.) the teacher has locked this lesson"
          enum:
          - not_cleared
          - cleared
          - locked
          type: string
        achievedStarCount:
          type: number
        correctAnsweredQuizCount:
          nullable: true
          type: number
        usedHintCount:
          nullable: true
          type: number
        stepIdskippingDetected:
          type: boolean
        startedAt:
          format: date-time
          type: string
        finishedAt:
          format: date-time
          type: string
        quizCount:
          type: number
      required:
      - achievedStarCount
      - lessonId
      - status
      - stepIdskippingDetected
      - userId
      title: UserLessonStatus
      type: object
      x-tags:
      - lesson
    getUsersUserIdLessonStatuses_200_response:
      example:
        userLessonStatuses:
        - correctAnsweredQuizCount: 6.027456183070403
          usedHintCount: 1.4658129805029452
          lessonId: lessonId
          stepIdskippingDetected: true
          startedAt: 2000-01-23T04:56:07.000+00:00
          achievedStarCount: 0.8008281904610115
          quizCount: 5.962133916683182
          userId: userId
          status: not_cleared
          finishedAt: 2000-01-23T04:56:07.000+00:00
        - correctAnsweredQuizCount: 6.027456183070403
          usedHintCount: 1.4658129805029452
          lessonId: lessonId
          stepIdskippingDetected: true
          startedAt: 2000-01-23T04:56:07.000+00:00
          achievedStarCount: 0.8008281904610115
          quizCount: 5.962133916683182
          userId: userId
          status: not_cleared
          finishedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        userLessonStatuses:
          items:
            $ref: '#/components/schemas/UserLessonStatus'
          type: array
      type: object
    UserSoundSettings:
      example:
        seVolume: 0.8008281904610115
        bgmVolume: 6.027456183070403
        narrationLanguage: en
        serifNarrationVolume: 5.962133916683182
        hintNarrationVolume: 1.4658129805029452
      properties:
        seVolume:
          type: number
        bgmVolume:
          type: number
        hintNarrationVolume:
          type: number
        serifNarrationVolume:
          type: number
        narrationLanguage:
          enum:
          - en
          - es
          type: string
      required:
      - bgmVolume
      - hintNarrationVolume
      - narrationLanguage
      - seVolume
      - serifNarrationVolume
      title: UserSoundSettings
      type: object
      x-tags:
      - settings
    UserSettings:
      example:
        sound:
          seVolume: 0.8008281904610115
          bgmVolume: 6.027456183070403
          narrationLanguage: en
          serifNarrationVolume: 5.962133916683182
          hintNarrationVolume: 1.4658129805029452
      properties:
        sound:
          $ref: '#/components/schemas/UserSoundSettings'
      required:
      - sound
      title: UserSettings
      type: object
      x-tags:
      - settings
    getUserSettings_200_response:
      example:
        settings:
          sound:
            seVolume: 0.8008281904610115
            bgmVolume: 6.027456183070403
            narrationLanguage: en
            serifNarrationVolume: 5.962133916683182
            hintNarrationVolume: 1.4658129805029452
      properties:
        settings:
          $ref: '#/components/schemas/UserSettings'
      type: object
    updateUserSoundSettings_200_response:
      example:
        soundSettings:
          seVolume: 0.8008281904610115
          bgmVolume: 6.027456183070403
          narrationLanguage: en
          serifNarrationVolume: 5.962133916683182
          hintNarrationVolume: 1.4658129805029452
      properties:
        soundSettings:
          $ref: '#/components/schemas/UserSoundSettings'
      type: object
    UserPackageAssignment:
      description: ""
      example:
        packageId: packageId
        packageCategoryId: packageCategoryId
        userId: userId
      properties:
        userId:
          type: string
        packageCategoryId:
          type: string
        packageId:
          type: string
      required:
      - packageCategoryId
      - packageId
      - userId
      title: UserPackageAssignment
      type: object
    getUserPackageAssignments_200_response:
      example:
        userPackageAssignments:
        - packageId: packageId
          packageCategoryId: packageCategoryId
          userId: userId
        - packageId: packageId
          packageCategoryId: packageCategoryId
          userId: userId
      properties:
        userPackageAssignments:
          items:
            $ref: '#/components/schemas/UserPackageAssignment'
          type: array
      required:
      - userPackageAssignments
      type: object
    postUserPackageAssignment_200_response:
      example:
        userPackageAssignment:
          packageId: packageId
          packageCategoryId: packageCategoryId
          userId: userId
      properties:
        userPackageAssignment:
          $ref: '#/components/schemas/UserPackageAssignment'
      required:
      - userPackageAssignment
      type: object
    deleteUserPackageAssignment_request:
      properties:
        packageCategoryId:
          type: string
        userId:
          type: string
      required:
      - packageCategoryId
      - userId
      type: object
    deleteUserPackageAssignment_200_response:
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
    District:
      description: The Definition of Get Districts.
      example:
        lastRosterSyncEventId: lastRosterSyncEventId
        lastRosterSyncEventDate: lastRosterSyncEventDate
        stateId: stateId
        name: name
        lmsId: lmsId
        id: id
        districtLMSId: districtLMSId
        administrators: administrators
        enableRosterSync: true
      properties:
        id:
          type: string
        name:
          type: string
        districtLMSId:
          type: string
        lastRosterSyncEventId:
          type: string
        lastRosterSyncEventDate:
          type: string
        enableRosterSync:
          type: boolean
        lmsId:
          type: string
        stateId:
          type: string
        administrators:
          type: string
      required:
      - districtLMSId
      - enableRosterSync
      - id
      - lastRosterSyncEventDate
      - lastRosterSyncEventId
      - name
      title: District
      type: object
      x-tags:
      - district
    getDistricts_200_response:
      example:
        districts:
        - lastRosterSyncEventId: lastRosterSyncEventId
          lastRosterSyncEventDate: lastRosterSyncEventDate
          stateId: stateId
          name: name
          lmsId: lmsId
          id: id
          districtLMSId: districtLMSId
          administrators: administrators
          enableRosterSync: true
        - lastRosterSyncEventId: lastRosterSyncEventId
          lastRosterSyncEventDate: lastRosterSyncEventDate
          stateId: stateId
          name: name
          lmsId: lmsId
          id: id
          districtLMSId: districtLMSId
          administrators: administrators
          enableRosterSync: true
      properties:
        districts:
          items:
            $ref: '#/components/schemas/District'
          type: array
      type: object
    postDistrict_request:
      description: ""
      properties:
        name:
          description: This is a district name.
          minLength: 1
          type: string
        stateId:
          type: string
        lmsId:
          description: "This is a lmsId like(None, Clever, Claslink, Google classroom)."
          minLength: 1
          type: string
        districtLmsId:
          description: This is a districtLmsId.
          minLength: 1
          type: string
        enableRosterSync:
          description: This is a enableRosterSync.
          minLength: 1
          type: boolean
        apiToken:
          description: This is apiToken.
          minLength: 1
          type: string
      required:
      - lmsId
      - name
      type: object
      x-examples:
        example-1:
          name: Florida District
          lmsId: 1
          districtLmsId: 10
    putDistrict_request:
      description: ""
      properties:
        name:
          description: This is a district name.
          minLength: 1
          type: string
        lmsId:
          description: "This is a lmsId like(None, Clever, Claslink, Google classroom)."
          minLength: 1
          type: string
        districtLmsId:
          description: This is a districtLmsId.
          minLength: 1
          type: string
        enableRosterSync:
          description: This is a enableRosterSync.
          minLength: 1
          type: boolean
        apiToken:
          description: This is apiToken.
          minLength: 1
          type: string
      required:
      - lmsId
      - name
      type: object
      x-examples:
        example-1:
          name: Florida District
          lmsId: 1
          districtLmsId: 10
    Administrator:
      description: Administrator
      example:
        firstName: firstName
        lastName: lastName
        administratorId: administratorId
        districtId: districtId
        createdUserId: createdUserId
        createdDate: createdDate
        userId: userId
        email: email
        administratorLMSId: administratorLMSId
      properties:
        administratorId:
          type: string
        userId:
          type: string
        districtId:
          type: string
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        administratorLMSId:
          type: string
        createdUserId:
          type: string
        createdDate:
          type: string
      title: Administrator
      type: object
      x-tags:
      - administrator
    getAdministrators_200_response:
      example:
        administrators:
        - firstName: firstName
          lastName: lastName
          administratorId: administratorId
          districtId: districtId
          createdUserId: createdUserId
          createdDate: createdDate
          userId: userId
          email: email
          administratorLMSId: administratorLMSId
        - firstName: firstName
          lastName: lastName
          administratorId: administratorId
          districtId: districtId
          createdUserId: createdUserId
          createdDate: createdDate
          userId: userId
          email: email
          administratorLMSId: administratorLMSId
      properties:
        administrators:
          items:
            $ref: '#/components/schemas/Administrator'
          type: array
      type: object
    administrator:
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        administratorLMSId:
          type: string
        password:
          type: string
      title: administrator
      type: object
    postAdministrators_request:
      description: ""
      properties:
        administrators:
          items:
            $ref: '#/components/schemas/administrator'
          type: array
      required:
      - administrators
      type: object
      x-examples:
        example-1:
          administrators:
          - email: admin1@email.com
            firstName: admin1_first_name
            lastName: admin1_last_name
            administratorLMSId: admin1_adminisitrator_lms_id
          - email: admin2@email.com
            firstName: admin2_first_name
            lastName: admin2_last_name
            administratorLMSId: admin2_adminisitrator_lms_id
          - email: admin3@email.com
            firstName: admin3_first_name
            lastName: admin3_last_name
            administratorLMSId: admin3_adminisitrator_lms_id
    postAdministrators_400_response_error_oneOf_inner:
      properties:
        index:
          type: number
        message:
          items:
            enum:
            - duplicateRecordsWithSameEmail
            - userAlreadyExistWithEmail
            - emailInvalid
            - emailNotProvided
            type: string
          type: array
      type: object
    postAdministrators_400_response_error:
      oneOf:
      - type: string
      - items:
          $ref: '#/components/schemas/postAdministrators_400_response_error_oneOf_inner'
        type: array
    postAdministrators_400_response:
      properties:
        error:
          $ref: '#/components/schemas/postAdministrators_400_response_error'
      required:
      - error
      type: object
    putAdministrator_request:
      description: ""
      properties:
        email:
          description: This is a user's email.
          type: string
        firstName:
          description: This is a first name of administrator.
          type: string
        lastName:
          description: This is a last name of administrator.
          type: string
        administratorLMSId:
          description: This is a administratorLMSId of administrator.
          type: string
        password:
          type: string
      required:
      - email
      type: object
      x-examples:
        example-1:
          email: admin1@email.com
          firstName: admin
          lastName: one
          administratorLMSId: 1
    Organization:
      description: The Definition of Get Organizations.
      example:
        districtId: districtId
        createdUserId: createdUserId
        createdDate: 2000-01-23T04:56:07.000+00:00
        stateId: stateId
        name: name
        id: id
        organizationLMSId: organizationLMSId
        updatedDate: 2000-01-23T04:56:07.000+00:00
      properties:
        id:
          type: string
        name:
          type: string
        districtId:
          type: string
        stateId:
          type: string
        organizationLMSId:
          type: string
        createdUserId:
          type: string
        createdDate:
          format: date-time
          type: string
        updatedDate:
          format: date-time
          type: string
      required:
      - createdDate
      - createdUserId
      - districtId
      - id
      - name
      - organizationLMSId
      - stateId
      - updatedDate
      title: Organization
      type: object
      x-tags:
      - organization
    getOrganizations_200_response:
      example:
        organizations:
        - districtId: districtId
          createdUserId: createdUserId
          createdDate: 2000-01-23T04:56:07.000+00:00
          stateId: stateId
          name: name
          id: id
          organizationLMSId: organizationLMSId
          updatedDate: 2000-01-23T04:56:07.000+00:00
        - districtId: districtId
          createdUserId: createdUserId
          createdDate: 2000-01-23T04:56:07.000+00:00
          stateId: stateId
          name: name
          id: id
          organizationLMSId: organizationLMSId
          updatedDate: 2000-01-23T04:56:07.000+00:00
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/Organization'
          type: array
      type: object
    postOrganization_request:
      description: ""
      properties:
        name:
          minLength: 1
          type: string
        districtId:
          minLength: 1
          type: string
        stateId:
          minLength: 1
          type: string
        organizationLMSId:
          minLength: 1
          type: string
        createdUserId:
          type: string
      required:
      - districtId
      - name
      - stateId
      type: object
      x-examples:
        example-1:
          name: Sunrise
          districtId: district-1
          stateId: state-1
          organizationLMSId: lms-id-1
          createdUserId: user-id-1
    StudentGroups:
      description: The Definition of Get Student Groups.
      example:
        organizationId: organizationId
        createdUserId: createdUserId
        createdDate: 2000-01-23T04:56:07.000+00:00
        studentGroupLmsId: studentGroupLmsId
        grade: grade
        name: name
        id: id
        updatedDate: 2000-01-23T04:56:07.000+00:00
        updatedUserId: updatedUserId
      properties:
        id:
          type: string
        organizationId:
          type: string
        name:
          type: string
        grade:
          type: string
        studentGroupLmsId:
          type: string
        createdUserId:
          type: string
        updatedUserId:
          type: string
        createdDate:
          format: date-time
          type: string
        updatedDate:
          format: date-time
          type: string
      required:
      - createdDate
      - createdUserId
      - grade
      - id
      - name
      - organizationId
      - studentGroupLmsId
      - updatedDate
      - updatedUserId
      title: StudentGroups
      type: object
      x-tags:
      - student
    getStudentGroups_200_response:
      example:
        studentgroups:
        - organizationId: organizationId
          createdUserId: createdUserId
          createdDate: 2000-01-23T04:56:07.000+00:00
          studentGroupLmsId: studentGroupLmsId
          grade: grade
          name: name
          id: id
          updatedDate: 2000-01-23T04:56:07.000+00:00
          updatedUserId: updatedUserId
        - organizationId: organizationId
          createdUserId: createdUserId
          createdDate: 2000-01-23T04:56:07.000+00:00
          studentGroupLmsId: studentGroupLmsId
          grade: grade
          name: name
          id: id
          updatedDate: 2000-01-23T04:56:07.000+00:00
          updatedUserId: updatedUserId
      properties:
        studentgroups:
          items:
            $ref: '#/components/schemas/StudentGroups'
          type: array
      type: object
    postStudentGroup_request:
      description: ""
      properties:
        name:
          description: This is a student group name.
          minLength: 1
          type: string
        packageId:
          description: This is a packageId.
          type: string
        grade:
          description: "This is a grade like (grade1,grade2 and etc)."
          minLength: 1
          type: string
        studentGroupLmsId:
          minLength: 1
          type: string
      required:
      - name
      - packageId
      type: object
      x-examples:
        example-1:
          name: Fl Group
          packageId: package-id-1
          grade: grade1
          studentGroupLmsId: 1
    getDistrictLMSInformationByOrganization_200_response:
      example:
        districtId: districtId
        districtName: districtName
        lmsId: lmsId
      properties:
        districtId:
          type: string
        districtName:
          description: This is a district name.
          type: string
        lmsId:
          description: "This is a lmsId like(None, Clever, Claslink, Google)."
          type: string
      required:
      - districtId
      - districtName
      - lmsId
      type: object
    putStudentGroup_request:
      description: ""
      properties:
        name:
          description: This is a student group name.
          minLength: 1
          type: string
        packageId:
          description: This is a packageId.
          type: string
        grade:
          description: "This is a grade like (grade1,grade2 and etc)."
          minLength: 1
          type: string
        studentGroupLmsId:
          type: string
      required:
      - name
      - packageId
      type: object
      x-examples:
        example-1:
          name: Fl Group
          packageId: package-id-1
          grade: grade1
          studentGroupLmsId: 1
    getPackageDetailsByStudentGroupId_200_response:
      example:
        package:
          level: basic
          headerButtonText: headerButtonText
          chapters:
          - lessonOverViewPdfUrl: lessonOverViewPdfUrl
            name: name
            lessonNoteSheetsZipUrl: lessonNoteSheetsZipUrl
            circles:
            - bookImageUrl: bookImageUrl
              allLessonIds:
              - allLessonIds
              - allLessonIds
              course: basic
              characterImageUrl: characterImageUrl
              id: id
              gemLessonIds:
              - gemLessonIds
              - gemLessonIds
              clearedCharacterImageUrl: clearedCharacterImageUrl
              bookLessonIds:
              - bookLessonIds
              - bookLessonIds
              bookName: bookName
            - bookImageUrl: bookImageUrl
              allLessonIds:
              - allLessonIds
              - allLessonIds
              course: basic
              characterImageUrl: characterImageUrl
              id: id
              gemLessonIds:
              - gemLessonIds
              - gemLessonIds
              clearedCharacterImageUrl: clearedCharacterImageUrl
              bookLessonIds:
              - bookLessonIds
              - bookLessonIds
              bookName: bookName
            id: id
            title: title
          - lessonOverViewPdfUrl: lessonOverViewPdfUrl
            name: name
            lessonNoteSheetsZipUrl: lessonNoteSheetsZipUrl
            circles:
            - bookImageUrl: bookImageUrl
              allLessonIds:
              - allLessonIds
              - allLessonIds
              course: basic
              characterImageUrl: characterImageUrl
              id: id
              gemLessonIds:
              - gemLessonIds
              - gemLessonIds
              clearedCharacterImageUrl: clearedCharacterImageUrl
              bookLessonIds:
              - bookLessonIds
              - bookLessonIds
              bookName: bookName
            - bookImageUrl: bookImageUrl
              allLessonIds:
              - allLessonIds
              - allLessonIds
              course: basic
              characterImageUrl: characterImageUrl
              id: id
              gemLessonIds:
              - gemLessonIds
              - gemLessonIds
              clearedCharacterImageUrl: clearedCharacterImageUrl
              bookLessonIds:
              - bookLessonIds
              - bookLessonIds
              bookName: bookName
            id: id
            title: title
          name: name
          id: id
          redirectUrlWhenAllFinished: redirectUrlWhenAllFinished
          headerButtonLink: headerButtonLink
      properties:
        package:
          $ref: '#/components/schemas/CodeIllusionPackage'
      type: object
    Student:
      description: The Definition of Get Students.
      example:
        lastLessionName: lastLessionName
        loginId: loginId
        studentGroupCount: 0.8008281904610115
        lastLessonStartedAt: 2000-01-23T04:56:07.000+00:00
        nickName: nickName
        studentGroup: studentGroup
        userId: userId
        studentLMSId: studentLMSId
        password: password
        createdDate: 2000-01-23T04:56:07.000+00:00
        createdUserName: createdUserName
        emailsToNotify:
        - emailsToNotify
        - emailsToNotify
        id: id
        email: email
      properties:
        id:
          type: string
        nickName:
          type: string
        userId:
          type: string
        password:
          type: string
        email:
          type: string
        studentLMSId:
          type: string
        emailsToNotify:
          items:
            type: string
          type: array
        loginId:
          type: string
        createdUserName:
          type: string
        createdDate:
          format: date-time
          type: string
        lastLessionName:
          type: string
        lastLessonStartedAt:
          format: date-time
          nullable: true
          type: string
        studentGroupCount:
          type: number
        studentGroup:
          type: string
      required:
      - createdDate
      - createdUserName
      - email
      - emailsToNotify
      - id
      - lastLessionName
      - lastLessonStartedAt
      - loginId
      - nickName
      - password
      - studentGroup
      - studentGroupCount
      - studentLMSId
      - userId
      title: Student
      type: object
      x-tags:
      - Student
    getStudents_200_response:
      example:
        students:
        - lastLessionName: lastLessionName
          loginId: loginId
          studentGroupCount: 0.8008281904610115
          lastLessonStartedAt: 2000-01-23T04:56:07.000+00:00
          nickName: nickName
          studentGroup: studentGroup
          userId: userId
          studentLMSId: studentLMSId
          password: password
          createdDate: 2000-01-23T04:56:07.000+00:00
          createdUserName: createdUserName
          emailsToNotify:
          - emailsToNotify
          - emailsToNotify
          id: id
          email: email
        - lastLessionName: lastLessionName
          loginId: loginId
          studentGroupCount: 0.8008281904610115
          lastLessonStartedAt: 2000-01-23T04:56:07.000+00:00
          nickName: nickName
          studentGroup: studentGroup
          userId: userId
          studentLMSId: studentLMSId
          password: password
          createdDate: 2000-01-23T04:56:07.000+00:00
          createdUserName: createdUserName
          emailsToNotify:
          - emailsToNotify
          - emailsToNotify
          id: id
          email: email
      properties:
        students:
          items:
            $ref: '#/components/schemas/Student'
          type: array
      type: object
    student:
      properties:
        nickName:
          type: string
        email:
          type: string
        loginId:
          type: string
        password:
          type: string
        studentLMSId:
          type: string
        emailsToNotify:
          items:
            type: string
          type: array
      title: student
      type: object
    postStudents_request:
      description: ""
      properties:
        students:
          items:
            $ref: '#/components/schemas/student'
          type: array
      required:
      - students
      type: object
      x-examples:
        example-1:
          students:
          - nickName: parth
            loginId: login-id-1
            password: parth@123
            studentLMSId: lms-id-1
            email: parth@gmail.com
            emailsToNotify:
            - parth@gmail.com
            - parekh@gmail.com
          - nickName: chirag
            loginId: login-id-2
            password: chirag@123
            email: chirag@gmail.com
            studentLMSId: lms-id-2
            emailsToNotify:
            - chirag@gmail.com
            - patel@gmail.com
    postStudents_400_response_error_oneOf_inner:
      properties:
        index:
          type: number
        message:
          items:
            enum:
            - invalidEmail
            - loginIdAlreadyExists
            - duplicateEmail
            - nickNameNotProvided
            - emptyPassword
            - studentLMSIdAlreadyExists
            - duplicateRecordsWithSameLoginId
            - duplicateRecordsWithStudentLMSId
            - loginIdSholdNotContainedWhiteSpace
            - userAlreadyExistWithEmail
            - duplicateRecordsWithSameEmail
            - atLeastOneFieldIsMandatory
            - studentLmsIdNotProvided
            type: string
          type: array
      type: object
    postStudents_400_response_error:
      oneOf:
      - type: string
      - items:
          $ref: '#/components/schemas/postStudents_400_response_error_oneOf_inner'
        type: array
    postStudents_400_response:
      properties:
        error:
          $ref: '#/components/schemas/postStudents_400_response_error'
      required:
      - error
      type: object
    putStudent_request:
      description: ""
      properties:
        nickName:
          minLength: 1
          type: string
        loginId:
          type: string
        password:
          type: string
        studentLMSId:
          type: string
        email:
          type: string
        emailsToNotify:
          items:
            type: string
          type: array
      type: object
    Teacher:
      description: Teacher
      example:
        firstName: firstName
        lastName: lastName
        createdUserId: createdUserId
        createdDate: createdDate
        teacherLMSId: teacherLMSId
        createdUserName: createdUserName
        id: id
        userId: userId
        email: email
      properties:
        id:
          type: string
        email:
          type: string
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        teacherLMSId:
          type: string
        createdUserId:
          type: string
        createdUserName:
          type: string
        createdDate:
          type: string
      required:
      - createdDate
      - createdUserId
      - email
      - firstName
      - id
      - lastName
      - teacherLMSId
      - userId
      title: Teacher
      type: object
      x-tags:
      - teacher
    getTeachers_200_response:
      example:
        teachers:
        - firstName: firstName
          lastName: lastName
          createdUserId: createdUserId
          createdDate: createdDate
          teacherLMSId: teacherLMSId
          createdUserName: createdUserName
          id: id
          userId: userId
          email: email
        - firstName: firstName
          lastName: lastName
          createdUserId: createdUserId
          createdDate: createdDate
          teacherLMSId: teacherLMSId
          createdUserName: createdUserName
          id: id
          userId: userId
          email: email
      properties:
        teachers:
          items:
            $ref: '#/components/schemas/Teacher'
          type: array
      type: object
    teacher:
      properties:
        email:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        teacherLMSId:
          type: string
        password:
          type: string
      title: teacher
      type: object
    postTeachers_request:
      description: ""
      properties:
        teachers:
          items:
            $ref: '#/components/schemas/teacher'
          type: array
      required:
      - teachers
      type: object
      x-examples:
        example-1:
          teachers:
          - email: teacher1@email.com
            firstName: teacher_first_name_1
            lastName: teacher_last_name_1
            teacherLMSId: teacher_lms_id_1
            password: teacher_password_1
          - email: teacher2@email.com
            firstName: teacher_first_name_2
            lastName: teacher_last_name_2
            teacherLMSId: teacher_lms_id_2
            password: teacher_password_2
          - email: teacher3@email.com
            firstName: teacher_first_name_3
            lastName: teacher_last_name_3
            teacherLMSId: teacher_lms_id_3
            password: teacher_password_3
    postTeachers_400_response_error_oneOf_inner:
      properties:
        index:
          type: number
        message:
          items:
            enum:
            - duplicateRecordsWithSameEmail
            - duplicateRecordsWithSameTeacherLMSId
            - userAlreadyExistWithEmail
            - userAlreadyExistWithTeacherLMSId
            - emailInvalid
            - emailNotProvided
            - emptyPassword
            type: string
          type: array
      type: object
    postTeachers_400_response_error:
      oneOf:
      - type: string
      - items:
          $ref: '#/components/schemas/postTeachers_400_response_error_oneOf_inner'
        type: array
    postTeachers_400_response:
      properties:
        error:
          $ref: '#/components/schemas/postTeachers_400_response_error'
      required:
      - error
      type: object
    Teacher_Organization_teacher_teacherOrganizations_inner:
      example:
        stateId: stateId
        name: name
        id: id
      properties:
        id:
          description: id of the organization.
          type: string
        name:
          description: name of the organization.
          type: string
        stateId:
          description: stateId of organization
          type: string
      required:
      - id
      - name
      type: object
    Teacher_Organization_teacher:
      example:
        organizationId: organizationId
        firstName: firstName
        lastName: lastName
        teacherId: teacherId
        districtId: districtId
        createdUserId: createdUserId
        createdDate: createdDate
        teacherLMSId: teacherLMSId
        isPrimary: true
        userId: userId
        teacherOrganizations:
        - stateId: stateId
          name: name
          id: id
        - stateId: stateId
          name: name
          id: id
        email: email
      properties:
        teacherId:
          type: string
        userId:
          type: string
        firstName:
          type: string
        organizationId:
          type: string
        districtId:
          type: string
        email:
          type: string
        lastName:
          type: string
        isPrimary:
          type: boolean
        teacherLMSId:
          type: string
        createdUserId:
          type: string
        createdDate:
          type: string
        teacherOrganizations:
          items:
            $ref: '#/components/schemas/Teacher_Organization_teacher_teacherOrganizations_inner'
          type: array
      required:
      - createdDate
      - createdUserId
      - email
      - firstName
      - lastName
      - teacherId
      - teacherLMSId
      - teacherOrganizations
      - userId
      type: object
    Teacher_Organization:
      description: Teacher
      example:
        teacher:
          organizationId: organizationId
          firstName: firstName
          lastName: lastName
          teacherId: teacherId
          districtId: districtId
          createdUserId: createdUserId
          createdDate: createdDate
          teacherLMSId: teacherLMSId
          isPrimary: true
          userId: userId
          teacherOrganizations:
          - stateId: stateId
            name: name
            id: id
          - stateId: stateId
            name: name
            id: id
          email: email
      properties:
        teacher:
          $ref: '#/components/schemas/Teacher_Organization_teacher'
      required:
      - teacher
      title: Teacher-Organization
      type: object
      x-tags:
      - teacher
    putTeacher_request_teacher:
      properties:
        firstName:
          description: This is a first name of teacher.
          type: string
        lastName:
          description: This is a last name of teacher.
          type: string
        teacherLMSId:
          description: This is a teacherLMSId of teacher.
          type: string
        email:
          type: string
        password:
          type: string
      type: object
    putTeacher_request:
      description: ""
      properties:
        teacher:
          $ref: '#/components/schemas/putTeacher_request_teacher'
      type: object
      x-examples:
        example-1:
          email: teacher1@email.com
          firstName: teacher_first_name_1
          lastName: teacher_last_name_1
          teacherLMSId: teacher_lms_id_1
          password: teacher_password_1
    postStudentGroupUnaccessibleLesson_request:
      description: ""
      properties:
        packageId:
          type: string
      required:
      - packageId
      type: object
    UnaccessibleLesson:
      description: The Definition of Get unaccessible Lesson.
      example:
        createdUserId: createdUserId
        createdDate: createdDate
        packageId: packageId
        studentGroupId: studentGroupId
        lessonId: lessonId
      properties:
        studentGroupId:
          type: string
        packageId:
          type: string
        lessonId:
          type: string
        createdUserId:
          type: string
        createdDate:
          type: string
      required:
      - createdDate
      - createdUserId
      - lessonId
      - packageId
      - studentGroupId
      title: UnaccessibleLesson
      type: object
      x-tags:
      - unaccessibleLesson
    getUnaccessibleLessons_200_response:
      example:
        unaccessibleLessons:
        - createdUserId: createdUserId
          createdDate: createdDate
          packageId: packageId
          studentGroupId: studentGroupId
          lessonId: lessonId
        - createdUserId: createdUserId
          createdDate: createdDate
          packageId: packageId
          studentGroupId: studentGroupId
          lessonId: lessonId
      properties:
        unaccessibleLessons:
          items:
            $ref: '#/components/schemas/UnaccessibleLesson'
          type: array
      required:
      - unaccessibleLessons
      type: object
    getStudentGroupLessonStatuses_200_response:
      example:
        studentGroupLessonStatuses:
        - correctAnsweredQuizCount: 6.027456183070403
          usedHintCount: 1.4658129805029452
          lessonId: lessonId
          stepIdskippingDetected: true
          startedAt: 2000-01-23T04:56:07.000+00:00
          achievedStarCount: 0.8008281904610115
          quizCount: 5.962133916683182
          userId: userId
          status: not_cleared
          finishedAt: 2000-01-23T04:56:07.000+00:00
        - correctAnsweredQuizCount: 6.027456183070403
          usedHintCount: 1.4658129805029452
          lessonId: lessonId
          stepIdskippingDetected: true
          startedAt: 2000-01-23T04:56:07.000+00:00
          achievedStarCount: 0.8008281904610115
          quizCount: 5.962133916683182
          userId: userId
          status: not_cleared
          finishedAt: 2000-01-23T04:56:07.000+00:00
      properties:
        studentGroupLessonStatuses:
          items:
            $ref: '#/components/schemas/UserLessonStatus'
          type: array
      type: object
    getStudentGroupLessonStatuses_500_response:
      description: ""
      properties:
        error:
          type: string
      required:
      - error
      type: object
      x-examples:
        internal server error:
          error: something went wrong
    LoggedInUser_user:
      example:
        role: role
        loginId: loginId
        id: id
        email: email
      properties:
        id:
          type: string
        email:
          nullable: true
          type: string
        role:
          type: string
        loginId:
          nullable: true
          type: string
      type: object
    LoggedInUser_administrator:
      example:
        firstName: firstName
        lastName: lastName
        districtId: districtId
        id: id
        userId: userId
        administratorLMSId: administratorLMSId
      properties:
        id:
          type: string
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        administratorLMSId:
          type: string
        districtId:
          type: string
      type: object
    LoggedInUser_teacher:
      example:
        firstName: firstName
        lastName: lastName
        districtId: districtId
        teacherLMSId: teacherLMSId
        organizationIds:
        - organizationIds
        - organizationIds
        id: id
        userId: userId
      properties:
        id:
          type: string
        userId:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        teacherLMSId:
          type: string
        districtId:
          type: string
        organizationIds:
          items:
            type: string
          type: array
      type: object
    LoggedInUser_student:
      example:
        studentLMSId: studentLMSId
        districtId: districtId
        organizationIds:
        - organizationIds
        - organizationIds
        nickName: nickName
        id: id
        userId: userId
        studentGroupIds:
        - studentGroupIds
        - studentGroupIds
      properties:
        id:
          type: string
        userId:
          type: string
        nickName:
          type: string
        studentLMSId:
          type: string
        districtId:
          type: string
        organizationIds:
          items:
            type: string
          type: array
        studentGroupIds:
          items:
            type: string
          type: array
      type: object
    LoggedInUser:
      example:
        administrator:
          firstName: firstName
          lastName: lastName
          districtId: districtId
          id: id
          userId: userId
          administratorLMSId: administratorLMSId
        teacher:
          firstName: firstName
          lastName: lastName
          districtId: districtId
          teacherLMSId: teacherLMSId
          organizationIds:
          - organizationIds
          - organizationIds
          id: id
          userId: userId
        student:
          studentLMSId: studentLMSId
          districtId: districtId
          organizationIds:
          - organizationIds
          - organizationIds
          nickName: nickName
          id: id
          userId: userId
          studentGroupIds:
          - studentGroupIds
          - studentGroupIds
        user:
          role: role
          loginId: loginId
          id: id
          email: email
      properties:
        user:
          $ref: '#/components/schemas/LoggedInUser_user'
        administrator:
          $ref: '#/components/schemas/LoggedInUser_administrator'
        teacher:
          $ref: '#/components/schemas/LoggedInUser_teacher'
        student:
          $ref: '#/components/schemas/LoggedInUser_student'
      title: LoggedInUser
      type: object
      x-tags:
      - user
    postUserLessonStatus_request:
      properties:
        lessonId:
          minLength: 1
          type: string
      required:
      - lessonId
      type: object
      x-examples:
        example-1:
          lessonId: lesson-id-1
    getAllPackages_200_response_packages_inner:
      example:
        packageId: packageId
        packageCategoryId: codeillusion
        packageName: packageName
      properties:
        packageCategoryId:
          enum:
          - codeillusion
          - cse
          type: string
        packageId:
          description: it is the id of the package.
          type: string
        packageName:
          description: it is the name of the package.
          type: string
      required:
      - packageCategoryId
      - packageId
      - packageName
      type: object
    getAllPackages_200_response:
      example:
        packages:
        - packageId: packageId
          packageCategoryId: codeillusion
          packageName: packageName
        - packageId: packageId
          packageCategoryId: codeillusion
          packageName: packageName
      properties:
        packages:
          items:
            $ref: '#/components/schemas/getAllPackages_200_response_packages_inner'
          type: array
      type: object
    getDistrictPurchasedPackagesByDistrictId_200_response_packages_inner:
      example:
        packageId: packageId
        packageCategoryId: packageCategoryId
        packageName: packageName
      properties:
        packageCategoryId:
          type: string
        packageId:
          description: it is the id of the package.
          type: string
        packageName:
          description: it is the name of the package.
          type: string
      required:
      - packageCategoryId
      - packageId
      - packageName
      type: object
    getDistrictPurchasedPackagesByDistrictId_200_response:
      example:
        packages:
        - packageId: packageId
          packageCategoryId: packageCategoryId
          packageName: packageName
        - packageId: packageId
          packageCategoryId: packageCategoryId
          packageName: packageName
      properties:
        packages:
          items:
            $ref: '#/components/schemas/getDistrictPurchasedPackagesByDistrictId_200_response_packages_inner'
          type: array
      required:
      - packages
      type: object
    StandardMapping_gradeBand_inner_standardDomain_inner:
      example:
        standard: standard
        cse:
        - cse
        - cse
        domain: domain
        disneyCodeillusionLesson:
        - disneyCodeillusionLesson
        - disneyCodeillusionLesson
        description: description
      properties:
        standard:
          type: string
        domain:
          type: string
        description:
          type: string
        disneyCodeillusionLesson:
          items:
            type: string
          type: array
        cse:
          items:
            type: string
          type: array
      required:
      - cse
      - description
      - disneyCodeillusionLesson
      - domain
      - standard
      type: object
    StandardMapping_gradeBand_inner:
      example:
        standardDomain:
        - standard: standard
          cse:
          - cse
          - cse
          domain: domain
          disneyCodeillusionLesson:
          - disneyCodeillusionLesson
          - disneyCodeillusionLesson
          description: description
        - standard: standard
          cse:
          - cse
          - cse
          domain: domain
          disneyCodeillusionLesson:
          - disneyCodeillusionLesson
          - disneyCodeillusionLesson
          description: description
        band: band
      properties:
        band:
          type: string
        standardDomain:
          items:
            $ref: '#/components/schemas/StandardMapping_gradeBand_inner_standardDomain_inner'
          type: array
      required:
      - band
      - standardDomain
      type: object
    StandardMapping:
      description: The Definition of Get standard mapping based on organization state.
      example:
        gradeBand:
        - standardDomain:
          - standard: standard
            cse:
            - cse
            - cse
            domain: domain
            disneyCodeillusionLesson:
            - disneyCodeillusionLesson
            - disneyCodeillusionLesson
            description: description
          - standard: standard
            cse:
            - cse
            - cse
            domain: domain
            disneyCodeillusionLesson:
            - disneyCodeillusionLesson
            - disneyCodeillusionLesson
            description: description
          band: band
        - standardDomain:
          - standard: standard
            cse:
            - cse
            - cse
            domain: domain
            disneyCodeillusionLesson:
            - disneyCodeillusionLesson
            - disneyCodeillusionLesson
            description: description
          - standard: standard
            cse:
            - cse
            - cse
            domain: domain
            disneyCodeillusionLesson:
            - disneyCodeillusionLesson
            - disneyCodeillusionLesson
            description: description
          band: band
        stateId: stateId
        stateStandardName: stateStandardName
      properties:
        stateId:
          type: string
        stateStandardName:
          type: string
        gradeBand:
          items:
            $ref: '#/components/schemas/StandardMapping_gradeBand_inner'
          type: array
      required:
      - gradeBand
      - stateId
      - stateStandardName
      title: StandardMapping
      type: object
    getStandardMapping_200_response:
      example:
        standardMappings:
        - gradeBand:
          - standardDomain:
            - standard: standard
              cse:
              - cse
              - cse
              domain: domain
              disneyCodeillusionLesson:
              - disneyCodeillusionLesson
              - disneyCodeillusionLesson
              description: description
            - standard: standard
              cse:
              - cse
              - cse
              domain: domain
              disneyCodeillusionLesson:
              - disneyCodeillusionLesson
              - disneyCodeillusionLesson
              description: description
            band: band
          - standardDomain:
            - standard: standard
              cse:
              - cse
              - cse
              domain: domain
              disneyCodeillusionLesson:
              - disneyCodeillusionLesson
              - disneyCodeillusionLesson
              description: description
            - standard: standard
              cse:
              - cse
              - cse
              domain: domain
              disneyCodeillusionLesson:
              - disneyCodeillusionLesson
              - disneyCodeillusionLesson
              description: description
            band: band
          stateId: stateId
          stateStandardName: stateStandardName
        - gradeBand:
          - standardDomain:
            - standard: standard
              cse:
              - cse
              - cse
              domain: domain
              disneyCodeillusionLesson:
              - disneyCodeillusionLesson
              - disneyCodeillusionLesson
              description: description
            - standard: standard
              cse:
              - cse
              - cse
              domain: domain
              disneyCodeillusionLesson:
              - disneyCodeillusionLesson
              - disneyCodeillusionLesson
              description: description
            band: band
          - standardDomain:
            - standard: standard
              cse:
              - cse
              - cse
              domain: domain
              disneyCodeillusionLesson:
              - disneyCodeillusionLesson
              - disneyCodeillusionLesson
              description: description
            - standard: standard
              cse:
              - cse
              - cse
              domain: domain
              disneyCodeillusionLesson:
              - disneyCodeillusionLesson
              - disneyCodeillusionLesson
              description: description
            band: band
          stateId: stateId
          stateStandardName: stateStandardName
      properties:
        standardMappings:
          items:
            $ref: '#/components/schemas/StandardMapping'
          type: array
      required:
      - standardMappings
      type: object
    getStudentUnaccessibleLessons_200_response:
      example:
        unaccessibleLessons:
        - unaccessibleLessons
        - unaccessibleLessons
      properties:
        unaccessibleLessons:
          items:
            type: string
          type: array
      required:
      - unaccessibleLessons
      type: object
    StudentGroupPackageAssignment:
      description: The Definition of Get StudentGroupPackageAssignment
      example:
        packageId: packageId
        packageCategoryId: packageCategoryId
        studentGroupId: studentGroupId
      properties:
        packageCategoryId:
          type: string
        studentGroupId:
          type: string
        packageId:
          type: string
      required:
      - packageCategoryId
      - packageId
      - studentGroupId
      title: StudentGroupPackageAssignment
      type: object
    getStudentGroupPackageAssignments_200_response:
      example:
        studentGroupPackageAssignments:
        - packageId: packageId
          packageCategoryId: packageCategoryId
          studentGroupId: studentGroupId
        - packageId: packageId
          packageCategoryId: packageCategoryId
          studentGroupId: studentGroupId
      properties:
        studentGroupPackageAssignments:
          items:
            $ref: '#/components/schemas/StudentGroupPackageAssignment'
          type: array
      required:
      - studentGroupPackageAssignments
      type: object
    CsePackage_units_inner_lessons_inner:
      example:
        isQuizLesson: true
        id: id
      properties:
        id:
          type: string
        isQuizLesson:
          type: boolean
      required:
      - id
      - isQuizLesson
      type: object
    CsePackage_units_inner:
      example:
        name: name
        description: description
        id: id
        lessons:
        - isQuizLesson: true
          id: id
        - isQuizLesson: true
          id: id
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        lessons:
          items:
            $ref: '#/components/schemas/CsePackage_units_inner_lessons_inner'
          type: array
      required:
      - description
      - id
      - lessons
      - name
      type: object
    CsePackage:
      example:
        headerButtonText: headerButtonText
        name: name
        id: id
        units:
        - name: name
          description: description
          id: id
          lessons:
          - isQuizLesson: true
            id: id
          - isQuizLesson: true
            id: id
        - name: name
          description: description
          id: id
          lessons:
          - isQuizLesson: true
            id: id
          - isQuizLesson: true
            id: id
        headerButtonLink: headerButtonLink
      properties:
        id:
          type: string
        name:
          type: string
        headerButtonLink:
          nullable: true
          type: string
        headerButtonText:
          nullable: true
          type: string
        units:
          items:
            $ref: '#/components/schemas/CsePackage_units_inner'
          type: array
      required:
      - headerButtonLink
      - headerButtonText
      - id
      - name
      - units
      title: CsePackage
      type: object
      x-tags:
      - lesson
    getCsePackage_200_response:
      example:
        csePackage:
          headerButtonText: headerButtonText
          name: name
          id: id
          units:
          - name: name
            description: description
            id: id
            lessons:
            - isQuizLesson: true
              id: id
            - isQuizLesson: true
              id: id
          - name: name
            description: description
            id: id
            lessons:
            - isQuizLesson: true
              id: id
            - isQuizLesson: true
              id: id
          headerButtonLink: headerButtonLink
      properties:
        csePackage:
          $ref: '#/components/schemas/CsePackage'
      required:
      - csePackage
      type: object
    putChangePassword_request:
      description: ""
      properties:
        newPassword:
          type: string
      required:
      - newPassword
      type: object
    getDistrictRosterSyncStatus_200_response_districtRosterSyncStatuses_inner:
      example:
        districtId: districtId
        createdUserId: createdUserId
        errorMessage: errorMessage
        startedAt: startedAt
        id: id
        finishedAt: finishedAt
      properties:
        id:
          type: string
        districtId:
          type: string
        startedAt:
          type: string
        finishedAt:
          type: string
        errorMessage:
          type: string
        createdUserId:
          type: string
      required:
      - districtId
      - id
      - startedAt
      type: object
    getDistrictRosterSyncStatus_200_response:
      example:
        districtRosterSyncStatuses:
        - districtId: districtId
          createdUserId: createdUserId
          errorMessage: errorMessage
          startedAt: startedAt
          id: id
          finishedAt: finishedAt
        - districtId: districtId
          createdUserId: createdUserId
          errorMessage: errorMessage
          startedAt: startedAt
          id: id
          finishedAt: finishedAt
      properties:
        districtRosterSyncStatuses:
          items:
            $ref: '#/components/schemas/getDistrictRosterSyncStatus_200_response_districtRosterSyncStatuses_inner'
          type: array
      required:
      - districtRosterSyncStatuses
      type: object
    getCheckToken_200_response:
      description: ""
      example:
        result: valid
        isAccessible: true
        name: name
      properties:
        result:
          enum:
          - valid
          type: string
        isAccessible:
          type: boolean
        name:
          type: string
      required:
      - isAccessible
      - name
      - result
      type: object
      x-examples:
        example-1:
          result: ""
          isAccessible: true
          name: ""
          redirect_url: ""
    getCheckToken_401_response:
      description: ""
      properties:
        result:
          enum:
          - invalid
          minLength: 1
          type: string
        isAccessible:
          type: boolean
        redirect_url:
          minLength: 1
          type: string
      required:
      - isAccessible
      - redirect_url
      - result
      type: object
      x-examples:
        example-1:
          result: invalid
          isAccessible: false
          redirect_url: https://www.yahoo.com
    getPlayersSetting_200_response_header_appearance:
      example:
        show_user_icon: true
        show_menu: true
        show_login_status: true
      properties:
        show_user_icon:
          type: boolean
        show_menu:
          type: boolean
        show_login_status:
          type: boolean
      type: object
    getPlayersSetting_200_response_sound_volume:
      example:
        se: 6.027456183070403
        bgm: 0.8008281904610115
        hint_talk: 5.962133916683182
        serif_talk: 1.4658129805029452
      properties:
        bgm:
          type: number
        se:
          type: number
        serif_talk:
          description: Volume of automatic reading of instructional characters' lines
          type: number
        hint_talk:
          description: Volume of audio played when pressing the play button in the
            upper right corner of the hint window
          type: number
      required:
      - bgm
      - hint_talk
      - se
      - serif_talk
      type: object
    getPlayersSetting_200_response_sound_config_talk_type:
      example:
        hint_talk: hint_talk
        serif_talk: serif_talk
      properties:
        serif_talk:
          type: string
        hint_talk:
          type: string
      required:
      - hint_talk
      - serif_talk
      type: object
    getPlayersSetting_200_response_sound_config:
      example:
        talk_type:
          hint_talk: hint_talk
          serif_talk: serif_talk
        min: 5.637376656633329
        max: 2.3021358869347655
      properties:
        min:
          type: number
        max:
          type: number
        talk_type:
          $ref: '#/components/schemas/getPlayersSetting_200_response_sound_config_talk_type'
      required:
      - max
      - min
      - talk_type
      type: object
    getPlayersSetting_200_response_return_page:
      example:
        title: title
        url: url
      properties:
        title:
          type: string
        url:
          type: string
      required:
      - title
      - url
      type: object
    getPlayersSetting_200_response_custom_items_inner_style:
      example:
        border: border
        padding: padding
        borderRadius: borderRadius
      properties:
        border:
          minLength: 1
          type: string
        padding:
          minLength: 1
          type: string
        borderRadius:
          minLength: 1
          type: string
      required:
      - border
      - borderRadius
      - padding
      type: object
    getPlayersSetting_200_response_custom_items_inner:
      example:
        confirm: confirm
        new_tab: true
        style:
          border: border
          padding: padding
          borderRadius: borderRadius
        text: text
        url: url
      properties:
        url:
          minLength: 1
          type: string
        text:
          minLength: 1
          type: string
        style:
          $ref: '#/components/schemas/getPlayersSetting_200_response_custom_items_inner_style'
        new_tab:
          type: boolean
        confirm:
          minLength: 1
          type: string
      required:
      - confirm
      - new_tab
      - text
      - url
      type: object
    getPlayersSetting_200_response:
      description: ""
      example:
        login_status: "yes"
        sound_volume:
          se: 6.027456183070403
          bgm: 0.8008281904610115
          hint_talk: 5.962133916683182
          serif_talk: 1.4658129805029452
        sound_config:
          talk_type:
            hint_talk: hint_talk
            serif_talk: serif_talk
          min: 5.637376656633329
          max: 2.3021358869347655
        log_level: development
        nickname: nickname
        my_page_url: my_page_url
        return_page:
          title: title
          url: url
        language: en
        player_name: player_name
        header_user_icon_name: header_user_icon_name
        header_appearance:
          show_user_icon: true
          show_menu: true
          show_login_status: true
        custom_items:
        - confirm: confirm
          new_tab: true
          style:
            border: border
            padding: padding
            borderRadius: borderRadius
          text: text
          url: url
        - confirm: confirm
          new_tab: true
          style:
            border: border
            padding: padding
            borderRadius: borderRadius
          text: text
          url: url
      properties:
        language:
          enum:
          - en
          - ja
          minLength: 1
          type: string
        log_level:
          enum:
          - development
          - production
          minLength: 1
          type: string
        header_user_icon_name:
          type: string
        login_status:
          enum:
          - "yes"
          example: "yes"
          minLength: 1
          type: string
        my_page_url:
          description: "URL to which the user is redirected when clicking the user\
            \ icon in the header; if not specified, nothing happens when the icon\
            \ is clicked."
          minLength: 1
          type: string
        player_name:
          description: "User name next to the user icon in the header. If not specified,\
            \ the string \"user\" is used."
          minLength: 1
          type: string
        nickname:
          description: This name is used in serifs of instructors
          minLength: 1
          type: string
        header_appearance:
          $ref: '#/components/schemas/getPlayersSetting_200_response_header_appearance'
        sound_volume:
          $ref: '#/components/schemas/getPlayersSetting_200_response_sound_volume'
        sound_config:
          $ref: '#/components/schemas/getPlayersSetting_200_response_sound_config'
        return_page:
          $ref: '#/components/schemas/getPlayersSetting_200_response_return_page'
        custom_items:
          deprecated: true
          items:
            $ref: '#/components/schemas/getPlayersSetting_200_response_custom_items_inner'
          minItems: 0
          type: array
          uniqueItems: true
      required:
      - custom_items
      - header_appearance
      - header_user_icon_name
      - language
      - log_level
      - login_status
      - return_page
      - sound_config
      - sound_volume
      type: object
    getPlayersSetting_401_response:
      description: ""
      properties:
        login_status:
          enum:
          - "no"
          minLength: 1
          type: string
      required:
      - login_status
      type: object
      x-examples:
        example-1:
          login_status: "no"
    getPlayersServerStatus_200_response:
      description: ""
      example:
        isMaintenance: true
      properties:
        isMaintenance:
          type: boolean
      required:
      - isMaintenance
      type: object
      x-examples:
        example-1:
          isMaintenance: false
    postActionLog_request:
      description: ""
      properties:
        log:
          type: object
      required:
      - log
      type: object
      x-examples:
        example-1:
          log:
            event_name: stepPassed
            project_name: donald
            scenario_path: lesson/g_donald_1
            step_id: "10"
    postStepPassed_request:
      description: ""
      properties:
        project_name:
          description: This is defined in the spread sheet where the lesson steps
            are defined
          minLength: 1
          type: string
        scenario_path:
          description: This is defined in the spread sheet where the lesson steps
            are defined
          minLength: 1
          type: string
        step_id:
          description: This is defined in the spread sheet where the lesson steps
            are defined
          minLength: 1
          type: string
      required:
      - project_name
      - scenario_path
      - step_id
      type: object
      x-examples:
        example-1:
          project_name: donald
          scenario_path: lesson/g_donald_1
          step_id: "10"
    postQuizAnswered_request:
      description: ""
      properties:
        project_name:
          description: This is defined in the spread sheet where the lesson steps
            are defined
          minLength: 1
          type: string
        scenario_path:
          description: This is defined in the spread sheet where the lesson steps
            are defined
          minLength: 1
          type: string
        step_id:
          description: This is defined in the spread sheet where the lesson steps
            are defined
          minLength: 1
          type: string
        is_correct:
          type: boolean
        selected_choice:
          description: Which choice did the user selected
          type: string
      required:
      - is_correct
      - project_name
      - scenario_path
      - selected_choice
      - step_id
      type: object
      x-examples:
        example-1:
          project_name: donald
          scenario_path: lesson/g_donald_1
          step_id: "10"
          is_correct: true
          selected_choice: "fill(255, 0, 0)"
    getLessonsSetting_200_response:
      description: ""
      example:
        redirecetUrl: redirecetUrl
        isAccessible: true
        passed_step_id_list:
        - 0.8008281904610115
        - 0.8008281904610115
        cleared: true
      properties:
        isAccessible:
          type: boolean
        cleared:
          type: boolean
        redirecetUrl:
          type: string
        passed_step_id_list:
          items:
            type: number
          type: array
      required:
      - cleared
      - isAccessible
      - passed_step_id_list
      - redirecetUrl
      type: object
      x-examples:
        example-1:
          isAccessible: true
          cleared: true
          redirecetUrl: http://www.yahoo.co.jp
          passed_step_id_list:
          - 0
          - 1
          - 2
          - 3
          - 4
          - 5
    getLessonsSetting_401_response:
      description: ""
      properties:
        isAccessible:
          type: boolean
        redirectUrl:
          minLength: 1
          type: string
      required:
      - isAccessible
      - redirectUrl
      type: object
      x-examples:
        example-1:
          isAccessible: false
          redirectUrl: "#{ENV['LOGIN_HOST']}/login"
    postLessonFinished_request_finish_status:
      properties:
        quiz_all_answered:
          description: Will be true the user answered all of quiz correcly or the
            lesson has no quiz
          type: boolean
        no_hint_cleared:
          description: Will be true if the user didn't use any hint in the lesson
          type: boolean
        no_status_up:
          description: Will be true if the user did the cheat that skip a step by
            editing the step_id in the URL.
          type: boolean
      required:
      - no_hint_cleared
      - no_status_up
      - quiz_all_answered
      type: object
    postLessonFinished_request:
      description: ""
      properties:
        project_name:
          description: This is defined in the spread sheet where the lesson steps
            are defined
          minLength: 1
          type: string
        scenario_path:
          description: This is defined in the spread sheet where the lesson steps
            are defined
          minLength: 1
          type: string
        finish_status:
          $ref: '#/components/schemas/postLessonFinished_request_finish_status'
      required:
      - finish_status
      - project_name
      - scenario_path
      type: object
    postLessonFinished_200_response_oneOf:
      properties:
        type:
          enum:
          - full_url
          type: string
        value:
          description: "When \"type\" is \"full_url\", this will be the url to which\
            \ the user redirect after the lesson"
          type: string
      required:
      - type
      - value
    postLessonFinished_200_response:
      description: ""
      oneOf:
      - $ref: '#/components/schemas/postLessonFinished_200_response_oneOf'
      type: object
    postLessonFinished_401_response:
      description: ""
      properties:
        login_status:
          enum:
          - "no"
          type: string
      required:
      - login_status
      type: object
    postLessonCleared_200_response_stars_to:
      example:
        quizAllAnswered: true
        noHintCleared: true
        cleared: true
      properties:
        cleared:
          type: boolean
        noHintCleared:
          type: boolean
        quizAllAnswered:
          type: boolean
      required:
      - cleared
      - noHintCleared
      - quizAllAnswered
      type: object
    postLessonCleared_200_response_stars:
      example:
        from:
          quizAllAnswered: true
          noHintCleared: true
          cleared: true
        to:
          quizAllAnswered: true
          noHintCleared: true
          cleared: true
      properties:
        to:
          $ref: '#/components/schemas/postLessonCleared_200_response_stars_to'
        from:
          $ref: '#/components/schemas/postLessonCleared_200_response_stars_to'
      required:
      - from
      - to
      type: object
    postLessonCleared_200_response_status_to_designation:
      example:
        name: name
        rank: 5.962133916683182
        label: label
        requiredTp: 5.637376656633329
      properties:
        label:
          type: string
        rank:
          type: number
        name:
          type: string
        requiredTp:
          type: number
      required:
      - label
      - name
      - rank
      - requiredTp
      type: object
    postLessonCleared_200_response_status_to_courseLevel_inner:
      example:
        level: 9.301444243932576
        name: name
        requiredExp: 7.061401241503109
        label: label
        exp: 2.3021358869347655
      properties:
        exp:
          type: number
        label:
          type: string
        requiredExp:
          type: number
        level:
          type: number
        name:
          type: string
      required:
      - exp
      - label
      - level
      - name
      - requiredExp
      type: object
    postLessonCleared_200_response_status_to:
      example:
        currentChapterName: currentChapterName
        courseLevel:
        - level: 9.301444243932576
          name: name
          requiredExp: 7.061401241503109
          label: label
          exp: 2.3021358869347655
        - level: 9.301444243932576
          name: name
          requiredExp: 7.061401241503109
          label: label
          exp: 2.3021358869347655
        coins: 1.4658129805029452
        nickname: nickname
        designation:
          name: name
          rank: 5.962133916683182
          label: label
          requiredTp: 5.637376656633329
        tp: 6.027456183070403
        totalStarNum: 0.8008281904610115
      properties:
        totalStarNum:
          type: number
        tp:
          type: number
        nickname:
          type: string
        coins:
          type: number
        designation:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_to_designation'
        courseLevel:
          items:
            $ref: '#/components/schemas/postLessonCleared_200_response_status_to_courseLevel_inner'
          type: array
        currentChapterName:
          type: string
      required:
      - coins
      - courseLevel
      - currentChapterName
      - designation
      - nickname
      - totalStarNum
      - tp
      type: object
    postLessonCleared_200_response_status_levelTable_mediaArt:
      example:
        "0": 3.616076749251911
      properties:
        "0":
          type: number
      required:
      - "0"
      type: object
    postLessonCleared_200_response_status_levelTable:
      example:
        mediaArt:
          "0": 3.616076749251911
        game:
          "0": 3.616076749251911
        webDesign:
          "0": 3.616076749251911
        basic:
          "0": 3.616076749251911
      properties:
        mediaArt:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_levelTable_mediaArt'
        basic:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_levelTable_mediaArt'
        webDesign:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_levelTable_mediaArt'
        game:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_levelTable_mediaArt'
      required:
      - basic
      - game
      - mediaArt
      - webDesign
      type: object
    postLessonCleared_200_response_status_rankTable_label:
      example:
        "0": "0"
      properties:
        "0":
          type: string
      required:
      - "0"
      type: object
    postLessonCleared_200_response_status_rankTable:
      example:
        label:
          "0": "0"
        tp:
          "0": 3.616076749251911
      properties:
        label:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_rankTable_label'
        tp:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_levelTable_mediaArt'
      required:
      - label
      - tp
      type: object
    postLessonCleared_200_response_status:
      example:
        from:
          currentChapterName: currentChapterName
          courseLevel:
          - level: 9.301444243932576
            name: name
            requiredExp: 7.061401241503109
            label: label
            exp: 2.3021358869347655
          - level: 9.301444243932576
            name: name
            requiredExp: 7.061401241503109
            label: label
            exp: 2.3021358869347655
          coins: 1.4658129805029452
          nickname: nickname
          designation:
            name: name
            rank: 5.962133916683182
            label: label
            requiredTp: 5.637376656633329
          tp: 6.027456183070403
          totalStarNum: 0.8008281904610115
        to:
          currentChapterName: currentChapterName
          courseLevel:
          - level: 9.301444243932576
            name: name
            requiredExp: 7.061401241503109
            label: label
            exp: 2.3021358869347655
          - level: 9.301444243932576
            name: name
            requiredExp: 7.061401241503109
            label: label
            exp: 2.3021358869347655
          coins: 1.4658129805029452
          nickname: nickname
          designation:
            name: name
            rank: 5.962133916683182
            label: label
            requiredTp: 5.637376656633329
          tp: 6.027456183070403
          totalStarNum: 0.8008281904610115
        levelTable:
          mediaArt:
            "0": 3.616076749251911
          game:
            "0": 3.616076749251911
          webDesign:
            "0": 3.616076749251911
          basic:
            "0": 3.616076749251911
        rankTable:
          label:
            "0": "0"
          tp:
            "0": 3.616076749251911
      properties:
        to:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_to'
        from:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_to'
        levelTable:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_levelTable'
        rankTable:
          $ref: '#/components/schemas/postLessonCleared_200_response_status_rankTable'
      required:
      - from
      - levelTable
      - rankTable
      - to
      type: object
    postLessonCleared_200_response:
      description: ""
      example:
        stars:
          from:
            quizAllAnswered: true
            noHintCleared: true
            cleared: true
          to:
            quizAllAnswered: true
            noHintCleared: true
            cleared: true
        status:
          from:
            currentChapterName: currentChapterName
            courseLevel:
            - level: 9.301444243932576
              name: name
              requiredExp: 7.061401241503109
              label: label
              exp: 2.3021358869347655
            - level: 9.301444243932576
              name: name
              requiredExp: 7.061401241503109
              label: label
              exp: 2.3021358869347655
            coins: 1.4658129805029452
            nickname: nickname
            designation:
              name: name
              rank: 5.962133916683182
              label: label
              requiredTp: 5.637376656633329
            tp: 6.027456183070403
            totalStarNum: 0.8008281904610115
          to:
            currentChapterName: currentChapterName
            courseLevel:
            - level: 9.301444243932576
              name: name
              requiredExp: 7.061401241503109
              label: label
              exp: 2.3021358869347655
            - level: 9.301444243932576
              name: name
              requiredExp: 7.061401241503109
              label: label
              exp: 2.3021358869347655
            coins: 1.4658129805029452
            nickname: nickname
            designation:
              name: name
              rank: 5.962133916683182
              label: label
              requiredTp: 5.637376656633329
            tp: 6.027456183070403
            totalStarNum: 0.8008281904610115
          levelTable:
            mediaArt:
              "0": 3.616076749251911
            game:
              "0": 3.616076749251911
            webDesign:
              "0": 3.616076749251911
            basic:
              "0": 3.616076749251911
          rankTable:
            label:
              "0": "0"
            tp:
              "0": 3.616076749251911
      properties:
        stars:
          $ref: '#/components/schemas/postLessonCleared_200_response_stars'
        status:
          $ref: '#/components/schemas/postLessonCleared_200_response_status'
      required:
      - stars
      - status
      type: object
    getChurnZeroAuthentication_302_response:
      description: ""
      properties:
        authToken:
          type: string
      required:
      - authToken
      type: object
    MaintenanceUserStudentRole:
      properties:
        role:
          enum:
          - student
          type: string
        nickname:
          type: string
        lmsId:
          type: string
      required:
      - nickname
      - role
      title: MaintenanceUserStudentRole
      type: object
    MaintenanceAuthenticationInfo:
      properties:
        loginId:
          type: string
        email:
          type: string
        password:
          type: string
      required:
      - email
      - loginId
      - password
      title: MaintenanceAuthenticationInfo
      type: object
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf:
      properties:
        id:
          type: string
      required:
      - id
      type: object
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserStudentRole'
      - $ref: '#/components/schemas/MaintenanceAuthenticationInfo'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
    MaintenanceUserTeacherRole:
      properties:
        role:
          enum:
          - teacher
          type: string
        firstName:
          type: string
        lastName:
          type: string
        lmsId:
          type: string
      required:
      - firstName
      - lastName
      - role
      title: MaintenanceUserTeacherRole
      type: object
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_1:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserTeacherRole'
      - $ref: '#/components/schemas/MaintenanceAuthenticationInfo'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
    MaintenanceUserAdministratorRole:
      properties:
        role:
          enum:
          - administrator
          type: string
        firstName:
          type: string
        lastName:
          type: string
        lmsId:
          type: string
      required:
      - firstName
      - lastName
      - role
      title: MaintenanceUserAdministratorRole
      type: object
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_2:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserAdministratorRole'
      - $ref: '#/components/schemas/MaintenanceAuthenticationInfo'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
    MaintenanceUserInternalOperatorRole:
      properties:
        role:
          enum:
          - internalOperator
          type: string
      required:
      - role
      title: MaintenanceUserInternalOperatorRole
      type: object
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_3:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserInternalOperatorRole'
      - $ref: '#/components/schemas/MaintenanceAuthenticationInfo'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
    MaintenanceUserPerRoleWithIdAndAuthenticationInfo:
      oneOf:
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_1'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_2'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_3'
      title: MaintenanceUserPerRoleWithIdAndAuthenticationInfo
    maintenanceGetUsers_200_response:
      description: ""
      example:
        users:
        - null
        - null
      properties:
        users:
          items:
            $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo'
          type: array
      required:
      - users
      type: object
    maintenancePutUsers_request_users_inner:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo'
    maintenancePutUsers_request:
      description: ""
      properties:
        users:
          items:
            $ref: '#/components/schemas/maintenancePutUsers_request_users_inner'
          type: array
      required:
      - users
      type: object
    MaintenanceUserPerRoleWithAuthenticationInfo_oneOf:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserStudentRole'
      - $ref: '#/components/schemas/MaintenanceAuthenticationInfo'
    MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_1:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserTeacherRole'
      - $ref: '#/components/schemas/MaintenanceAuthenticationInfo'
    MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_2:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserAdministratorRole'
      - $ref: '#/components/schemas/MaintenanceAuthenticationInfo'
    MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_3:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserInternalOperatorRole'
      - $ref: '#/components/schemas/MaintenanceAuthenticationInfo'
    MaintenanceUserPerRoleWithAuthenticationInfo:
      oneOf:
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithAuthenticationInfo_oneOf'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_1'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_2'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithAuthenticationInfo_oneOf_3'
      title: MaintenanceUserPerRoleWithAuthenticationInfo
    maintenancePostUsers_request:
      description: ""
      properties:
        users:
          items:
            $ref: '#/components/schemas/MaintenanceUserPerRoleWithAuthenticationInfo'
          type: array
      required:
      - users
      type: object
    MaintenanceUserPerRoleWithId_oneOf:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserStudentRole'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
    MaintenanceUserPerRoleWithId_oneOf_1:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserTeacherRole'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
    MaintenanceUserPerRoleWithId_oneOf_2:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserAdministratorRole'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
    MaintenanceUserPerRoleWithId_oneOf_3:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserInternalOperatorRole'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
    MaintenanceUserPerRoleWithId:
      oneOf:
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithId_oneOf'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithId_oneOf_1'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithId_oneOf_2'
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithId_oneOf_3'
      title: MaintenanceUserPerRoleWithId
    maintenancePostUsers_200_response:
      description: ""
      example:
        users:
        - null
        - null
      properties:
        users:
          items:
            $ref: '#/components/schemas/MaintenanceUserPerRoleWithId'
          type: array
      required:
      - users
      type: object
    maintenancePostAccountNotification_request_accounts_inner:
      properties:
        email:
          type: string
        password:
          type: string
      required:
      - email
      - password
      type: object
    maintenancePostAccountNotification_request:
      description: ""
      properties:
        title:
          type: string
        accounts:
          items:
            $ref: '#/components/schemas/maintenancePostAccountNotification_request_accounts_inner'
          type: array
        toType:
          enum:
          - email
          - adminId
          - teacherId
          type: string
        toEmails:
          items:
            type: string
          type: array
        toAdminIds:
          items:
            type: string
          type: array
        toTeacherIds:
          items:
            type: string
          type: array
      required:
      - accounts
      - title
      - toType
      type: object
    maintenancePostAccountNotification_200_response:
      description: ""
      example:
        message: ok
      properties:
        message:
          enum:
          - ok
          type: string
      required:
      - message
      type: object
    MaintenanceDistrict:
      description: The Definition of Get Districts.
      properties:
        name:
          type: string
        stateId:
          type: string
        lmsId:
          type: string
        enableRosterSync:
          type: boolean
        districtLmsId:
          type: string
      required:
      - name
      - stateId
      title: MaintenanceDistrict
      type: object
    DistrictWithId:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
      - $ref: '#/components/schemas/MaintenanceDistrict'
      title: DistrictWithId
    maintenanceGetDistricts_200_response:
      description: ""
      example:
        districts:
        - null
        - null
      properties:
        districts:
          items:
            $ref: '#/components/schemas/DistrictWithId'
          type: array
      required:
      - districts
      type: object
    maintenancePutDistricts_request_districts_inner_allOf:
      properties:
        id:
          type: string
      type: object
    maintenancePutDistricts_request_districts_inner:
      allOf:
      - $ref: '#/components/schemas/maintenancePutDistricts_request_districts_inner_allOf'
      - $ref: '#/components/schemas/MaintenanceDistrict'
    maintenancePutDistricts_request:
      description: ""
      properties:
        districts:
          items:
            $ref: '#/components/schemas/maintenancePutDistricts_request_districts_inner'
          type: array
      required:
      - districts
      type: object
    maintenancePutDistricts_200_response:
      description: ""
      example:
        ok: ok
      properties:
        ok:
          type: string
      required:
      - ok
      type: object
    MaintenanceOrganization:
      description: The Definition of Get Organizations.
      properties:
        name:
          type: string
        districtId:
          type: string
        stateId:
          type: string
        organizationLmsId:
          type: string
      required:
      - districtId
      - name
      - stateId
      title: MaintenanceOrganization
      type: object
    OrganizationWithId:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
      - $ref: '#/components/schemas/MaintenanceOrganization'
      title: OrganizationWithId
    maintenanceGetOrganizations_200_response:
      description: ""
      example:
        organizations:
        - null
        - null
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/OrganizationWithId'
          type: array
      required:
      - organizations
      type: object
    maintenancePutOrganizations_request_organizations_inner:
      allOf:
      - $ref: '#/components/schemas/maintenancePutDistricts_request_districts_inner_allOf'
      - $ref: '#/components/schemas/MaintenanceOrganization'
    maintenancePutOrganizations_request:
      description: ""
      properties:
        organizations:
          items:
            $ref: '#/components/schemas/maintenancePutOrganizations_request_organizations_inner'
          type: array
      required:
      - organizations
      type: object
    MaintenanceStudentGroup:
      description: The Definition of Get Student Groups.
      properties:
        organizationId:
          type: string
        name:
          type: string
        codeillusionPackageId:
          type: string
        csePackageId:
          type: string
        grade:
          type: string
        studentGroupLmsId:
          type: string
      required:
      - codeillusionPackageId
      - grade
      - name
      - organizationId
      title: MaintenanceStudentGroup
      type: object
    StudentGroupWithId:
      allOf:
      - $ref: '#/components/schemas/MaintenanceUserPerRoleWithIdAndAuthenticationInfo_oneOf_allOf'
      - $ref: '#/components/schemas/MaintenanceStudentGroup'
      title: StudentGroupWithId
    maintenanceGetStudentGroups_200_response:
      description: ""
      example:
        studentGroups:
        - null
        - null
      properties:
        studentGroups:
          items:
            $ref: '#/components/schemas/StudentGroupWithId'
          type: array
      required:
      - studentGroups
      type: object
    maintenancePutStudentGroups_request_studentGroups_inner:
      allOf:
      - $ref: '#/components/schemas/maintenancePutDistricts_request_districts_inner_allOf'
      - $ref: '#/components/schemas/MaintenanceStudentGroup'
    maintenancePutStudentGroups_request:
      description: ""
      properties:
        studentGroups:
          items:
            $ref: '#/components/schemas/maintenancePutStudentGroups_request_studentGroups_inner'
          type: array
      required:
      - studentGroups
      type: object
    MaintenanceAdministratorDistrict:
      description: The Definition of Get Districts.
      example:
        districtId: districtId
        userId: userId
      properties:
        districtId:
          type: string
        userId:
          type: string
      required:
      - districtId
      - userId
      title: MaintenanceAdministratorDistrict
      type: object
    maintenanceGetAdministratorDistricts_200_response:
      description: ""
      example:
        administratorDistricts:
        - districtId: districtId
          userId: userId
        - districtId: districtId
          userId: userId
      properties:
        administratorDistricts:
          items:
            $ref: '#/components/schemas/MaintenanceAdministratorDistrict'
          type: array
      required:
      - administratorDistricts
      type: object
    MaintenanceTeacherOrganization:
      description: The Definition of Get Organizations.
      example:
        organizationId: organizationId
        userId: userId
      properties:
        organizationId:
          type: string
        userId:
          type: string
      required:
      - organizationId
      - userId
      title: MaintenanceTeacherOrganization
      type: object
    maintenanceGetTeacherOrganizations_200_response:
      description: ""
      example:
        teacherOrganizations:
        - organizationId: organizationId
          userId: userId
        - organizationId: organizationId
          userId: userId
      properties:
        teacherOrganizations:
          items:
            $ref: '#/components/schemas/MaintenanceTeacherOrganization'
          type: array
      required:
      - teacherOrganizations
      type: object
    MaintenanceStudentGroupStudent:
      description: The Definition of Get Student Groups.
      example:
        studentGroupId: studentGroupId
        userId: userId
      properties:
        studentGroupId:
          type: string
        userId:
          type: string
      required:
      - studentGroupId
      - userId
      title: MaintenanceStudentGroupStudent
      type: object
    maintenanceGetStudentGroupStudents_200_response:
      description: ""
      example:
        studentGroupStudents:
        - studentGroupId: studentGroupId
          userId: userId
        - studentGroupId: studentGroupId
          userId: userId
      properties:
        studentGroupStudents:
          items:
            $ref: '#/components/schemas/MaintenanceStudentGroupStudent'
          type: array
      required:
      - studentGroupStudents
      type: object
    maintenanceGetConstructFreeTrialAccountsForSales_200_response:
      description: ""
      example:
        message: message
      properties:
        message:
          type: string
      required:
      - message
      type: object
  securitySchemes:
    BearerAuth:
      scheme: bearer
      type: http
